
c:/Users/Mikkel/Desktop/TML/target/6.3.3/p2/TML.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085fb000  085fb000  0000b000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000008c  085fb018  085fb018  0000b018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023fb258  085fb0a8  0000b258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   00004d98  023fb260  085fb0b0  0000b260  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  4 .data_alt     00000000  023ffff8  023ffff8  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffff8  023ffff8  00020000  2**0
                  CONTENTS
  6 .data         00000080  1007aa98  085ffe48  0001aa98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004e4  1007ab18  1007ab18  0002ab18  2**2
                  ALLOC
  8 .secure_ram_text 00000000  1007d000  1007d000  00020000  2**0
                  CONTENTS
  9 .backup       00000004  1007b400  085ffec8  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .module_info_suffix_align 000000ec  085ffecc  085ffecc  0001fecc  2**0
                  ALLOC
 11 .module_info_product 00000006  085fffb8  085fffb8  0001fecc  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   001fe311  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00019316  00000000  00000000  0021e311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    0007f836  00000000  00000000  00237627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003e68  00000000  00000000  002b6e5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00014be0  00000000  00000000  002bacc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0004cc64  00000000  00000000  002cf8a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0005e95d  00000000  00000000  0031c509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001879f3  00000000  00000000  0037ae66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000ba1c  00000000  00000000  0050285c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085fb018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fb018:	4813      	ldr	r0, [pc, #76]	; (85fb068 <module_user_pre_init+0x50>)
 85fb01a:	4914      	ldr	r1, [pc, #80]	; (85fb06c <module_user_pre_init+0x54>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85fb01c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fb01e:	4288      	cmp	r0, r1
 85fb020:	d005      	beq.n	85fb02e <module_user_pre_init+0x16>
 85fb022:	4a13      	ldr	r2, [pc, #76]	; (85fb070 <module_user_pre_init+0x58>)
 85fb024:	4282      	cmp	r2, r0
 85fb026:	d002      	beq.n	85fb02e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85fb028:	4b12      	ldr	r3, [pc, #72]	; (85fb074 <module_user_pre_init+0x5c>)
 85fb02a:	1a12      	subs	r2, r2, r0
 85fb02c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85fb02e:	4812      	ldr	r0, [pc, #72]	; (85fb078 <module_user_pre_init+0x60>)
 85fb030:	4a12      	ldr	r2, [pc, #72]	; (85fb07c <module_user_pre_init+0x64>)
 85fb032:	2100      	movs	r1, #0
 85fb034:	4b12      	ldr	r3, [pc, #72]	; (85fb080 <module_user_pre_init+0x68>)
 85fb036:	1a12      	subs	r2, r2, r0
 85fb038:	4798      	blx	r3

    // Copy .dynalib
    if ( (&link_dynalib_start != &link_dynalib_flash_start) && (link_dynalib_size != 0))
 85fb03a:	4812      	ldr	r0, [pc, #72]	; (85fb084 <module_user_pre_init+0x6c>)
 85fb03c:	4912      	ldr	r1, [pc, #72]	; (85fb088 <module_user_pre_init+0x70>)
 85fb03e:	4288      	cmp	r0, r1
 85fb040:	d005      	beq.n	85fb04e <module_user_pre_init+0x36>
 85fb042:	4a12      	ldr	r2, [pc, #72]	; (85fb08c <module_user_pre_init+0x74>)
 85fb044:	4282      	cmp	r2, r0
 85fb046:	d002      	beq.n	85fb04e <module_user_pre_init+0x36>
    {
        _memcpy(&link_dynalib_start, &link_dynalib_flash_start, link_dynalib_size);
 85fb048:	4b0a      	ldr	r3, [pc, #40]	; (85fb074 <module_user_pre_init+0x5c>)
 85fb04a:	1a12      	subs	r2, r2, r0
 85fb04c:	4798      	blx	r3
    }

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85fb04e:	4810      	ldr	r0, [pc, #64]	; (85fb090 <module_user_pre_init+0x78>)
 85fb050:	4910      	ldr	r1, [pc, #64]	; (85fb094 <module_user_pre_init+0x7c>)
 85fb052:	4288      	cmp	r0, r1
 85fb054:	d005      	beq.n	85fb062 <module_user_pre_init+0x4a>
 85fb056:	4a10      	ldr	r2, [pc, #64]	; (85fb098 <module_user_pre_init+0x80>)
 85fb058:	4282      	cmp	r2, r0
 85fb05a:	d002      	beq.n	85fb062 <module_user_pre_init+0x4a>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85fb05c:	4b05      	ldr	r3, [pc, #20]	; (85fb074 <module_user_pre_init+0x5c>)
 85fb05e:	1a12      	subs	r2, r2, r0
 85fb060:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85fb062:	4801      	ldr	r0, [pc, #4]	; (85fb068 <module_user_pre_init+0x50>)
 85fb064:	bd08      	pop	{r3, pc}
 85fb066:	bf00      	nop
 85fb068:	1007aa98 	.word	0x1007aa98
 85fb06c:	085ffe48 	.word	0x085ffe48
 85fb070:	1007ab18 	.word	0x1007ab18
 85fb074:	10110d2d 	.word	0x10110d2d
 85fb078:	1007ab18 	.word	0x1007ab18
 85fb07c:	1007affc 	.word	0x1007affc
 85fb080:	10110ea1 	.word	0x10110ea1
 85fb084:	023fb258 	.word	0x023fb258
 85fb088:	085fb0a8 	.word	0x085fb0a8
 85fb08c:	023fb260 	.word	0x023fb260
 85fb090:	023fb260 	.word	0x023fb260
 85fb094:	085fb0b0 	.word	0x085fb0b0
 85fb098:	023ffff8 	.word	0x023ffff8

085fb09c <dynalib_preinit>:
 85fb09c:	085fb019 00000000                       .._.....

Disassembly of section .psram_text:

023fb260 <__aeabi_drsub>:
 23fb260:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 23fb264:	e002      	b.n	23fb26c <__adddf3>
 23fb266:	bf00      	nop

023fb268 <__aeabi_dsub>:
 23fb268:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

023fb26c <__adddf3>:
 23fb26c:	b530      	push	{r4, r5, lr}
 23fb26e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 23fb272:	ea4f 0543 	mov.w	r5, r3, lsl #1
 23fb276:	ea94 0f05 	teq	r4, r5
 23fb27a:	bf08      	it	eq
 23fb27c:	ea90 0f02 	teqeq	r0, r2
 23fb280:	bf1f      	itttt	ne
 23fb282:	ea54 0c00 	orrsne.w	ip, r4, r0
 23fb286:	ea55 0c02 	orrsne.w	ip, r5, r2
 23fb28a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 23fb28e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23fb292:	f000 80e2 	beq.w	23fb45a <__adddf3+0x1ee>
 23fb296:	ea4f 5454 	mov.w	r4, r4, lsr #21
 23fb29a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 23fb29e:	bfb8      	it	lt
 23fb2a0:	426d      	neglt	r5, r5
 23fb2a2:	dd0c      	ble.n	23fb2be <__adddf3+0x52>
 23fb2a4:	442c      	add	r4, r5
 23fb2a6:	ea80 0202 	eor.w	r2, r0, r2
 23fb2aa:	ea81 0303 	eor.w	r3, r1, r3
 23fb2ae:	ea82 0000 	eor.w	r0, r2, r0
 23fb2b2:	ea83 0101 	eor.w	r1, r3, r1
 23fb2b6:	ea80 0202 	eor.w	r2, r0, r2
 23fb2ba:	ea81 0303 	eor.w	r3, r1, r3
 23fb2be:	2d36      	cmp	r5, #54	; 0x36
 23fb2c0:	bf88      	it	hi
 23fb2c2:	bd30      	pophi	{r4, r5, pc}
 23fb2c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23fb2c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23fb2cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 23fb2d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 23fb2d4:	d002      	beq.n	23fb2dc <__adddf3+0x70>
 23fb2d6:	4240      	negs	r0, r0
 23fb2d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23fb2dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 23fb2e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23fb2e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 23fb2e8:	d002      	beq.n	23fb2f0 <__adddf3+0x84>
 23fb2ea:	4252      	negs	r2, r2
 23fb2ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23fb2f0:	ea94 0f05 	teq	r4, r5
 23fb2f4:	f000 80a7 	beq.w	23fb446 <__adddf3+0x1da>
 23fb2f8:	f1a4 0401 	sub.w	r4, r4, #1
 23fb2fc:	f1d5 0e20 	rsbs	lr, r5, #32
 23fb300:	db0d      	blt.n	23fb31e <__adddf3+0xb2>
 23fb302:	fa02 fc0e 	lsl.w	ip, r2, lr
 23fb306:	fa22 f205 	lsr.w	r2, r2, r5
 23fb30a:	1880      	adds	r0, r0, r2
 23fb30c:	f141 0100 	adc.w	r1, r1, #0
 23fb310:	fa03 f20e 	lsl.w	r2, r3, lr
 23fb314:	1880      	adds	r0, r0, r2
 23fb316:	fa43 f305 	asr.w	r3, r3, r5
 23fb31a:	4159      	adcs	r1, r3
 23fb31c:	e00e      	b.n	23fb33c <__adddf3+0xd0>
 23fb31e:	f1a5 0520 	sub.w	r5, r5, #32
 23fb322:	f10e 0e20 	add.w	lr, lr, #32
 23fb326:	2a01      	cmp	r2, #1
 23fb328:	fa03 fc0e 	lsl.w	ip, r3, lr
 23fb32c:	bf28      	it	cs
 23fb32e:	f04c 0c02 	orrcs.w	ip, ip, #2
 23fb332:	fa43 f305 	asr.w	r3, r3, r5
 23fb336:	18c0      	adds	r0, r0, r3
 23fb338:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 23fb33c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fb340:	d507      	bpl.n	23fb352 <__adddf3+0xe6>
 23fb342:	f04f 0e00 	mov.w	lr, #0
 23fb346:	f1dc 0c00 	rsbs	ip, ip, #0
 23fb34a:	eb7e 0000 	sbcs.w	r0, lr, r0
 23fb34e:	eb6e 0101 	sbc.w	r1, lr, r1
 23fb352:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 23fb356:	d31b      	bcc.n	23fb390 <__adddf3+0x124>
 23fb358:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 23fb35c:	d30c      	bcc.n	23fb378 <__adddf3+0x10c>
 23fb35e:	0849      	lsrs	r1, r1, #1
 23fb360:	ea5f 0030 	movs.w	r0, r0, rrx
 23fb364:	ea4f 0c3c 	mov.w	ip, ip, rrx
 23fb368:	f104 0401 	add.w	r4, r4, #1
 23fb36c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 23fb370:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 23fb374:	f080 809a 	bcs.w	23fb4ac <__adddf3+0x240>
 23fb378:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 23fb37c:	bf08      	it	eq
 23fb37e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23fb382:	f150 0000 	adcs.w	r0, r0, #0
 23fb386:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fb38a:	ea41 0105 	orr.w	r1, r1, r5
 23fb38e:	bd30      	pop	{r4, r5, pc}
 23fb390:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 23fb394:	4140      	adcs	r0, r0
 23fb396:	eb41 0101 	adc.w	r1, r1, r1
 23fb39a:	3c01      	subs	r4, #1
 23fb39c:	bf28      	it	cs
 23fb39e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 23fb3a2:	d2e9      	bcs.n	23fb378 <__adddf3+0x10c>
 23fb3a4:	f091 0f00 	teq	r1, #0
 23fb3a8:	bf04      	itt	eq
 23fb3aa:	4601      	moveq	r1, r0
 23fb3ac:	2000      	moveq	r0, #0
 23fb3ae:	fab1 f381 	clz	r3, r1
 23fb3b2:	bf08      	it	eq
 23fb3b4:	3320      	addeq	r3, #32
 23fb3b6:	f1a3 030b 	sub.w	r3, r3, #11
 23fb3ba:	f1b3 0220 	subs.w	r2, r3, #32
 23fb3be:	da0c      	bge.n	23fb3da <__adddf3+0x16e>
 23fb3c0:	320c      	adds	r2, #12
 23fb3c2:	dd08      	ble.n	23fb3d6 <__adddf3+0x16a>
 23fb3c4:	f102 0c14 	add.w	ip, r2, #20
 23fb3c8:	f1c2 020c 	rsb	r2, r2, #12
 23fb3cc:	fa01 f00c 	lsl.w	r0, r1, ip
 23fb3d0:	fa21 f102 	lsr.w	r1, r1, r2
 23fb3d4:	e00c      	b.n	23fb3f0 <__adddf3+0x184>
 23fb3d6:	f102 0214 	add.w	r2, r2, #20
 23fb3da:	bfd8      	it	le
 23fb3dc:	f1c2 0c20 	rsble	ip, r2, #32
 23fb3e0:	fa01 f102 	lsl.w	r1, r1, r2
 23fb3e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 23fb3e8:	bfdc      	itt	le
 23fb3ea:	ea41 010c 	orrle.w	r1, r1, ip
 23fb3ee:	4090      	lslle	r0, r2
 23fb3f0:	1ae4      	subs	r4, r4, r3
 23fb3f2:	bfa2      	ittt	ge
 23fb3f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 23fb3f8:	4329      	orrge	r1, r5
 23fb3fa:	bd30      	popge	{r4, r5, pc}
 23fb3fc:	ea6f 0404 	mvn.w	r4, r4
 23fb400:	3c1f      	subs	r4, #31
 23fb402:	da1c      	bge.n	23fb43e <__adddf3+0x1d2>
 23fb404:	340c      	adds	r4, #12
 23fb406:	dc0e      	bgt.n	23fb426 <__adddf3+0x1ba>
 23fb408:	f104 0414 	add.w	r4, r4, #20
 23fb40c:	f1c4 0220 	rsb	r2, r4, #32
 23fb410:	fa20 f004 	lsr.w	r0, r0, r4
 23fb414:	fa01 f302 	lsl.w	r3, r1, r2
 23fb418:	ea40 0003 	orr.w	r0, r0, r3
 23fb41c:	fa21 f304 	lsr.w	r3, r1, r4
 23fb420:	ea45 0103 	orr.w	r1, r5, r3
 23fb424:	bd30      	pop	{r4, r5, pc}
 23fb426:	f1c4 040c 	rsb	r4, r4, #12
 23fb42a:	f1c4 0220 	rsb	r2, r4, #32
 23fb42e:	fa20 f002 	lsr.w	r0, r0, r2
 23fb432:	fa01 f304 	lsl.w	r3, r1, r4
 23fb436:	ea40 0003 	orr.w	r0, r0, r3
 23fb43a:	4629      	mov	r1, r5
 23fb43c:	bd30      	pop	{r4, r5, pc}
 23fb43e:	fa21 f004 	lsr.w	r0, r1, r4
 23fb442:	4629      	mov	r1, r5
 23fb444:	bd30      	pop	{r4, r5, pc}
 23fb446:	f094 0f00 	teq	r4, #0
 23fb44a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 23fb44e:	bf06      	itte	eq
 23fb450:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 23fb454:	3401      	addeq	r4, #1
 23fb456:	3d01      	subne	r5, #1
 23fb458:	e74e      	b.n	23fb2f8 <__adddf3+0x8c>
 23fb45a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23fb45e:	bf18      	it	ne
 23fb460:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23fb464:	d029      	beq.n	23fb4ba <__adddf3+0x24e>
 23fb466:	ea94 0f05 	teq	r4, r5
 23fb46a:	bf08      	it	eq
 23fb46c:	ea90 0f02 	teqeq	r0, r2
 23fb470:	d005      	beq.n	23fb47e <__adddf3+0x212>
 23fb472:	ea54 0c00 	orrs.w	ip, r4, r0
 23fb476:	bf04      	itt	eq
 23fb478:	4619      	moveq	r1, r3
 23fb47a:	4610      	moveq	r0, r2
 23fb47c:	bd30      	pop	{r4, r5, pc}
 23fb47e:	ea91 0f03 	teq	r1, r3
 23fb482:	bf1e      	ittt	ne
 23fb484:	2100      	movne	r1, #0
 23fb486:	2000      	movne	r0, #0
 23fb488:	bd30      	popne	{r4, r5, pc}
 23fb48a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 23fb48e:	d105      	bne.n	23fb49c <__adddf3+0x230>
 23fb490:	0040      	lsls	r0, r0, #1
 23fb492:	4149      	adcs	r1, r1
 23fb494:	bf28      	it	cs
 23fb496:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 23fb49a:	bd30      	pop	{r4, r5, pc}
 23fb49c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 23fb4a0:	bf3c      	itt	cc
 23fb4a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 23fb4a6:	bd30      	popcc	{r4, r5, pc}
 23fb4a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fb4ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 23fb4b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23fb4b4:	f04f 0000 	mov.w	r0, #0
 23fb4b8:	bd30      	pop	{r4, r5, pc}
 23fb4ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23fb4be:	bf1a      	itte	ne
 23fb4c0:	4619      	movne	r1, r3
 23fb4c2:	4610      	movne	r0, r2
 23fb4c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 23fb4c8:	bf1c      	itt	ne
 23fb4ca:	460b      	movne	r3, r1
 23fb4cc:	4602      	movne	r2, r0
 23fb4ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23fb4d2:	bf06      	itte	eq
 23fb4d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 23fb4d8:	ea91 0f03 	teqeq	r1, r3
 23fb4dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 23fb4e0:	bd30      	pop	{r4, r5, pc}
 23fb4e2:	bf00      	nop

023fb4e4 <__aeabi_ui2d>:
 23fb4e4:	f090 0f00 	teq	r0, #0
 23fb4e8:	bf04      	itt	eq
 23fb4ea:	2100      	moveq	r1, #0
 23fb4ec:	4770      	bxeq	lr
 23fb4ee:	b530      	push	{r4, r5, lr}
 23fb4f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fb4f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fb4f8:	f04f 0500 	mov.w	r5, #0
 23fb4fc:	f04f 0100 	mov.w	r1, #0
 23fb500:	e750      	b.n	23fb3a4 <__adddf3+0x138>
 23fb502:	bf00      	nop

023fb504 <__aeabi_i2d>:
 23fb504:	f090 0f00 	teq	r0, #0
 23fb508:	bf04      	itt	eq
 23fb50a:	2100      	moveq	r1, #0
 23fb50c:	4770      	bxeq	lr
 23fb50e:	b530      	push	{r4, r5, lr}
 23fb510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fb514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fb518:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 23fb51c:	bf48      	it	mi
 23fb51e:	4240      	negmi	r0, r0
 23fb520:	f04f 0100 	mov.w	r1, #0
 23fb524:	e73e      	b.n	23fb3a4 <__adddf3+0x138>
 23fb526:	bf00      	nop

023fb528 <__aeabi_f2d>:
 23fb528:	0042      	lsls	r2, r0, #1
 23fb52a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 23fb52e:	ea4f 0131 	mov.w	r1, r1, rrx
 23fb532:	ea4f 7002 	mov.w	r0, r2, lsl #28
 23fb536:	bf1f      	itttt	ne
 23fb538:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 23fb53c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 23fb540:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 23fb544:	4770      	bxne	lr
 23fb546:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 23fb54a:	bf08      	it	eq
 23fb54c:	4770      	bxeq	lr
 23fb54e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 23fb552:	bf04      	itt	eq
 23fb554:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 23fb558:	4770      	bxeq	lr
 23fb55a:	b530      	push	{r4, r5, lr}
 23fb55c:	f44f 7460 	mov.w	r4, #896	; 0x380
 23fb560:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fb564:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23fb568:	e71c      	b.n	23fb3a4 <__adddf3+0x138>
 23fb56a:	bf00      	nop

023fb56c <__aeabi_ul2d>:
 23fb56c:	ea50 0201 	orrs.w	r2, r0, r1
 23fb570:	bf08      	it	eq
 23fb572:	4770      	bxeq	lr
 23fb574:	b530      	push	{r4, r5, lr}
 23fb576:	f04f 0500 	mov.w	r5, #0
 23fb57a:	e00a      	b.n	23fb592 <__aeabi_l2d+0x16>

023fb57c <__aeabi_l2d>:
 23fb57c:	ea50 0201 	orrs.w	r2, r0, r1
 23fb580:	bf08      	it	eq
 23fb582:	4770      	bxeq	lr
 23fb584:	b530      	push	{r4, r5, lr}
 23fb586:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 23fb58a:	d502      	bpl.n	23fb592 <__aeabi_l2d+0x16>
 23fb58c:	4240      	negs	r0, r0
 23fb58e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23fb592:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fb596:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fb59a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 23fb59e:	f43f aed8 	beq.w	23fb352 <__adddf3+0xe6>
 23fb5a2:	f04f 0203 	mov.w	r2, #3
 23fb5a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23fb5aa:	bf18      	it	ne
 23fb5ac:	3203      	addne	r2, #3
 23fb5ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23fb5b2:	bf18      	it	ne
 23fb5b4:	3203      	addne	r2, #3
 23fb5b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 23fb5ba:	f1c2 0320 	rsb	r3, r2, #32
 23fb5be:	fa00 fc03 	lsl.w	ip, r0, r3
 23fb5c2:	fa20 f002 	lsr.w	r0, r0, r2
 23fb5c6:	fa01 fe03 	lsl.w	lr, r1, r3
 23fb5ca:	ea40 000e 	orr.w	r0, r0, lr
 23fb5ce:	fa21 f102 	lsr.w	r1, r1, r2
 23fb5d2:	4414      	add	r4, r2
 23fb5d4:	e6bd      	b.n	23fb352 <__adddf3+0xe6>
 23fb5d6:	bf00      	nop

023fb5d8 <strcmp>:
 23fb5d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 23fb5dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 23fb5e0:	2a01      	cmp	r2, #1
 23fb5e2:	bf28      	it	cs
 23fb5e4:	429a      	cmpcs	r2, r3
 23fb5e6:	d0f7      	beq.n	23fb5d8 <strcmp>
 23fb5e8:	1ad0      	subs	r0, r2, r3
 23fb5ea:	4770      	bx	lr

023fb5ec <strlen>:
 23fb5ec:	4603      	mov	r3, r0
 23fb5ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fb5f2:	2a00      	cmp	r2, #0
 23fb5f4:	d1fb      	bne.n	23fb5ee <strlen+0x2>
 23fb5f6:	1a18      	subs	r0, r3, r0
 23fb5f8:	3801      	subs	r0, #1
 23fb5fa:	4770      	bx	lr

023fb5fc <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23fb5fc:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23fb5fe:	f002 fd2d 	bl	23fe05c <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fb602:	2500      	movs	r5, #0
 23fb604:	4e05      	ldr	r6, [pc, #20]	; (23fb61c <module_user_init+0x20>)
 23fb606:	4c06      	ldr	r4, [pc, #24]	; (23fb620 <module_user_init+0x24>)
 23fb608:	1ba4      	subs	r4, r4, r6
 23fb60a:	08a4      	lsrs	r4, r4, #2
 23fb60c:	42ac      	cmp	r4, r5
 23fb60e:	d100      	bne.n	23fb612 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23fb610:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23fb612:	f856 3b04 	ldr.w	r3, [r6], #4
 23fb616:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fb618:	3501      	adds	r5, #1
 23fb61a:	e7f7      	b.n	23fb60c <module_user_init+0x10>
 23fb61c:	023fffcc 	.word	0x023fffcc
 23fb620:	023ffff8 	.word	0x023ffff8

023fb624 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23fb624:	f000 bbc8 	b.w	23fbdb8 <setup>

023fb628 <module_user_loop>:
}

void module_user_loop() {
 23fb628:	b508      	push	{r3, lr}
    loop();
 23fb62a:	f000 facb 	bl	23fbbc4 <loop>
    _post_loop();
}
 23fb62e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23fb632:	f002 bccb 	b.w	23fdfcc <_post_loop>

023fb636 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23fb636:	f001 ba31 	b.w	23fca9c <malloc>

023fb63a <_Znaj>:
 23fb63a:	f001 ba2f 	b.w	23fca9c <malloc>

023fb63e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23fb63e:	f001 ba3b 	b.w	23fcab8 <free>
	...

023fb644 <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fb644:	4674      	mov	r4, lr
void __cxa_pure_virtual() {
 23fb646:	b500      	push	{lr}
 23fb648:	b08d      	sub	sp, #52	; 0x34
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fb64a:	222c      	movs	r2, #44	; 0x2c
 23fb64c:	2100      	movs	r1, #0
 23fb64e:	a801      	add	r0, sp, #4
 23fb650:	f003 ffc7 	bl	23ff5e2 <memset>
 23fb654:	4b05      	ldr	r3, [pc, #20]	; (23fb66c <__cxa_pure_virtual+0x28>)
 23fb656:	9404      	str	r4, [sp, #16]
 23fb658:	9301      	str	r3, [sp, #4]
 23fb65a:	4b05      	ldr	r3, [pc, #20]	; (23fb670 <__cxa_pure_virtual+0x2c>)
 23fb65c:	9302      	str	r3, [sp, #8]
}

__attribute__((always_inline)) static inline uint32_t __get_PC(void) { 
    uint32_t result; 

    asm volatile ("mov %0, pc\n" : "=r" (result) ); 
 23fb65e:	467b      	mov	r3, pc
 23fb660:	2100      	movs	r1, #0
 23fb662:	a801      	add	r0, sp, #4
 23fb664:	9303      	str	r3, [sp, #12]
 23fb666:	f001 f8d7 	bl	23fc818 <panic_ext>
  while (1);
 23fb66a:	e7fe      	b.n	23fb66a <__cxa_pure_virtual+0x26>
 23fb66c:	000c002c 	.word	0x000c002c
 23fb670:	023ff808 	.word	0x023ff808

023fb674 <__register_exitproc>:
int __cxa_atexit(void (*f)(void *), void *p, void *d) {
    return 0;
}

void __register_exitproc(int type, void (*fn)(void), void* arg, void* d) {
}
 23fb674:	4770      	bx	lr

023fb676 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>:
    va_start(args, fmt);
    log(level, fmt, args);
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
 23fb676:	b510      	push	{r4, lr}
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 23fb678:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
 23fb67c:	4604      	mov	r4, r0
 23fb67e:	4608      	mov	r0, r1
    attr.flags = 0;
 23fb680:	2100      	movs	r1, #0
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
 23fb682:	b08a      	sub	sp, #40	; 0x28
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23fb684:	e9cd 2300 	strd	r2, r3, [sp]
    attr.flags = 0;
 23fb688:	e9cd c102 	strd	ip, r1, [sp, #8]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23fb68c:	460b      	mov	r3, r1
 23fb68e:	aa02      	add	r2, sp, #8
 23fb690:	6821      	ldr	r1, [r4, #0]
 23fb692:	f001 f897 	bl	23fc7c4 <log_message_v>
}
 23fb696:	b00a      	add	sp, #40	; 0x28
 23fb698:	bd10      	pop	{r4, pc}

023fb69a <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
 23fb69a:	b40e      	push	{r1, r2, r3}
 23fb69c:	b503      	push	{r0, r1, lr}
 23fb69e:	ab03      	add	r3, sp, #12
 23fb6a0:	f853 2b04 	ldr.w	r2, [r3], #4
    log(LOG_LEVEL_ERROR, fmt, args);
 23fb6a4:	2132      	movs	r1, #50	; 0x32
    va_start(args, fmt);
 23fb6a6:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_ERROR, fmt, args);
 23fb6a8:	f7ff ffe5 	bl	23fb676 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
 23fb6ac:	b002      	add	sp, #8
 23fb6ae:	f85d eb04 	ldr.w	lr, [sp], #4
 23fb6b2:	b003      	add	sp, #12
 23fb6b4:	4770      	bx	lr

023fb6b6 <_ZNK5spark6Logger4infoEPKcz>:
inline void spark::Logger::info(const char *fmt, ...) const {
 23fb6b6:	b40e      	push	{r1, r2, r3}
 23fb6b8:	b503      	push	{r0, r1, lr}
 23fb6ba:	ab03      	add	r3, sp, #12
 23fb6bc:	f853 2b04 	ldr.w	r2, [r3], #4
    log(LOG_LEVEL_INFO, fmt, args);
 23fb6c0:	211e      	movs	r1, #30
    va_start(args, fmt);
 23fb6c2:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_INFO, fmt, args);
 23fb6c4:	f7ff ffd7 	bl	23fb676 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
 23fb6c8:	b002      	add	sp, #8
 23fb6ca:	f85d eb04 	ldr.w	lr, [sp], #4
 23fb6ce:	b003      	add	sp, #12
 23fb6d0:	4770      	bx	lr

023fb6d2 <_ZNK5spark6Logger4warnEPKcz>:
inline void spark::Logger::warn(const char *fmt, ...) const {
 23fb6d2:	b40e      	push	{r1, r2, r3}
 23fb6d4:	b503      	push	{r0, r1, lr}
 23fb6d6:	ab03      	add	r3, sp, #12
 23fb6d8:	f853 2b04 	ldr.w	r2, [r3], #4
    log(LOG_LEVEL_WARN, fmt, args);
 23fb6dc:	2128      	movs	r1, #40	; 0x28
    va_start(args, fmt);
 23fb6de:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_WARN, fmt, args);
 23fb6e0:	f7ff ffc9 	bl	23fb676 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
 23fb6e4:	b002      	add	sp, #8
 23fb6e6:	f85d eb04 	ldr.w	lr, [sp], #4
 23fb6ea:	b003      	add	sp, #12
 23fb6ec:	4770      	bx	lr

023fb6ee <_ZN7ADXL343C1ER7TwoWireh>:
#include "adxl343.h"

ADXL343::ADXL343(TwoWire &wirePort, uint8_t address) : wire(wirePort), i2cAddress(address) {
 23fb6ee:	6001      	str	r1, [r0, #0]
 23fb6f0:	7102      	strb	r2, [r0, #4]
}
 23fb6f2:	4770      	bx	lr

023fb6f4 <_ZN7ADXL34316readAccelerationEPsS0_S0_>:

    Log.info("ADXL343 initialization complete.");
    return true;
}

void ADXL343::readAcceleration(int16_t *x, int16_t *y, int16_t *z) {
 23fb6f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fb6f8:	4604      	mov	r4, r0
 23fb6fa:	468a      	mov	sl, r1
    wire.beginTransmission(i2cAddress);
 23fb6fc:	7901      	ldrb	r1, [r0, #4]
 23fb6fe:	6800      	ldr	r0, [r0, #0]
void ADXL343::readAcceleration(int16_t *x, int16_t *y, int16_t *z) {
 23fb700:	4691      	mov	r9, r2
 23fb702:	4698      	mov	r8, r3
    wire.beginTransmission(i2cAddress);
 23fb704:	f003 f8b8 	bl	23fe878 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(REG_DATAX0);
 23fb708:	6820      	ldr	r0, [r4, #0]
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 23fb70a:	2132      	movs	r1, #50	; 0x32
 23fb70c:	6803      	ldr	r3, [r0, #0]
 23fb70e:	689b      	ldr	r3, [r3, #8]
 23fb710:	4798      	blx	r3
    wire.endTransmission(false);
 23fb712:	2100      	movs	r1, #0
 23fb714:	6820      	ldr	r0, [r4, #0]
 23fb716:	f003 f8b3 	bl	23fe880 <_ZN7TwoWire15endTransmissionEh>
    wire.requestFrom(i2cAddress, (uint8_t)6);
 23fb71a:	2206      	movs	r2, #6
 23fb71c:	7921      	ldrb	r1, [r4, #4]
 23fb71e:	6820      	ldr	r0, [r4, #0]
 23fb720:	f003 f8a7 	bl	23fe872 <_ZN7TwoWire11requestFromEhj>

    if (wire.available() >= 6) {
 23fb724:	6820      	ldr	r0, [r4, #0]
 23fb726:	6803      	ldr	r3, [r0, #0]
 23fb728:	691b      	ldr	r3, [r3, #16]
 23fb72a:	4798      	blx	r3
 23fb72c:	2805      	cmp	r0, #5
 23fb72e:	dd2f      	ble.n	23fb790 <_ZN7ADXL34316readAccelerationEPsS0_S0_+0x9c>
        uint8_t x0 = wire.read();
 23fb730:	6820      	ldr	r0, [r4, #0]
 23fb732:	6803      	ldr	r3, [r0, #0]
 23fb734:	695b      	ldr	r3, [r3, #20]
 23fb736:	4798      	blx	r3
 23fb738:	9001      	str	r0, [sp, #4]
        uint8_t x1 = wire.read();
 23fb73a:	6820      	ldr	r0, [r4, #0]
 23fb73c:	6803      	ldr	r3, [r0, #0]
 23fb73e:	695b      	ldr	r3, [r3, #20]
 23fb740:	4798      	blx	r3
 23fb742:	4607      	mov	r7, r0
        uint8_t y0 = wire.read();
 23fb744:	6820      	ldr	r0, [r4, #0]
 23fb746:	6803      	ldr	r3, [r0, #0]
 23fb748:	695b      	ldr	r3, [r3, #20]
 23fb74a:	4798      	blx	r3
 23fb74c:	4606      	mov	r6, r0
        uint8_t y1 = wire.read();
 23fb74e:	6820      	ldr	r0, [r4, #0]
 23fb750:	6803      	ldr	r3, [r0, #0]
 23fb752:	695b      	ldr	r3, [r3, #20]
 23fb754:	4798      	blx	r3
 23fb756:	4683      	mov	fp, r0
        uint8_t z0 = wire.read();
 23fb758:	6820      	ldr	r0, [r4, #0]
 23fb75a:	6803      	ldr	r3, [r0, #0]
 23fb75c:	695b      	ldr	r3, [r3, #20]
 23fb75e:	4798      	blx	r3
 23fb760:	4605      	mov	r5, r0
        uint8_t z1 = wire.read();
 23fb762:	6820      	ldr	r0, [r4, #0]

        // Combine MSB and LSB
        *x = (int16_t)((x1 << 8) | x0);
        *y = (int16_t)((y1 << 8) | y0);
        *z = (int16_t)((z1 << 8) | z0);
 23fb764:	b2ed      	uxtb	r5, r5
        uint8_t z1 = wire.read();
 23fb766:	6803      	ldr	r3, [r0, #0]
 23fb768:	695b      	ldr	r3, [r3, #20]
 23fb76a:	4798      	blx	r3
        *x = (int16_t)((x1 << 8) | x0);
 23fb76c:	9a01      	ldr	r2, [sp, #4]
        *z = (int16_t)((z1 << 8) | z0);
 23fb76e:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
        *x = (int16_t)((x1 << 8) | x0);
 23fb772:	b2d3      	uxtb	r3, r2
 23fb774:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
        *y = (int16_t)((y1 << 8) | y0);
 23fb778:	b2f3      	uxtb	r3, r6
 23fb77a:	ea43 260b 	orr.w	r6, r3, fp, lsl #8
        *x = (int16_t)((x1 << 8) | x0);
 23fb77e:	f8aa 7000 	strh.w	r7, [sl]
        *y = (int16_t)((y1 << 8) | y0);
 23fb782:	f8a9 6000 	strh.w	r6, [r9]
        *z = (int16_t)((z1 << 8) | z0);
 23fb786:	f8a8 5000 	strh.w	r5, [r8]
    } else {
        Log.warn("Insufficient data available from ADXL343.");
    }
}
 23fb78a:	b003      	add	sp, #12
 23fb78c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Log.warn("Insufficient data available from ADXL343.");
 23fb790:	4902      	ldr	r1, [pc, #8]	; (23fb79c <_ZN7ADXL34316readAccelerationEPsS0_S0_+0xa8>)
 23fb792:	4803      	ldr	r0, [pc, #12]	; (23fb7a0 <_ZN7ADXL34316readAccelerationEPsS0_S0_+0xac>)
 23fb794:	f7ff ff9d 	bl	23fb6d2 <_ZNK5spark6Logger4warnEPKcz>
}
 23fb798:	e7f7      	b.n	23fb78a <_ZN7ADXL34316readAccelerationEPsS0_S0_+0x96>
 23fb79a:	bf00      	nop
 23fb79c:	023ff81d 	.word	0x023ff81d
 23fb7a0:	1007af08 	.word	0x1007af08

023fb7a4 <_ZN7ADXL34317readAccelerationGEPfS0_S0_>:

void ADXL343::readAccelerationG(float *x, float *y, float *z) {
 23fb7a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fb7a6:	460e      	mov	r6, r1
 23fb7a8:	4615      	mov	r5, r2
 23fb7aa:	461c      	mov	r4, r3
    int16_t xi, yi, zi;
    readAcceleration(&xi, &yi, &zi);
 23fb7ac:	aa01      	add	r2, sp, #4
 23fb7ae:	f10d 0306 	add.w	r3, sp, #6
 23fb7b2:	f10d 0102 	add.w	r1, sp, #2
 23fb7b6:	f7ff ff9d 	bl	23fb6f4 <_ZN7ADXL34316readAccelerationEPsS0_S0_>
    // Assuming default settings: full resolution mode with +/-2g range
    // Sensitivity is 256 LSB/g in full resolution mode at +/-2g
    // So scale factor is 1/256 = 0.00390625 g/LSB

    float scaleFactor = 0.00390625f;
    *x = xi * scaleFactor;
 23fb7ba:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 23fb7be:	eddf 6a10 	vldr	s13, [pc, #64]	; 23fb800 <_ZN7ADXL34317readAccelerationGEPfS0_S0_+0x5c>
 23fb7c2:	ee07 3a10 	vmov	s14, r3
 23fb7c6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 23fb7ca:	ee27 7a26 	vmul.f32	s14, s14, s13
    *y = yi * scaleFactor;
 23fb7ce:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
    *x = xi * scaleFactor;
 23fb7d2:	ed86 7a00 	vstr	s14, [r6]
    *y = yi * scaleFactor;
 23fb7d6:	ee07 3a10 	vmov	s14, r3
    *z = zi * scaleFactor;
 23fb7da:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
    *y = yi * scaleFactor;
 23fb7de:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    *z = zi * scaleFactor;
 23fb7e2:	ee07 3a90 	vmov	s15, r3
 23fb7e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    *y = yi * scaleFactor;
 23fb7ea:	ee27 7a26 	vmul.f32	s14, s14, s13
    *z = zi * scaleFactor;
 23fb7ee:	ee67 7aa6 	vmul.f32	s15, s15, s13
    *y = yi * scaleFactor;
 23fb7f2:	ed85 7a00 	vstr	s14, [r5]
    *z = zi * scaleFactor;
 23fb7f6:	edc4 7a00 	vstr	s15, [r4]
}
 23fb7fa:	b002      	add	sp, #8
 23fb7fc:	bd70      	pop	{r4, r5, r6, pc}
 23fb7fe:	bf00      	nop
 23fb800:	3b800000 	.word	0x3b800000

023fb804 <_ZN7ADXL34313readRegister8Eh>:

uint8_t ADXL343::readRegister8(uint8_t reg) {
 23fb804:	b538      	push	{r3, r4, r5, lr}
 23fb806:	4604      	mov	r4, r0
 23fb808:	460d      	mov	r5, r1
    wire.beginTransmission(i2cAddress);
 23fb80a:	7901      	ldrb	r1, [r0, #4]
 23fb80c:	6800      	ldr	r0, [r0, #0]
 23fb80e:	f003 f833 	bl	23fe878 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(reg);
 23fb812:	6820      	ldr	r0, [r4, #0]
 23fb814:	4629      	mov	r1, r5
 23fb816:	6803      	ldr	r3, [r0, #0]
 23fb818:	689b      	ldr	r3, [r3, #8]
 23fb81a:	4798      	blx	r3
    wire.endTransmission(false); // Restart for read
 23fb81c:	2100      	movs	r1, #0
 23fb81e:	6820      	ldr	r0, [r4, #0]
 23fb820:	f003 f82e 	bl	23fe880 <_ZN7TwoWire15endTransmissionEh>
    wire.requestFrom(i2cAddress, (uint8_t)1);
 23fb824:	2201      	movs	r2, #1
 23fb826:	7921      	ldrb	r1, [r4, #4]
 23fb828:	6820      	ldr	r0, [r4, #0]
 23fb82a:	f003 f822 	bl	23fe872 <_ZN7TwoWire11requestFromEhj>
    if (wire.available()) {
 23fb82e:	6820      	ldr	r0, [r4, #0]
 23fb830:	6803      	ldr	r3, [r0, #0]
 23fb832:	691b      	ldr	r3, [r3, #16]
 23fb834:	4798      	blx	r3
 23fb836:	b120      	cbz	r0, 23fb842 <_ZN7ADXL34313readRegister8Eh+0x3e>
        return wire.read();
 23fb838:	6820      	ldr	r0, [r4, #0]
 23fb83a:	6803      	ldr	r3, [r0, #0]
 23fb83c:	695b      	ldr	r3, [r3, #20]
 23fb83e:	4798      	blx	r3
 23fb840:	b2c0      	uxtb	r0, r0
    }
    return 0;
}
 23fb842:	bd38      	pop	{r3, r4, r5, pc}

023fb844 <_ZN7ADXL34314writeRegister8Ehh>:

void ADXL343::writeRegister8(uint8_t reg, uint8_t value) {
 23fb844:	b570      	push	{r4, r5, r6, lr}
 23fb846:	4604      	mov	r4, r0
 23fb848:	460e      	mov	r6, r1
 23fb84a:	4615      	mov	r5, r2
    wire.beginTransmission(i2cAddress);
 23fb84c:	7901      	ldrb	r1, [r0, #4]
 23fb84e:	6800      	ldr	r0, [r0, #0]
 23fb850:	f003 f812 	bl	23fe878 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(reg);
 23fb854:	6820      	ldr	r0, [r4, #0]
 23fb856:	4631      	mov	r1, r6
 23fb858:	6803      	ldr	r3, [r0, #0]
 23fb85a:	689b      	ldr	r3, [r3, #8]
 23fb85c:	4798      	blx	r3
    wire.write(value);
 23fb85e:	6820      	ldr	r0, [r4, #0]
 23fb860:	4629      	mov	r1, r5
 23fb862:	6803      	ldr	r3, [r0, #0]
 23fb864:	689b      	ldr	r3, [r3, #8]
 23fb866:	4798      	blx	r3
    wire.endTransmission();
 23fb868:	6820      	ldr	r0, [r4, #0]
}
 23fb86a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    wire.endTransmission();
 23fb86e:	f003 b80b 	b.w	23fe888 <_ZN7TwoWire15endTransmissionEv>
	...

023fb874 <_ZN7ADXL3435beginEv>:
bool ADXL343::begin() {
 23fb874:	b510      	push	{r4, lr}
 23fb876:	4604      	mov	r4, r0
    wire.begin();
 23fb878:	6800      	ldr	r0, [r0, #0]
 23fb87a:	f002 ffd3 	bl	23fe824 <_ZN7TwoWire5beginEv>
    uint8_t deviceId = readRegister8(REG_DEVID);
 23fb87e:	2100      	movs	r1, #0
 23fb880:	4620      	mov	r0, r4
 23fb882:	f7ff ffbf 	bl	23fb804 <_ZN7ADXL34313readRegister8Eh>
    if (deviceId != 0xE5) {
 23fb886:	28e5      	cmp	r0, #229	; 0xe5
    uint8_t deviceId = readRegister8(REG_DEVID);
 23fb888:	4602      	mov	r2, r0
    if (deviceId != 0xE5) {
 23fb88a:	d005      	beq.n	23fb898 <_ZN7ADXL3435beginEv+0x24>
        Log.error("ADXL343 not found. Device ID: 0x%02X", deviceId);
 23fb88c:	480c      	ldr	r0, [pc, #48]	; (23fb8c0 <_ZN7ADXL3435beginEv+0x4c>)
 23fb88e:	490d      	ldr	r1, [pc, #52]	; (23fb8c4 <_ZN7ADXL3435beginEv+0x50>)
 23fb890:	f7ff ff03 	bl	23fb69a <_ZNK5spark6Logger5errorEPKcz>
        return false;
 23fb894:	2000      	movs	r0, #0
}
 23fb896:	bd10      	pop	{r4, pc}
        Log.info("ADXL343 detected. Device ID: 0x%02X", deviceId);
 23fb898:	490b      	ldr	r1, [pc, #44]	; (23fb8c8 <_ZN7ADXL3435beginEv+0x54>)
 23fb89a:	4809      	ldr	r0, [pc, #36]	; (23fb8c0 <_ZN7ADXL3435beginEv+0x4c>)
 23fb89c:	f7ff ff0b 	bl	23fb6b6 <_ZNK5spark6Logger4infoEPKcz>
    writeRegister8(REG_DATA_FORMAT, 0x08);
 23fb8a0:	2208      	movs	r2, #8
 23fb8a2:	2131      	movs	r1, #49	; 0x31
 23fb8a4:	4620      	mov	r0, r4
 23fb8a6:	f7ff ffcd 	bl	23fb844 <_ZN7ADXL34314writeRegister8Ehh>
    writeRegister8(REG_POWER_CTL, 0x08);
 23fb8aa:	2208      	movs	r2, #8
 23fb8ac:	212d      	movs	r1, #45	; 0x2d
 23fb8ae:	4620      	mov	r0, r4
 23fb8b0:	f7ff ffc8 	bl	23fb844 <_ZN7ADXL34314writeRegister8Ehh>
    Log.info("ADXL343 initialization complete.");
 23fb8b4:	4802      	ldr	r0, [pc, #8]	; (23fb8c0 <_ZN7ADXL3435beginEv+0x4c>)
 23fb8b6:	4905      	ldr	r1, [pc, #20]	; (23fb8cc <_ZN7ADXL3435beginEv+0x58>)
 23fb8b8:	f7ff fefd 	bl	23fb6b6 <_ZNK5spark6Logger4infoEPKcz>
 23fb8bc:	2001      	movs	r0, #1
 23fb8be:	e7ea      	b.n	23fb896 <_ZN7ADXL3435beginEv+0x22>
 23fb8c0:	1007af08 	.word	0x1007af08
 23fb8c4:	023ff847 	.word	0x023ff847
 23fb8c8:	023ff86c 	.word	0x023ff86c
 23fb8cc:	023ff890 	.word	0x023ff890

023fb8d0 <_ZN5spark10LogHandler5writeEPKcj>:
}
 23fb8d0:	4770      	bx	lr

023fb8d2 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
 23fb8d2:	6943      	ldr	r3, [r0, #20]
 23fb8d4:	b113      	cbz	r3, 23fb8dc <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fb8d6:	6983      	ldr	r3, [r0, #24]
 23fb8d8:	300c      	adds	r0, #12
 23fb8da:	4718      	bx	r3
            callback();
        }
    }
 23fb8dc:	4770      	bx	lr

023fb8de <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_>:
        system_set_flag(flag, value, nullptr);
    }

    static SleepResult sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags);

    static void subscribedEventHandler(system_event_t events, int data, void* pointer, void* context) {
 23fb8de:	b530      	push	{r4, r5, lr}
 23fb8e0:	b085      	sub	sp, #20
 23fb8e2:	4604      	mov	r4, r0
 23fb8e4:	9808      	ldr	r0, [sp, #32]
        if (!context) {
 23fb8e6:	b160      	cbz	r0, 23fb902 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        auto pContext = static_cast<const SystemEventContext*>(context);
        if (!pContext->callable) {
 23fb8e8:	6840      	ldr	r0, [r0, #4]
 23fb8ea:	b150      	cbz	r0, 23fb902 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        std::function<void(system_event_t, int, void*)>* handler = reinterpret_cast< std::function<void(system_event_t, int, void*)>* >(pContext->callable);
        if (!(*handler)) {
 23fb8ec:	6885      	ldr	r5, [r0, #8]
 23fb8ee:	b145      	cbz	r5, 23fb902 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        (*handler)(events, data, pointer);
 23fb8f0:	e9cd 4102 	strd	r4, r1, [sp, #8]
 23fb8f4:	e9cd 2300 	strd	r2, r3, [sp]
 23fb8f8:	68c4      	ldr	r4, [r0, #12]
 23fb8fa:	466a      	mov	r2, sp
 23fb8fc:	ab01      	add	r3, sp, #4
 23fb8fe:	a902      	add	r1, sp, #8
 23fb900:	47a0      	blx	r4
    }
 23fb902:	b005      	add	sp, #20
 23fb904:	bd30      	pop	{r4, r5, pc}

023fb906 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
 23fb906:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
 23fb908:	2100      	movs	r1, #0
 23fb90a:	4604      	mov	r4, r0
 23fb90c:	4608      	mov	r0, r1
 23fb90e:	f000 fc8f 	bl	23fc230 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
 23fb912:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
 23fb914:	4620      	mov	r0, r4
 23fb916:	a901      	add	r1, sp, #4
            void* id = nullptr;
 23fb918:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
 23fb91a:	f000 fcb3 	bl	23fc284 <os_timer_get_id>
            t = static_cast<Timer*>(id);
 23fb91e:	9c01      	ldr	r4, [sp, #4]
            if (t) {
 23fb920:	b10c      	cbz	r4, 23fb926 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
 23fb922:	2301      	movs	r3, #1
 23fb924:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
 23fb926:	2100      	movs	r1, #0
 23fb928:	2001      	movs	r0, #1
 23fb92a:	f000 fc81 	bl	23fc230 <os_thread_scheduling>
            }
        }
        if (t) {
 23fb92e:	b12c      	cbz	r4, 23fb93c <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
 23fb930:	6823      	ldr	r3, [r4, #0]
 23fb932:	4620      	mov	r0, r4
 23fb934:	689b      	ldr	r3, [r3, #8]
 23fb936:	4798      	blx	r3
            t->running = false;
 23fb938:	2300      	movs	r3, #0
 23fb93a:	7123      	strb	r3, [r4, #4]
        }
    }
 23fb93c:	b002      	add	sp, #8
 23fb93e:	bd10      	pop	{r4, pc}

023fb940 <_Z19sampleAccelerometerv>:
    break;
  }
}

void sampleAccelerometer()
{
 23fb940:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (samplingIndex < BUFFER_SIZE)
 23fb942:	4c18      	ldr	r4, [pc, #96]	; (23fb9a4 <_Z19sampleAccelerometerv+0x64>)
 23fb944:	6823      	ldr	r3, [r4, #0]
 23fb946:	2b18      	cmp	r3, #24
 23fb948:	dc29      	bgt.n	23fb99e <_Z19sampleAccelerometerv+0x5e>
  {
    // Sample accelerometer
    float x, y, z;
    accelerometer.readAccelerationG(&x, &y, &z);
 23fb94a:	ab03      	add	r3, sp, #12
 23fb94c:	aa02      	add	r2, sp, #8
 23fb94e:	a901      	add	r1, sp, #4
 23fb950:	4815      	ldr	r0, [pc, #84]	; (23fb9a8 <_Z19sampleAccelerometerv+0x68>)
 23fb952:	f7ff ff27 	bl	23fb7a4 <_ZN7ADXL34317readAccelerationGEPfS0_S0_>
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 23fb956:	f000 fc41 	bl	23fc1dc <HAL_Timer_Get_Micro_Seconds>

    samplingBuffer[samplingIndex].timestamp = micros();
 23fb95a:	4a14      	ldr	r2, [pc, #80]	; (23fb9ac <_Z19sampleAccelerometerv+0x6c>)
 23fb95c:	6823      	ldr	r3, [r4, #0]
 23fb95e:	6811      	ldr	r1, [r2, #0]
 23fb960:	011b      	lsls	r3, r3, #4
 23fb962:	50c8      	str	r0, [r1, r3]
    samplingBuffer[samplingIndex].x = x;
 23fb964:	6813      	ldr	r3, [r2, #0]
 23fb966:	6822      	ldr	r2, [r4, #0]
 23fb968:	9901      	ldr	r1, [sp, #4]
 23fb96a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 23fb96e:	6051      	str	r1, [r2, #4]
    samplingBuffer[samplingIndex].y = y;
 23fb970:	6822      	ldr	r2, [r4, #0]
 23fb972:	9902      	ldr	r1, [sp, #8]
 23fb974:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 23fb978:	6091      	str	r1, [r2, #8]
    samplingBuffer[samplingIndex].z = z;
 23fb97a:	6822      	ldr	r2, [r4, #0]
 23fb97c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 23fb980:	9a03      	ldr	r2, [sp, #12]
 23fb982:	60da      	str	r2, [r3, #12]

    samplingIndex++;
 23fb984:	6823      	ldr	r3, [r4, #0]
 23fb986:	3301      	adds	r3, #1
 23fb988:	6023      	str	r3, [r4, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23fb98a:	f000 fc35 	bl	23fc1f8 <HAL_Timer_Get_Milli_Seconds>
    lastSampleTime = millis();
 23fb98e:	4b08      	ldr	r3, [pc, #32]	; (23fb9b0 <_Z19sampleAccelerometerv+0x70>)
 23fb990:	6018      	str	r0, [r3, #0]

    // Mark buffer as ready if threshold is met
    if (samplingIndex >= TRANSMIT_THRESHOLD)
 23fb992:	6823      	ldr	r3, [r4, #0]
 23fb994:	2b13      	cmp	r3, #19
    {
      bufferReady = true;
 23fb996:	bfc2      	ittt	gt
 23fb998:	2201      	movgt	r2, #1
 23fb99a:	4b06      	ldrgt	r3, [pc, #24]	; (23fb9b4 <_Z19sampleAccelerometerv+0x74>)
 23fb99c:	701a      	strbgt	r2, [r3, #0]
    }
  }
}
 23fb99e:	b004      	add	sp, #16
 23fb9a0:	bd10      	pop	{r4, pc}
 23fb9a2:	bf00      	nop
 23fb9a4:	1007ae98 	.word	0x1007ae98
 23fb9a8:	1007ab24 	.word	0x1007ab24
 23fb9ac:	1007aa9c 	.word	0x1007aa9c
 23fb9b0:	1007ae6c 	.word	0x1007ae6c
 23fb9b4:	1007ae4c 	.word	0x1007ae4c

023fb9b8 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23fb9b8:	b530      	push	{r4, r5, lr}
 23fb9ba:	6813      	ldr	r3, [r2, #0]
	    return __source._M_access<_Functor*>();
 23fb9bc:	6800      	ldr	r0, [r0, #0]
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23fb9be:	b085      	sub	sp, #20
 23fb9c0:	9301      	str	r3, [sp, #4]
      if (_M_empty())
 23fb9c2:	6883      	ldr	r3, [r0, #8]
 23fb9c4:	e9d1 4500 	ldrd	r4, r5, [r1]
 23fb9c8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 23fb9cc:	b90b      	cbnz	r3, 23fb9d2 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_+0x1a>
	__throw_bad_function_call();
 23fb9ce:	f003 fcbd 	bl	23ff34c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fb9d2:	68c3      	ldr	r3, [r0, #12]
 23fb9d4:	aa01      	add	r2, sp, #4
 23fb9d6:	a902      	add	r1, sp, #8
 23fb9d8:	4798      	blx	r3
      }
 23fb9da:	b005      	add	sp, #20
 23fb9dc:	bd30      	pop	{r4, r5, pc}

023fb9de <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
 23fb9de:	2a01      	cmp	r2, #1
 23fb9e0:	d102      	bne.n	23fb9e8 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23fb9e2:	6001      	str	r1, [r0, #0]
      }
 23fb9e4:	2000      	movs	r0, #0
 23fb9e6:	4770      	bx	lr
	  switch (__op)
 23fb9e8:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 23fb9ea:	bf04      	itt	eq
 23fb9ec:	680b      	ldreq	r3, [r1, #0]
 23fb9ee:	6003      	streq	r3, [r0, #0]
	      break;
 23fb9f0:	e7f8      	b.n	23fb9e4 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

023fb9f2 <_ZNSt17_Function_handlerIFvyiEPS0_E9_M_invokeERKSt9_Any_dataOyOi>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 23fb9f2:	6803      	ldr	r3, [r0, #0]
 23fb9f4:	6812      	ldr	r2, [r2, #0]
 23fb9f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fb9fa:	4718      	bx	r3

023fb9fc <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
 23fb9fc:	2a01      	cmp	r2, #1
 23fb9fe:	d102      	bne.n	23fba06 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23fba00:	6001      	str	r1, [r0, #0]
      }
 23fba02:	2000      	movs	r0, #0
 23fba04:	4770      	bx	lr
	  switch (__op)
 23fba06:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 23fba08:	bf04      	itt	eq
 23fba0a:	680b      	ldreq	r3, [r1, #0]
 23fba0c:	6003      	streq	r3, [r0, #0]
	      break;
 23fba0e:	e7f8      	b.n	23fba02 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

023fba10 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
 23fba10:	6803      	ldr	r3, [r0, #0]
 23fba12:	4718      	bx	r3

023fba14 <_ZN5Timer4stopEj.isra.0>:
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
 23fba14:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
 23fba16:	6880      	ldr	r0, [r0, #8]
 23fba18:	b130      	cbz	r0, 23fba28 <_ZN5Timer4stopEj.isra.0+0x14>
 23fba1a:	2300      	movs	r3, #0
 23fba1c:	e9cd 1300 	strd	r1, r3, [sp]
 23fba20:	461a      	mov	r2, r3
 23fba22:	2102      	movs	r1, #2
 23fba24:	f000 fc3c 	bl	23fc2a0 <os_timer_change>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
 23fba28:	b003      	add	sp, #12
 23fba2a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fba30 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 23fba30:	b510      	push	{r4, lr}
 23fba32:	4604      	mov	r4, r0
 23fba34:	4b09      	ldr	r3, [pc, #36]	; (23fba5c <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 23fba36:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 23fba38:	f001 fc2e 	bl	23fd298 <_ZN5spark10LogManager8instanceEv>
 23fba3c:	4621      	mov	r1, r4
 23fba3e:	f001 fe77 	bl	23fd730 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 23fba42:	f002 fc39 	bl	23fe2b8 <_Z16_fetch_usbserialv>
 23fba46:	f002 fc2b 	bl	23fe2a0 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 23fba4a:	4620      	mov	r0, r4
 23fba4c:	4b04      	ldr	r3, [pc, #16]	; (23fba60 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 23fba4e:	f840 3b04 	str.w	r3, [r0], #4
 23fba52:	f001 fcf7 	bl	23fd444 <_ZN5spark6detail9LogFilterD1Ev>
    }
 23fba56:	4620      	mov	r0, r4
 23fba58:	bd10      	pop	{r4, pc}
 23fba5a:	bf00      	nop
 23fba5c:	023ffa10 	.word	0x023ffa10
 23fba60:	023ff9f8 	.word	0x023ff9f8

023fba64 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 23fba64:	b510      	push	{r4, lr}
 23fba66:	4604      	mov	r4, r0
    }
 23fba68:	f7ff ffe2 	bl	23fba30 <_ZN5spark16SerialLogHandlerD1Ev>
 23fba6c:	4620      	mov	r0, r4
 23fba6e:	2124      	movs	r1, #36	; 0x24
 23fba70:	f7ff fde5 	bl	23fb63e <_ZdlPvj>
 23fba74:	4620      	mov	r0, r4
 23fba76:	bd10      	pop	{r4, pc}

023fba78 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 23fba78:	b510      	push	{r4, lr}
      if (_M_manager)
 23fba7a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 23fba7c:	4604      	mov	r4, r0
      if (_M_manager)
 23fba7e:	b113      	cbz	r3, 23fba86 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23fba80:	2203      	movs	r2, #3
 23fba82:	4601      	mov	r1, r0
 23fba84:	4798      	blx	r3
    }
 23fba86:	4620      	mov	r0, r4
 23fba88:	bd10      	pop	{r4, pc}

023fba8a <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_>:
        context.destructor = [](void* callable) -> void {
 23fba8a:	b510      	push	{r4, lr}
            delete callableWrapper;
 23fba8c:	4604      	mov	r4, r0
 23fba8e:	b138      	cbz	r0, 23fbaa0 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_+0x16>
    class function<_Res(_ArgTypes...)>
 23fba90:	f7ff fff2 	bl	23fba78 <_ZNSt14_Function_baseD1Ev>
 23fba94:	4620      	mov	r0, r4
        };
 23fba96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            delete callableWrapper;
 23fba9a:	2110      	movs	r1, #16
 23fba9c:	f7ff bdcf 	b.w	23fb63e <_ZdlPvj>
        };
 23fbaa0:	bd10      	pop	{r4, pc}
	...

023fbaa4 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
 23fbaa4:	b538      	push	{r3, r4, r5, lr}
 23fbaa6:	4b0f      	ldr	r3, [pc, #60]	; (23fbae4 <_ZN5TimerD1Ev+0x40>)
 23fbaa8:	4604      	mov	r4, r0
 23fbaaa:	6003      	str	r3, [r0, #0]
        if (handle) {
 23fbaac:	6883      	ldr	r3, [r0, #8]
 23fbaae:	b19b      	cbz	r3, 23fbad8 <_ZN5TimerD1Ev+0x34>
            stop();
 23fbab0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 23fbab4:	f7ff ffae 	bl	23fba14 <_ZN5Timer4stopEj.isra.0>
            os_timer_set_id(handle, nullptr);
 23fbab8:	2100      	movs	r1, #0
 23fbaba:	68a0      	ldr	r0, [r4, #8]
 23fbabc:	f000 fc36 	bl	23fc32c <os_timer_set_id>
            while (running) {
 23fbac0:	7923      	ldrb	r3, [r4, #4]
 23fbac2:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 23fbac6:	b113      	cbz	r3, 23fbace <_ZN5TimerD1Ev+0x2a>
                os_thread_yield();
 23fbac8:	f000 fba4 	bl	23fc214 <os_thread_yield>
            while (running) {
 23fbacc:	e7f8      	b.n	23fbac0 <_ZN5TimerD1Ev+0x1c>
            os_timer_destroy(handle, nullptr);
 23fbace:	4629      	mov	r1, r5
 23fbad0:	68a0      	ldr	r0, [r4, #8]
 23fbad2:	f000 fbc9 	bl	23fc268 <os_timer_destroy>
            handle = nullptr;
 23fbad6:	60a5      	str	r5, [r4, #8]
 23fbad8:	f104 000c 	add.w	r0, r4, #12
 23fbadc:	f7ff ffcc 	bl	23fba78 <_ZNSt14_Function_baseD1Ev>
    }
 23fbae0:	4620      	mov	r0, r4
 23fbae2:	bd38      	pop	{r3, r4, r5, pc}
 23fbae4:	023ff9e4 	.word	0x023ff9e4

023fbae8 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
 23fbae8:	b510      	push	{r4, lr}
 23fbaea:	4604      	mov	r4, r0
    }
 23fbaec:	f7ff ffda 	bl	23fbaa4 <_ZN5TimerD1Ev>
 23fbaf0:	4620      	mov	r0, r4
 23fbaf2:	211c      	movs	r1, #28
 23fbaf4:	f7ff fda3 	bl	23fb63e <_ZdlPvj>
 23fbaf8:	4620      	mov	r0, r4
 23fbafa:	bd10      	pop	{r4, pc}

023fbafc <_Z13buttonHandleryi>:
  }
  //Log.info("Buffer transmission complete.");
}

void buttonHandler(system_event_t event, int data)
{
 23fbafc:	b510      	push	{r4, lr}
  switch (state)
 23fbafe:	4c0b      	ldr	r4, [pc, #44]	; (23fbb2c <_Z13buttonHandleryi+0x30>)
 23fbb00:	7822      	ldrb	r2, [r4, #0]
 23fbb02:	b112      	cbz	r2, 23fbb0a <_Z13buttonHandleryi+0xe>
 23fbb04:	2a02      	cmp	r2, #2
 23fbb06:	d00e      	beq.n	23fbb26 <_Z13buttonHandleryi+0x2a>

  case STATE_RUNNING:
    state = STATE_FINISH;
    break;
  }
}
 23fbb08:	bd10      	pop	{r4, pc}
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23fbb0a:	4b09      	ldr	r3, [pc, #36]	; (23fbb30 <_Z13buttonHandleryi+0x34>)
 23fbb0c:	4611      	mov	r1, r2
 23fbb0e:	6858      	ldr	r0, [r3, #4]
 23fbb10:	f000 ff0e 	bl	23fc930 <network_ready>
    if (WiFi.ready())
 23fbb14:	b110      	cbz	r0, 23fbb1c <_Z13buttonHandleryi+0x20>
      state = STATE_CONNECT;
 23fbb16:	2301      	movs	r3, #1
    state = STATE_FINISH;
 23fbb18:	7023      	strb	r3, [r4, #0]
}
 23fbb1a:	e7f5      	b.n	23fbb08 <_Z13buttonHandleryi+0xc>
      Log.warn("Wi-Fi not ready.");
 23fbb1c:	4905      	ldr	r1, [pc, #20]	; (23fbb34 <_Z13buttonHandleryi+0x38>)
 23fbb1e:	4806      	ldr	r0, [pc, #24]	; (23fbb38 <_Z13buttonHandleryi+0x3c>)
 23fbb20:	f7ff fdd7 	bl	23fb6d2 <_ZNK5spark6Logger4warnEPKcz>
}
 23fbb24:	e7f0      	b.n	23fbb08 <_Z13buttonHandleryi+0xc>
    state = STATE_FINISH;
 23fbb26:	2303      	movs	r3, #3
 23fbb28:	e7f6      	b.n	23fbb18 <_Z13buttonHandleryi+0x1c>
 23fbb2a:	bf00      	nop
 23fbb2c:	1007aed0 	.word	0x1007aed0
 23fbb30:	1007af7c 	.word	0x1007af7c
 23fbb34:	023ff8b1 	.word	0x023ff8b1
 23fbb38:	1007af08 	.word	0x1007af08

023fbb3c <_Z18transmitBufferDatai>:
{
 23fbb3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (samples == 0)
 23fbb40:	4605      	mov	r5, r0
{
 23fbb42:	b08b      	sub	sp, #44	; 0x2c
  if (samples == 0)
 23fbb44:	b930      	cbnz	r0, 23fbb54 <_Z18transmitBufferDatai+0x18>
    Log.warn("Transmit called with empty buffer. Skipping transmission.");
 23fbb46:	491a      	ldr	r1, [pc, #104]	; (23fbbb0 <_Z18transmitBufferDatai+0x74>)
 23fbb48:	481a      	ldr	r0, [pc, #104]	; (23fbbb4 <_Z18transmitBufferDatai+0x78>)
 23fbb4a:	f7ff fdc2 	bl	23fb6d2 <_ZNK5spark6Logger4warnEPKcz>
}
 23fbb4e:	b00b      	add	sp, #44	; 0x2c
 23fbb50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (int i = 0; i < samples; i++)
 23fbb54:	2400      	movs	r4, #0
        transmitBuffer[i].timestamp,
 23fbb56:	f8df b060 	ldr.w	fp, [pc, #96]	; 23fbbb8 <_Z18transmitBufferDatai+0x7c>
        transmitBuffer[i].z);
 23fbb5a:	f8df 9060 	ldr.w	r9, [pc, #96]	; 23fbbbc <_Z18transmitBufferDatai+0x80>
    client.write(((const uint8_t *)data.c_str()), data.length());
 23fbb5e:	f8df 8060 	ldr.w	r8, [pc, #96]	; 23fbbc0 <_Z18transmitBufferDatai+0x84>
  for (int i = 0; i < samples; i++)
 23fbb62:	42a5      	cmp	r5, r4
 23fbb64:	ddf3      	ble.n	23fbb4e <_Z18transmitBufferDatai+0x12>
        transmitBuffer[i].timestamp,
 23fbb66:	f8db 7000 	ldr.w	r7, [fp]
 23fbb6a:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 23fbb6e:	eb07 1604 	add.w	r6, r7, r4, lsl #4
        transmitBuffer[i].z);
 23fbb72:	68f0      	ldr	r0, [r6, #12]
 23fbb74:	f7ff fcd8 	bl	23fb528 <__aeabi_f2d>
 23fbb78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 23fbb7c:	68b0      	ldr	r0, [r6, #8]
 23fbb7e:	f7ff fcd3 	bl	23fb528 <__aeabi_f2d>
 23fbb82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 23fbb86:	6870      	ldr	r0, [r6, #4]
 23fbb88:	f7ff fcce 	bl	23fb528 <__aeabi_f2d>
 23fbb8c:	e9cd 0100 	strd	r0, r1, [sp]
 23fbb90:	f857 200a 	ldr.w	r2, [r7, sl]
 23fbb94:	4649      	mov	r1, r9
 23fbb96:	a806      	add	r0, sp, #24
 23fbb98:	f001 f944 	bl	23fce24 <_ZN6String6formatEPKcz>
    client.write(((const uint8_t *)data.c_str()), data.length());
 23fbb9c:	9a08      	ldr	r2, [sp, #32]
 23fbb9e:	9906      	ldr	r1, [sp, #24]
 23fbba0:	4640      	mov	r0, r8
 23fbba2:	f002 fe90 	bl	23fe8c6 <_ZN9TCPClient5writeEPKhj>
        transmitBuffer[i].z);
 23fbba6:	a806      	add	r0, sp, #24
 23fbba8:	f001 f89a 	bl	23fcce0 <_ZN6StringD1Ev>
  for (int i = 0; i < samples; i++)
 23fbbac:	3401      	adds	r4, #1
 23fbbae:	e7d8      	b.n	23fbb62 <_Z18transmitBufferDatai+0x26>
 23fbbb0:	023ff8c2 	.word	0x023ff8c2
 23fbbb4:	1007af08 	.word	0x1007af08
 23fbbb8:	1007aaa4 	.word	0x1007aaa4
 23fbbbc:	023ff8fc 	.word	0x023ff8fc
 23fbbc0:	1007ae50 	.word	0x1007ae50

023fbbc4 <loop>:
{
 23fbbc4:	b570      	push	{r4, r5, r6, lr}
  switch (state)
 23fbbc6:	4e40      	ldr	r6, [pc, #256]	; (23fbcc8 <loop+0x104>)
{
 23fbbc8:	b088      	sub	sp, #32
  switch (state)
 23fbbca:	7833      	ldrb	r3, [r6, #0]
 23fbbcc:	2b02      	cmp	r3, #2
 23fbbce:	d043      	beq.n	23fbc58 <loop+0x94>
 23fbbd0:	2b03      	cmp	r3, #3
 23fbbd2:	d05c      	beq.n	23fbc8e <loop+0xca>
 23fbbd4:	2b01      	cmp	r3, #1
 23fbbd6:	d13d      	bne.n	23fbc54 <loop+0x90>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 23fbbd8:	4b3c      	ldr	r3, [pc, #240]	; (23fbccc <loop+0x108>)
 23fbbda:	4d3d      	ldr	r5, [pc, #244]	; (23fbcd0 <loop+0x10c>)
 23fbbdc:	ac03      	add	r4, sp, #12
 23fbbde:	9302      	str	r3, [sp, #8]
 23fbbe0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fbbe2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fbbe4:	682b      	ldr	r3, [r5, #0]
    if (client.connect(serverAddr, serverPort))
 23fbbe6:	4a3b      	ldr	r2, [pc, #236]	; (23fbcd4 <loop+0x110>)
 23fbbe8:	7023      	strb	r3, [r4, #0]
 23fbbea:	8812      	ldrh	r2, [r2, #0]
 23fbbec:	2300      	movs	r3, #0
 23fbbee:	483a      	ldr	r0, [pc, #232]	; (23fbcd8 <loop+0x114>)
 23fbbf0:	a902      	add	r1, sp, #8
 23fbbf2:	f002 fff3 	bl	23febdc <_ZN9TCPClient7connectE9IPAddresstm>
 23fbbf6:	4604      	mov	r4, r0
 23fbbf8:	b338      	cbz	r0, 23fbc4a <loop+0x86>
      Log.info("Connected to server. Starting data collection...");
 23fbbfa:	4938      	ldr	r1, [pc, #224]	; (23fbcdc <loop+0x118>)
 23fbbfc:	4838      	ldr	r0, [pc, #224]	; (23fbce0 <loop+0x11c>)
 23fbbfe:	f7ff fd5a 	bl	23fb6b6 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("Sample rate: %d Hz", 1000 / SAMPLING_INTERVAL_MS);
 23fbc02:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 23fbc06:	4937      	ldr	r1, [pc, #220]	; (23fbce4 <loop+0x120>)
 23fbc08:	4835      	ldr	r0, [pc, #212]	; (23fbce0 <loop+0x11c>)
 23fbc0a:	f7ff fd54 	bl	23fb6b6 <_ZNK5spark6Logger4infoEPKcz>
 23fbc0e:	f000 faf3 	bl	23fc1f8 <HAL_Timer_Get_Milli_Seconds>
      samplingIndex = 0;
 23fbc12:	2400      	movs	r4, #0
      recordingStart = millis();
 23fbc14:	4b34      	ldr	r3, [pc, #208]	; (23fbce8 <loop+0x124>)
        stop(fromISR);
 23fbc16:	4d35      	ldr	r5, [pc, #212]	; (23fbcec <loop+0x128>)
 23fbc18:	6018      	str	r0, [r3, #0]
      samplingIndex = 0;
 23fbc1a:	4b35      	ldr	r3, [pc, #212]	; (23fbcf0 <loop+0x12c>)
 23fbc1c:	4628      	mov	r0, r5
 23fbc1e:	4621      	mov	r1, r4
 23fbc20:	601c      	str	r4, [r3, #0]
 23fbc22:	f7ff fef7 	bl	23fba14 <_ZN5Timer4stopEj.isra.0>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
 23fbc26:	68a8      	ldr	r0, [r5, #8]
 23fbc28:	b140      	cbz	r0, 23fbc3c <loop+0x78>
 23fbc2a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 23fbc2e:	4622      	mov	r2, r4
 23fbc30:	9300      	str	r3, [sp, #0]
 23fbc32:	4621      	mov	r1, r4
 23fbc34:	4623      	mov	r3, r4
 23fbc36:	9401      	str	r4, [sp, #4]
 23fbc38:	f000 fb32 	bl	23fc2a0 <os_timer_change>
      digitalWrite(LED_PIN, HIGH);
 23fbc3c:	2101      	movs	r1, #1
 23fbc3e:	2007      	movs	r0, #7
 23fbc40:	f003 fa67 	bl	23ff112 <digitalWrite>
      state = STATE_RUNNING;
 23fbc44:	2302      	movs	r3, #2
    state = STATE_WAITING;
 23fbc46:	7033      	strb	r3, [r6, #0]
}
 23fbc48:	e004      	b.n	23fbc54 <loop+0x90>
      Log.error("Failed to connect to server.");
 23fbc4a:	492a      	ldr	r1, [pc, #168]	; (23fbcf4 <loop+0x130>)
 23fbc4c:	4824      	ldr	r0, [pc, #144]	; (23fbce0 <loop+0x11c>)
 23fbc4e:	f7ff fd24 	bl	23fb69a <_ZNK5spark6Logger5errorEPKcz>
      state = STATE_WAITING;
 23fbc52:	7034      	strb	r4, [r6, #0]
}
 23fbc54:	b008      	add	sp, #32
 23fbc56:	bd70      	pop	{r4, r5, r6, pc}
    if (bufferReady)
 23fbc58:	4b27      	ldr	r3, [pc, #156]	; (23fbcf8 <loop+0x134>)
 23fbc5a:	781a      	ldrb	r2, [r3, #0]
 23fbc5c:	b162      	cbz	r2, 23fbc78 <loop+0xb4>
      Sample *temp = samplingBuffer;
 23fbc5e:	4927      	ldr	r1, [pc, #156]	; (23fbcfc <loop+0x138>)
      samplingBuffer = transmitBuffer;
 23fbc60:	4a27      	ldr	r2, [pc, #156]	; (23fbd00 <loop+0x13c>)
      Sample *temp = samplingBuffer;
 23fbc62:	6808      	ldr	r0, [r1, #0]
      samplingBuffer = transmitBuffer;
 23fbc64:	6814      	ldr	r4, [r2, #0]
      transmitBuffer = temp;
 23fbc66:	6010      	str	r0, [r2, #0]
      samplingIndex = 0;                     // Reset sampling index
 23fbc68:	2200      	movs	r2, #0
      samplingBuffer = transmitBuffer;
 23fbc6a:	600c      	str	r4, [r1, #0]
      int samplesToTransmit = samplingIndex; // Snapshot of current index
 23fbc6c:	4920      	ldr	r1, [pc, #128]	; (23fbcf0 <loop+0x12c>)
 23fbc6e:	6808      	ldr	r0, [r1, #0]
      samplingIndex = 0;                     // Reset sampling index
 23fbc70:	600a      	str	r2, [r1, #0]
      bufferReady = false;
 23fbc72:	701a      	strb	r2, [r3, #0]
      transmitBufferData(samplesToTransmit);
 23fbc74:	f7ff ff62 	bl	23fbb3c <_Z18transmitBufferDatai>
 23fbc78:	f000 fabe 	bl	23fc1f8 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - recordingStart >= MAX_RECORDING_LENGTH_MS)
 23fbc7c:	4b1a      	ldr	r3, [pc, #104]	; (23fbce8 <loop+0x124>)
 23fbc7e:	681b      	ldr	r3, [r3, #0]
 23fbc80:	1ac0      	subs	r0, r0, r3
 23fbc82:	f247 532f 	movw	r3, #29999	; 0x752f
 23fbc86:	4298      	cmp	r0, r3
 23fbc88:	d9e4      	bls.n	23fbc54 <loop+0x90>
      state = STATE_FINISH;
 23fbc8a:	2303      	movs	r3, #3
 23fbc8c:	e7db      	b.n	23fbc46 <loop+0x82>
    samplingTimer.stop();
 23fbc8e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 23fbc92:	4816      	ldr	r0, [pc, #88]	; (23fbcec <loop+0x128>)
 23fbc94:	f7ff febe 	bl	23fba14 <_ZN5Timer4stopEj.isra.0>
    if (samplingIndex > 0)
 23fbc98:	4b15      	ldr	r3, [pc, #84]	; (23fbcf0 <loop+0x12c>)
 23fbc9a:	681a      	ldr	r2, [r3, #0]
 23fbc9c:	2a00      	cmp	r2, #0
 23fbc9e:	dd05      	ble.n	23fbcac <loop+0xe8>
      bufferReady = true;
 23fbca0:	2101      	movs	r1, #1
 23fbca2:	4a15      	ldr	r2, [pc, #84]	; (23fbcf8 <loop+0x134>)
 23fbca4:	7011      	strb	r1, [r2, #0]
      transmitBufferData(samplingIndex);
 23fbca6:	6818      	ldr	r0, [r3, #0]
 23fbca8:	f7ff ff48 	bl	23fbb3c <_Z18transmitBufferDatai>
    client.stop();
 23fbcac:	480a      	ldr	r0, [pc, #40]	; (23fbcd8 <loop+0x114>)
 23fbcae:	f003 f867 	bl	23fed80 <_ZN9TCPClient4stopEv>
    digitalWrite(LED_PIN, LOW);
 23fbcb2:	2100      	movs	r1, #0
 23fbcb4:	2007      	movs	r0, #7
 23fbcb6:	f003 fa2c 	bl	23ff112 <digitalWrite>
    Log.info("Data collection complete.");
 23fbcba:	4912      	ldr	r1, [pc, #72]	; (23fbd04 <loop+0x140>)
 23fbcbc:	4808      	ldr	r0, [pc, #32]	; (23fbce0 <loop+0x11c>)
 23fbcbe:	f7ff fcfa 	bl	23fb6b6 <_ZNK5spark6Logger4infoEPKcz>
    state = STATE_WAITING;
 23fbcc2:	2300      	movs	r3, #0
 23fbcc4:	e7bf      	b.n	23fbc46 <loop+0x82>
 23fbcc6:	bf00      	nop
 23fbcc8:	1007aed0 	.word	0x1007aed0
 23fbccc:	023ffb7c 	.word	0x023ffb7c
 23fbcd0:	1007aebc 	.word	0x1007aebc
 23fbcd4:	1007aaa0 	.word	0x1007aaa0
 23fbcd8:	1007ae50 	.word	0x1007ae50
 23fbcdc:	023ff910 	.word	0x023ff910
 23fbce0:	1007af08 	.word	0x1007af08
 23fbce4:	023ff941 	.word	0x023ff941
 23fbce8:	1007ae94 	.word	0x1007ae94
 23fbcec:	1007ae9c 	.word	0x1007ae9c
 23fbcf0:	1007ae98 	.word	0x1007ae98
 23fbcf4:	023ff954 	.word	0x023ff954
 23fbcf8:	1007ae4c 	.word	0x1007ae4c
 23fbcfc:	1007aa9c 	.word	0x1007aa9c
 23fbd00:	1007aaa4 	.word	0x1007aaa4
 23fbd04:	023ff971 	.word	0x023ff971

023fbd08 <_ZNSt8functionIFvyiEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 23fbd08:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23fbd0a:	2300      	movs	r3, #0
 23fbd0c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23fbd0e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23fbd10:	4604      	mov	r4, r0
 23fbd12:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23fbd14:	b12b      	cbz	r3, 23fbd22 <_ZNSt8functionIFvyiEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23fbd16:	2202      	movs	r2, #2
 23fbd18:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23fbd1a:	68eb      	ldr	r3, [r5, #12]
 23fbd1c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23fbd1e:	68ab      	ldr	r3, [r5, #8]
 23fbd20:	60a3      	str	r3, [r4, #8]
    }
 23fbd22:	4620      	mov	r0, r4
 23fbd24:	bd38      	pop	{r3, r4, r5, pc}

023fbd26 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
 23fbd26:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23fbd28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fbd2a:	4604      	mov	r4, r0
	switch (__op)
 23fbd2c:	d104      	bne.n	23fbd38 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
 23fbd2e:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23fbd30:	6003      	str	r3, [r0, #0]
      }
 23fbd32:	2000      	movs	r0, #0
 23fbd34:	b003      	add	sp, #12
 23fbd36:	bd30      	pop	{r4, r5, pc}
	  switch (__op)
 23fbd38:	2a02      	cmp	r2, #2
 23fbd3a:	d00c      	beq.n	23fbd56 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x30>
 23fbd3c:	2a03      	cmp	r2, #3
 23fbd3e:	d1f8      	bne.n	23fbd32 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23fbd40:	6804      	ldr	r4, [r0, #0]
 23fbd42:	2c00      	cmp	r4, #0
 23fbd44:	d0f5      	beq.n	23fbd32 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
 23fbd46:	4620      	mov	r0, r4
 23fbd48:	f7ff fe96 	bl	23fba78 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23fbd4c:	2110      	movs	r1, #16
 23fbd4e:	4620      	mov	r0, r4
 23fbd50:	f7ff fc75 	bl	23fb63e <_ZdlPvj>
 23fbd54:	e7ed      	b.n	23fbd32 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  __dest._M_access<_Functor*>() =
 23fbd56:	6809      	ldr	r1, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23fbd58:	2010      	movs	r0, #16
	  __dest._M_access<_Functor*>() =
 23fbd5a:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
 23fbd5c:	f7ff fc6b 	bl	23fb636 <_Znwj>
 23fbd60:	4605      	mov	r5, r0
 23fbd62:	b110      	cbz	r0, 23fbd6a <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x44>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
 23fbd64:	9901      	ldr	r1, [sp, #4]
 23fbd66:	f7ff ffcf 	bl	23fbd08 <_ZNSt8functionIFvyiEEC1ERKS1_>
	  __dest._M_access<_Functor*>() =
 23fbd6a:	6025      	str	r5, [r4, #0]
	}
 23fbd6c:	e7e1      	b.n	23fbd32 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>

023fbd6e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fbd6e:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fbd70:	2614      	movs	r6, #20
 23fbd72:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fbd76:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fbd78:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fbd7c:	42ae      	cmp	r6, r5
 23fbd7e:	d004      	beq.n	23fbd8a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 23fbd80:	4628      	mov	r0, r5
 23fbd82:	f000 ffad 	bl	23fcce0 <_ZN6StringD1Ev>
 23fbd86:	3514      	adds	r5, #20
 23fbd88:	e7f8      	b.n	23fbd7c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fbd8a:	6820      	ldr	r0, [r4, #0]
 23fbd8c:	f000 fe94 	bl	23fcab8 <free>
    AllocatorT::free(data_);
}
 23fbd90:	4620      	mov	r0, r4
 23fbd92:	bd70      	pop	{r4, r5, r6, pc}

023fbd94 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 23fbd94:	b513      	push	{r0, r1, r4, lr}
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fbd96:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 23fbd98:	460b      	mov	r3, r1
 23fbd9a:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fbd9c:	e9d0 0100 	ldrd	r0, r1, [r0]
 23fbda0:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23fbda4:	e893 0003 	ldmia.w	r3, {r0, r1}
 23fbda8:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 23fbdac:	e894 0003 	ldmia.w	r4, {r0, r1}
 23fbdb0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 23fbdb4:	b002      	add	sp, #8
 23fbdb6:	bd10      	pop	{r4, pc}

023fbdb8 <setup>:
{
 23fbdb8:	b530      	push	{r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23fbdba:	2500      	movs	r5, #0
 23fbdbc:	b099      	sub	sp, #100	; 0x64
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 23fbdbe:	f000 fe51 	bl	23fca64 <spark_cloud_flag_connect>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 23fbdc2:	4b3b      	ldr	r3, [pc, #236]	; (23fbeb0 <setup+0xf8>)
        };
 23fbdc4:	a904      	add	r1, sp, #16
 23fbdc6:	9304      	str	r3, [sp, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 23fbdc8:	4b3a      	ldr	r3, [pc, #232]	; (23fbeb4 <setup+0xfc>)
 23fbdca:	a808      	add	r0, sp, #32
 23fbdcc:	9307      	str	r3, [sp, #28]
	    _M_manager = &_My_handler::_M_manager;
 23fbdce:	4b3a      	ldr	r3, [pc, #232]	; (23fbeb8 <setup+0x100>)
 23fbdd0:	9306      	str	r3, [sp, #24]
 23fbdd2:	f7ff ff99 	bl	23fbd08 <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
 23fbdd6:	a908      	add	r1, sp, #32
 23fbdd8:	a80c      	add	r0, sp, #48	; 0x30
 23fbdda:	f7ff ff95 	bl	23fbd08 <_ZNSt8functionIFvyiEEC1ERKS1_>
 23fbdde:	a90c      	add	r1, sp, #48	; 0x30
 23fbde0:	a810      	add	r0, sp, #64	; 0x40
 23fbde2:	f7ff ff91 	bl	23fbd08 <_ZNSt8functionIFvyiEEC1ERKS1_>
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fbde6:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
 23fbde8:	9516      	str	r5, [sp, #88]	; 0x58
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fbdea:	f7ff fc24 	bl	23fb636 <_Znwj>
 23fbdee:	4604      	mov	r4, r0
 23fbdf0:	b160      	cbz	r0, 23fbe0c <setup+0x54>
	std::swap(_M_functor, __x._M_functor);
 23fbdf2:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 23fbdf4:	6085      	str	r5, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 23fbdf6:	a810      	add	r0, sp, #64	; 0x40
 23fbdf8:	f7ff ffcc 	bl	23fbd94 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fbdfc:	9b12      	ldr	r3, [sp, #72]	; 0x48
      __a = _GLIBCXX_MOVE(__b);
 23fbdfe:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fbe00:	60a3      	str	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fbe02:	9212      	str	r2, [sp, #72]	; 0x48
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fbe04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
 23fbe06:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fbe08:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fbe0a:	9213      	str	r2, [sp, #76]	; 0x4c
        SystemEventContext context = {};
 23fbe0c:	2500      	movs	r5, #0
	    _M_invoker = &_My_handler::_M_invoke;
 23fbe0e:	4b2b      	ldr	r3, [pc, #172]	; (23fbebc <setup+0x104>)
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
 23fbe10:	2010      	movs	r0, #16
 23fbe12:	9317      	str	r3, [sp, #92]	; 0x5c
	    _M_manager = &_My_handler::_M_manager;
 23fbe14:	4b2a      	ldr	r3, [pc, #168]	; (23fbec0 <setup+0x108>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fbe16:	9414      	str	r4, [sp, #80]	; 0x50
	    _M_manager = &_My_handler::_M_manager;
 23fbe18:	9316      	str	r3, [sp, #88]	; 0x58
        SystemEventContext context = {};
 23fbe1a:	4b2a      	ldr	r3, [pc, #168]	; (23fbec4 <setup+0x10c>)
 23fbe1c:	9503      	str	r5, [sp, #12]
 23fbe1e:	e9cd 3501 	strd	r3, r5, [sp, #4]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
 23fbe22:	f7ff fc08 	bl	23fb636 <_Znwj>
 23fbe26:	4604      	mov	r4, r0
 23fbe28:	b1d8      	cbz	r0, 23fbe62 <setup+0xaa>
    bool _M_empty() const { return !_M_manager; }
 23fbe2a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    _Function_base() : _M_manager(nullptr) { }
 23fbe2c:	6085      	str	r5, [r0, #8]
      if (static_cast<bool>(__x))
 23fbe2e:	b133      	cbz	r3, 23fbe3e <setup+0x86>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23fbe30:	2202      	movs	r2, #2
 23fbe32:	a914      	add	r1, sp, #80	; 0x50
 23fbe34:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23fbe36:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fbe38:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23fbe3a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 23fbe3c:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
 23fbe3e:	4b22      	ldr	r3, [pc, #136]	; (23fbec8 <setup+0x110>)
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
 23fbe40:	f44f 5080 	mov.w	r0, #4096	; 0x1000
        context.destructor = [](void* callable) -> void {
 23fbe44:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
 23fbe46:	2100      	movs	r1, #0
 23fbe48:	4a20      	ldr	r2, [pc, #128]	; (23fbecc <setup+0x114>)
 23fbe4a:	ab01      	add	r3, sp, #4
        context.callable = wrapper;
 23fbe4c:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
 23fbe4e:	f000 fcff 	bl	23fc850 <system_subscribe_event>
        if (r) {
 23fbe52:	b130      	cbz	r0, 23fbe62 <setup+0xaa>
    class function<_Res(_ArgTypes...)>
 23fbe54:	4620      	mov	r0, r4
 23fbe56:	f7ff fe0f 	bl	23fba78 <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
 23fbe5a:	2110      	movs	r1, #16
 23fbe5c:	4620      	mov	r0, r4
 23fbe5e:	f7ff fbee 	bl	23fb63e <_ZdlPvj>
 23fbe62:	a814      	add	r0, sp, #80	; 0x50
 23fbe64:	f7ff fe08 	bl	23fba78 <_ZNSt14_Function_baseD1Ev>
 23fbe68:	a810      	add	r0, sp, #64	; 0x40
 23fbe6a:	f7ff fe05 	bl	23fba78 <_ZNSt14_Function_baseD1Ev>
 23fbe6e:	a80c      	add	r0, sp, #48	; 0x30
 23fbe70:	f7ff fe02 	bl	23fba78 <_ZNSt14_Function_baseD1Ev>
 23fbe74:	a808      	add	r0, sp, #32
 23fbe76:	f7ff fdff 	bl	23fba78 <_ZNSt14_Function_baseD1Ev>
 23fbe7a:	a804      	add	r0, sp, #16
 23fbe7c:	f7ff fdfc 	bl	23fba78 <_ZNSt14_Function_baseD1Ev>
  pinMode(LED_PIN, OUTPUT);
 23fbe80:	2101      	movs	r1, #1
 23fbe82:	2007      	movs	r0, #7
 23fbe84:	f003 f934 	bl	23ff0f0 <pinMode>
  digitalWrite(LED_PIN, LOW);
 23fbe88:	2007      	movs	r0, #7
 23fbe8a:	2100      	movs	r1, #0
 23fbe8c:	f003 f941 	bl	23ff112 <digitalWrite>
  if (!accelerometer.begin())
 23fbe90:	480f      	ldr	r0, [pc, #60]	; (23fbed0 <setup+0x118>)
 23fbe92:	f7ff fcef 	bl	23fb874 <_ZN7ADXL3435beginEv>
 23fbe96:	b928      	cbnz	r0, 23fbea4 <setup+0xec>
    Log.error("Failed to initialize ADXL343!");
 23fbe98:	490e      	ldr	r1, [pc, #56]	; (23fbed4 <setup+0x11c>)
 23fbe9a:	480f      	ldr	r0, [pc, #60]	; (23fbed8 <setup+0x120>)
 23fbe9c:	f7ff fbfd 	bl	23fb69a <_ZNK5spark6Logger5errorEPKcz>
    System.reset();
 23fbea0:	f000 ff08 	bl	23fccb4 <_ZN11SystemClass5resetEv>
  Log.info("ADXL343 initialized. Waiting for button press...");
 23fbea4:	490d      	ldr	r1, [pc, #52]	; (23fbedc <setup+0x124>)
 23fbea6:	480c      	ldr	r0, [pc, #48]	; (23fbed8 <setup+0x120>)
 23fbea8:	f7ff fc05 	bl	23fb6b6 <_ZNK5spark6Logger4infoEPKcz>
}
 23fbeac:	b019      	add	sp, #100	; 0x64
 23fbeae:	bd30      	pop	{r4, r5, pc}
 23fbeb0:	023fbafd 	.word	0x023fbafd
 23fbeb4:	023fb9f3 	.word	0x023fb9f3
 23fbeb8:	023fb9df 	.word	0x023fb9df
 23fbebc:	023fb9b9 	.word	0x023fb9b9
 23fbec0:	023fbd27 	.word	0x023fbd27
 23fbec4:	000c0002 	.word	0x000c0002
 23fbec8:	023fba8b 	.word	0x023fba8b
 23fbecc:	023fb8df 	.word	0x023fb8df
 23fbed0:	1007ab24 	.word	0x1007ab24
 23fbed4:	023ff98b 	.word	0x023ff98b
 23fbed8:	1007af08 	.word	0x1007af08
 23fbedc:	023ff9a9 	.word	0x023ff9a9

023fbee0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fbee0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fbee2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fbee4:	4604      	mov	r4, r0
 23fbee6:	460d      	mov	r5, r1
 23fbee8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fbeea:	d916      	bls.n	23fbf1a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 23fbeec:	4290      	cmp	r0, r2
 23fbeee:	d215      	bcs.n	23fbf1c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 23fbef0:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fbef4:	1a75      	subs	r5, r6, r1
 23fbef6:	f1a1 0714 	sub.w	r7, r1, #20
 23fbefa:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fbefc:	42b7      	cmp	r7, r6
 23fbefe:	d01c      	beq.n	23fbf3a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 23fbf00:	b12c      	cbz	r4, 23fbf0e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 23fbf02:	4631      	mov	r1, r6
 23fbf04:	4620      	mov	r0, r4
 23fbf06:	f000 ff68 	bl	23fcdda <_ZN6StringC1EOS_>
 23fbf0a:	7c33      	ldrb	r3, [r6, #16]
 23fbf0c:	7423      	strb	r3, [r4, #16]
 23fbf0e:	4630      	mov	r0, r6
 23fbf10:	f000 fee6 	bl	23fcce0 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fbf14:	3e14      	subs	r6, #20
 23fbf16:	3c14      	subs	r4, #20
 23fbf18:	e7f0      	b.n	23fbefc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fbf1a:	d00e      	beq.n	23fbf3a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 23fbf1c:	42b5      	cmp	r5, r6
 23fbf1e:	d00c      	beq.n	23fbf3a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 23fbf20:	b12c      	cbz	r4, 23fbf2e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 23fbf22:	4629      	mov	r1, r5
 23fbf24:	4620      	mov	r0, r4
 23fbf26:	f000 ff58 	bl	23fcdda <_ZN6StringC1EOS_>
 23fbf2a:	7c2b      	ldrb	r3, [r5, #16]
 23fbf2c:	7423      	strb	r3, [r4, #16]
 23fbf2e:	4628      	mov	r0, r5
 23fbf30:	f000 fed6 	bl	23fcce0 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fbf34:	3514      	adds	r5, #20
 23fbf36:	3414      	adds	r4, #20
 23fbf38:	e7f0      	b.n	23fbf1c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 23fbf3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fbf3c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 23fbf3c:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fbf3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23fbf42:	e9c0 3300 	strd	r3, r3, [r0]
 23fbf46:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fbf48:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fbf4a:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fbf4c:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fbf4e:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fbf50:	dd24      	ble.n	23fbf9c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23fbf52:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 23fbf56:	fb08 f007 	mul.w	r0, r8, r7
 23fbf5a:	f000 fd9f 	bl	23fca9c <malloc>
            if (!d) {
 23fbf5e:	4605      	mov	r5, r0
 23fbf60:	b1e0      	cbz	r0, 23fbf9c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 23fbf62:	e9d4 1200 	ldrd	r1, r2, [r4]
 23fbf66:	fb08 1202 	mla	r2, r8, r2, r1
 23fbf6a:	f7ff ffb9 	bl	23fbee0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fbf6e:	6820      	ldr	r0, [r4, #0]
 23fbf70:	f000 fda2 	bl	23fcab8 <free>
        data_ = d;
 23fbf74:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 23fbf76:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fbf78:	e9d6 7300 	ldrd	r7, r3, [r6]
 23fbf7c:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 23fbf80:	45b8      	cmp	r8, r7
 23fbf82:	d009      	beq.n	23fbf98 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 23fbf84:	4639      	mov	r1, r7
 23fbf86:	4628      	mov	r0, r5
 23fbf88:	f000 ff41 	bl	23fce0e <_ZN6StringC1ERKS_>
 23fbf8c:	7c3b      	ldrb	r3, [r7, #16]
 23fbf8e:	3514      	adds	r5, #20
 23fbf90:	f805 3c04 	strb.w	r3, [r5, #-4]
 23fbf94:	3714      	adds	r7, #20
 23fbf96:	e7f3      	b.n	23fbf80 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 23fbf98:	6873      	ldr	r3, [r6, #4]
 23fbf9a:	6063      	str	r3, [r4, #4]
}
 23fbf9c:	4620      	mov	r0, r4
 23fbf9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

023fbfa4 <_GLOBAL__sub_I_SystemMode>:
}
 23fbfa4:	b5f0      	push	{r4, r5, r6, r7, lr}
              error_(SYSTEM_ERROR_NONE) {
 23fbfa6:	2500      	movs	r5, #0
 23fbfa8:	b091      	sub	sp, #68	; 0x44
SYSTEM_THREAD(ENABLED);
 23fbfaa:	2100      	movs	r1, #0
 23fbfac:	2001      	movs	r0, #1
 23fbfae:	f000 fc5d 	bl	23fc86c <system_thread_set_state>
 23fbfb2:	4b3c      	ldr	r3, [pc, #240]	; (23fc0a4 <_GLOBAL__sub_I_SystemMode+0x100>)
    SleepResult() {}
 23fbfb4:	4a3c      	ldr	r2, [pc, #240]	; (23fc0a8 <_GLOBAL__sub_I_SystemMode+0x104>)
              error_(SYSTEM_ERROR_NONE) {
 23fbfb6:	e9c3 5500 	strd	r5, r5, [r3]
    SleepResult() {}
 23fbfba:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
 23fbfbc:	2002      	movs	r0, #2
 23fbfbe:	f000 fc39 	bl	23fc834 <set_system_mode>
        capacity_(0) {
 23fbfc2:	e9cd 5503 	strd	r5, r5, [sp, #12]
 23fbfc6:	9505      	str	r5, [sp, #20]
            StreamLogHandler(Serial, level, filters) {
 23fbfc8:	f002 f976 	bl	23fe2b8 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
 23fbfcc:	4c37      	ldr	r4, [pc, #220]	; (23fc0ac <_GLOBAL__sub_I_SystemMode+0x108>)
 23fbfce:	4606      	mov	r6, r0
 23fbfd0:	4627      	mov	r7, r4
 23fbfd2:	a903      	add	r1, sp, #12
 23fbfd4:	a806      	add	r0, sp, #24
 23fbfd6:	f7ff ffb1 	bl	23fbf3c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
 23fbfda:	a906      	add	r1, sp, #24
 23fbfdc:	a809      	add	r0, sp, #36	; 0x24
 23fbfde:	f7ff ffad 	bl	23fbf3c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fbfe2:	4b33      	ldr	r3, [pc, #204]	; (23fc0b0 <_GLOBAL__sub_I_SystemMode+0x10c>)
 23fbfe4:	a909      	add	r1, sp, #36	; 0x24
 23fbfe6:	f847 3b04 	str.w	r3, [r7], #4
 23fbfea:	a80c      	add	r0, sp, #48	; 0x30
 23fbfec:	f7ff ffa6 	bl	23fbf3c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fbff0:	aa0c      	add	r2, sp, #48	; 0x30
 23fbff2:	211e      	movs	r1, #30
 23fbff4:	4638      	mov	r0, r7
 23fbff6:	f001 fc7d 	bl	23fd8f4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fbffa:	a80c      	add	r0, sp, #48	; 0x30
 23fbffc:	f7ff feb7 	bl	23fbd6e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fc000:	a809      	add	r0, sp, #36	; 0x24
 23fc002:	f7ff feb4 	bl	23fbd6e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fc006:	4b2b      	ldr	r3, [pc, #172]	; (23fc0b4 <_GLOBAL__sub_I_SystemMode+0x110>)
 23fc008:	6226      	str	r6, [r4, #32]
 23fc00a:	6023      	str	r3, [r4, #0]
 23fc00c:	a806      	add	r0, sp, #24
 23fc00e:	f7ff feae 	bl	23fbd6e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fc012:	4b29      	ldr	r3, [pc, #164]	; (23fc0b8 <_GLOBAL__sub_I_SystemMode+0x114>)
 23fc014:	6023      	str	r3, [r4, #0]
        Serial.begin();
 23fc016:	f002 f94f 	bl	23fe2b8 <_Z16_fetch_usbserialv>
 23fc01a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fc01e:	f002 f93b 	bl	23fe298 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 23fc022:	f001 f939 	bl	23fd298 <_ZN5spark10LogManager8instanceEv>
 23fc026:	4621      	mov	r1, r4
 23fc028:	f001 fb3c 	bl	23fd6a4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler;
 23fc02c:	a803      	add	r0, sp, #12
 23fc02e:	f7ff fe9e 	bl	23fbd6e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
IPAddress serverAddr = IPAddress(10, 53, 191, 143);
 23fc032:	238f      	movs	r3, #143	; 0x8f
 23fc034:	2235      	movs	r2, #53	; 0x35
 23fc036:	210a      	movs	r1, #10
 23fc038:	9300      	str	r3, [sp, #0]
 23fc03a:	4820      	ldr	r0, [pc, #128]	; (23fc0bc <_GLOBAL__sub_I_SystemMode+0x118>)
 23fc03c:	23bf      	movs	r3, #191	; 0xbf
 23fc03e:	f002 f8bd 	bl	23fe1bc <_ZN9IPAddressC1Ehhhh>
TCPClient client;
 23fc042:	481f      	ldr	r0, [pc, #124]	; (23fc0c0 <_GLOBAL__sub_I_SystemMode+0x11c>)
 23fc044:	f002 fee6 	bl	23fee14 <_ZN9TCPClientC1Ev>
ADXL343 accelerometer;
 23fc048:	f003 f958 	bl	23ff2fc <_Z19__fetch_global_Wirev>
 23fc04c:	2253      	movs	r2, #83	; 0x53
 23fc04e:	4601      	mov	r1, r0
 23fc050:	481c      	ldr	r0, [pc, #112]	; (23fc0c4 <_GLOBAL__sub_I_SystemMode+0x120>)
 23fc052:	f7ff fb4c 	bl	23fb6ee <_ZN7ADXL343C1ER7TwoWireh>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 23fc056:	4b1c      	ldr	r3, [pc, #112]	; (23fc0c8 <_GLOBAL__sub_I_SystemMode+0x124>)
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
 23fc058:	4c1c      	ldr	r4, [pc, #112]	; (23fc0cc <_GLOBAL__sub_I_SystemMode+0x128>)
 23fc05a:	930c      	str	r3, [sp, #48]	; 0x30
	    _M_invoker = &_My_handler::_M_invoke;
 23fc05c:	4b1c      	ldr	r3, [pc, #112]	; (23fc0d0 <_GLOBAL__sub_I_SystemMode+0x12c>)
	std::swap(_M_functor, __x._M_functor);
 23fc05e:	f104 010c 	add.w	r1, r4, #12
	    _M_invoker = &_My_handler::_M_invoke;
 23fc062:	930f      	str	r3, [sp, #60]	; 0x3c
	    _M_manager = &_My_handler::_M_manager;
 23fc064:	4b1b      	ldr	r3, [pc, #108]	; (23fc0d4 <_GLOBAL__sub_I_SystemMode+0x130>)
	std::swap(_M_functor, __x._M_functor);
 23fc066:	a80c      	add	r0, sp, #48	; 0x30
	    _M_manager = &_My_handler::_M_manager;
 23fc068:	930e      	str	r3, [sp, #56]	; 0x38
 23fc06a:	4b1b      	ldr	r3, [pc, #108]	; (23fc0d8 <_GLOBAL__sub_I_SystemMode+0x134>)
 23fc06c:	7125      	strb	r5, [r4, #4]
 23fc06e:	6023      	str	r3, [r4, #0]
 23fc070:	60a5      	str	r5, [r4, #8]
    _Function_base() : _M_manager(nullptr) { }
 23fc072:	6165      	str	r5, [r4, #20]
	std::swap(_M_functor, __x._M_functor);
 23fc074:	f7ff fe8e 	bl	23fbd94 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
 23fc078:	6962      	ldr	r2, [r4, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fc07a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      __a = _GLIBCXX_MOVE(__b);
 23fc07c:	920e      	str	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
 23fc07e:	6163      	str	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fc080:	69a2      	ldr	r2, [r4, #24]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fc082:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
 23fc084:	2102      	movs	r1, #2
      __b = _GLIBCXX_MOVE(__tmp);
 23fc086:	61a3      	str	r3, [r4, #24]
      __a = _GLIBCXX_MOVE(__b);
 23fc088:	920f      	str	r2, [sp, #60]	; 0x3c
 23fc08a:	4623      	mov	r3, r4
 23fc08c:	4a13      	ldr	r2, [pc, #76]	; (23fc0dc <_GLOBAL__sub_I_SystemMode+0x138>)
 23fc08e:	e9cd 5500 	strd	r5, r5, [sp]
 23fc092:	f104 0008 	add.w	r0, r4, #8
 23fc096:	f000 f8d9 	bl	23fc24c <os_timer_create>
    class function<_Res(_ArgTypes...)>
 23fc09a:	a80c      	add	r0, sp, #48	; 0x30
 23fc09c:	f7ff fcec 	bl	23fba78 <_ZNSt14_Function_baseD1Ev>
}
 23fc0a0:	b011      	add	sp, #68	; 0x44
 23fc0a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fc0a4:	1007ab18 	.word	0x1007ab18
 23fc0a8:	ffff0000 	.word	0xffff0000
 23fc0ac:	1007ae70 	.word	0x1007ae70
 23fc0b0:	023ff9f8 	.word	0x023ff9f8
 23fc0b4:	023ffb00 	.word	0x023ffb00
 23fc0b8:	023ffa10 	.word	0x023ffa10
 23fc0bc:	1007aeb8 	.word	0x1007aeb8
 23fc0c0:	1007ae50 	.word	0x1007ae50
 23fc0c4:	1007ab24 	.word	0x1007ab24
 23fc0c8:	023fb941 	.word	0x023fb941
 23fc0cc:	1007ae9c 	.word	0x1007ae9c
 23fc0d0:	023fba11 	.word	0x023fba11
 23fc0d4:	023fb9fd 	.word	0x023fb9fd
 23fc0d8:	023ff9e4 	.word	0x023ff9e4
 23fc0dc:	023fb907 	.word	0x023fb907

023fc0e0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fc0e0:	b509      	push	{r0, r3, lr}
 23fc0e2:	4804      	ldr	r0, [pc, #16]	; (23fc0f4 <netdb_freeaddrinfo+0x14>)
 23fc0e4:	6800      	ldr	r0, [r0, #0]
 23fc0e6:	4b04      	ldr	r3, [pc, #16]	; (23fc0f8 <netdb_freeaddrinfo+0x18>)
 23fc0e8:	4403      	add	r3, r0
 23fc0ea:	681b      	ldr	r3, [r3, #0]
 23fc0ec:	689b      	ldr	r3, [r3, #8]
 23fc0ee:	9302      	str	r3, [sp, #8]
 23fc0f0:	bd09      	pop	{r0, r3, pc}
 23fc0f2:	0000      	.short	0x0000
 23fc0f4:	1007aa98 	.word	0x1007aa98
 23fc0f8:	00000050 	.word	0x00000050

023fc0fc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fc0fc:	b509      	push	{r0, r3, lr}
 23fc0fe:	4804      	ldr	r0, [pc, #16]	; (23fc110 <netdb_getaddrinfo+0x14>)
 23fc100:	6800      	ldr	r0, [r0, #0]
 23fc102:	4b04      	ldr	r3, [pc, #16]	; (23fc114 <netdb_getaddrinfo+0x18>)
 23fc104:	4403      	add	r3, r0
 23fc106:	681b      	ldr	r3, [r3, #0]
 23fc108:	68db      	ldr	r3, [r3, #12]
 23fc10a:	9302      	str	r3, [sp, #8]
 23fc10c:	bd09      	pop	{r0, r3, pc}
 23fc10e:	0000      	.short	0x0000
 23fc110:	1007aa98 	.word	0x1007aa98
 23fc114:	00000050 	.word	0x00000050

023fc118 <netdb_getaddrinfo_ex>:
DYNALIB_FN(4, hal_netdb, netdb_getnameinfo, int(const struct sockaddr*, socklen_t, char*, socklen_t, char*, socklen_t, int))
DYNALIB_FN(5, hal_netdb, netdb_getaddrinfo_ex, int(const char*, const char*, const struct addrinfo*, struct addrinfo**, if_t))
 23fc118:	b509      	push	{r0, r3, lr}
 23fc11a:	4804      	ldr	r0, [pc, #16]	; (23fc12c <netdb_getaddrinfo_ex+0x14>)
 23fc11c:	6800      	ldr	r0, [r0, #0]
 23fc11e:	4b04      	ldr	r3, [pc, #16]	; (23fc130 <netdb_getaddrinfo_ex+0x18>)
 23fc120:	4403      	add	r3, r0
 23fc122:	681b      	ldr	r3, [r3, #0]
 23fc124:	695b      	ldr	r3, [r3, #20]
 23fc126:	9302      	str	r3, [sp, #8]
 23fc128:	bd09      	pop	{r0, r3, pc}
 23fc12a:	0000      	.short	0x0000
 23fc12c:	1007aa98 	.word	0x1007aa98
 23fc130:	00000050 	.word	0x00000050

023fc134 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23fc134:	b509      	push	{r0, r3, lr}
 23fc136:	4804      	ldr	r0, [pc, #16]	; (23fc148 <hal_gpio_mode+0x14>)
 23fc138:	6800      	ldr	r0, [r0, #0]
 23fc13a:	4b04      	ldr	r3, [pc, #16]	; (23fc14c <hal_gpio_mode+0x18>)
 23fc13c:	4403      	add	r3, r0
 23fc13e:	681b      	ldr	r3, [r3, #0]
 23fc140:	689b      	ldr	r3, [r3, #8]
 23fc142:	9302      	str	r3, [sp, #8]
 23fc144:	bd09      	pop	{r0, r3, pc}
 23fc146:	0000      	.short	0x0000
 23fc148:	1007aa98 	.word	0x1007aa98
 23fc14c:	00000014 	.word	0x00000014

023fc150 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
 23fc150:	b509      	push	{r0, r3, lr}
 23fc152:	4804      	ldr	r0, [pc, #16]	; (23fc164 <hal_gpio_get_mode+0x14>)
 23fc154:	6800      	ldr	r0, [r0, #0]
 23fc156:	4b04      	ldr	r3, [pc, #16]	; (23fc168 <hal_gpio_get_mode+0x18>)
 23fc158:	4403      	add	r3, r0
 23fc15a:	681b      	ldr	r3, [r3, #0]
 23fc15c:	68db      	ldr	r3, [r3, #12]
 23fc15e:	9302      	str	r3, [sp, #8]
 23fc160:	bd09      	pop	{r0, r3, pc}
 23fc162:	0000      	.short	0x0000
 23fc164:	1007aa98 	.word	0x1007aa98
 23fc168:	00000014 	.word	0x00000014

023fc16c <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
 23fc16c:	b509      	push	{r0, r3, lr}
 23fc16e:	4804      	ldr	r0, [pc, #16]	; (23fc180 <hal_gpio_write+0x14>)
 23fc170:	6800      	ldr	r0, [r0, #0]
 23fc172:	4b04      	ldr	r3, [pc, #16]	; (23fc184 <hal_gpio_write+0x18>)
 23fc174:	4403      	add	r3, r0
 23fc176:	681b      	ldr	r3, [r3, #0]
 23fc178:	691b      	ldr	r3, [r3, #16]
 23fc17a:	9302      	str	r3, [sp, #8]
 23fc17c:	bd09      	pop	{r0, r3, pc}
 23fc17e:	0000      	.short	0x0000
 23fc180:	1007aa98 	.word	0x1007aa98
 23fc184:	00000014 	.word	0x00000014

023fc188 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
 23fc188:	b509      	push	{r0, r3, lr}
 23fc18a:	4804      	ldr	r0, [pc, #16]	; (23fc19c <if_index_to_name+0x14>)
 23fc18c:	6800      	ldr	r0, [r0, #0]
 23fc18e:	4b04      	ldr	r3, [pc, #16]	; (23fc1a0 <if_index_to_name+0x18>)
 23fc190:	4403      	add	r3, r0
 23fc192:	681b      	ldr	r3, [r3, #0]
 23fc194:	695b      	ldr	r3, [r3, #20]
 23fc196:	9302      	str	r3, [sp, #8]
 23fc198:	bd09      	pop	{r0, r3, pc}
 23fc19a:	0000      	.short	0x0000
 23fc19c:	1007aa98 	.word	0x1007aa98
 23fc1a0:	00000054 	.word	0x00000054

023fc1a4 <if_get_by_index>:
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
 23fc1a4:	b509      	push	{r0, r3, lr}
 23fc1a6:	4804      	ldr	r0, [pc, #16]	; (23fc1b8 <if_get_by_index+0x14>)
 23fc1a8:	6800      	ldr	r0, [r0, #0]
 23fc1aa:	4b04      	ldr	r3, [pc, #16]	; (23fc1bc <if_get_by_index+0x18>)
 23fc1ac:	4403      	add	r3, r0
 23fc1ae:	681b      	ldr	r3, [r3, #0]
 23fc1b0:	699b      	ldr	r3, [r3, #24]
 23fc1b2:	9302      	str	r3, [sp, #8]
 23fc1b4:	bd09      	pop	{r0, r3, pc}
 23fc1b6:	0000      	.short	0x0000
 23fc1b8:	1007aa98 	.word	0x1007aa98
 23fc1bc:	00000054 	.word	0x00000054

023fc1c0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fc1c0:	b509      	push	{r0, r3, lr}
 23fc1c2:	4804      	ldr	r0, [pc, #16]	; (23fc1d4 <HAL_RNG_GetRandomNumber+0x14>)
 23fc1c4:	6800      	ldr	r0, [r0, #0]
 23fc1c6:	4b04      	ldr	r3, [pc, #16]	; (23fc1d8 <HAL_RNG_GetRandomNumber+0x18>)
 23fc1c8:	4403      	add	r3, r0
 23fc1ca:	681b      	ldr	r3, [r3, #0]
 23fc1cc:	685b      	ldr	r3, [r3, #4]
 23fc1ce:	9302      	str	r3, [sp, #8]
 23fc1d0:	bd09      	pop	{r0, r3, pc}
 23fc1d2:	0000      	.short	0x0000
 23fc1d4:	1007aa98 	.word	0x1007aa98
 23fc1d8:	00000000 	.word	0x00000000

023fc1dc <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 23fc1dc:	b509      	push	{r0, r3, lr}
 23fc1de:	4804      	ldr	r0, [pc, #16]	; (23fc1f0 <HAL_Timer_Get_Micro_Seconds+0x14>)
 23fc1e0:	6800      	ldr	r0, [r0, #0]
 23fc1e2:	4b04      	ldr	r3, [pc, #16]	; (23fc1f4 <HAL_Timer_Get_Micro_Seconds+0x18>)
 23fc1e4:	4403      	add	r3, r0
 23fc1e6:	681b      	ldr	r3, [r3, #0]
 23fc1e8:	691b      	ldr	r3, [r3, #16]
 23fc1ea:	9302      	str	r3, [sp, #8]
 23fc1ec:	bd09      	pop	{r0, r3, pc}
 23fc1ee:	0000      	.short	0x0000
 23fc1f0:	1007aa98 	.word	0x1007aa98
 23fc1f4:	00000000 	.word	0x00000000

023fc1f8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fc1f8:	b509      	push	{r0, r3, lr}
 23fc1fa:	4804      	ldr	r0, [pc, #16]	; (23fc20c <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fc1fc:	6800      	ldr	r0, [r0, #0]
 23fc1fe:	4b04      	ldr	r3, [pc, #16]	; (23fc210 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fc200:	4403      	add	r3, r0
 23fc202:	681b      	ldr	r3, [r3, #0]
 23fc204:	695b      	ldr	r3, [r3, #20]
 23fc206:	9302      	str	r3, [sp, #8]
 23fc208:	bd09      	pop	{r0, r3, pc}
 23fc20a:	0000      	.short	0x0000
 23fc20c:	1007aa98 	.word	0x1007aa98
 23fc210:	00000000 	.word	0x00000000

023fc214 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
 23fc214:	b509      	push	{r0, r3, lr}
 23fc216:	4804      	ldr	r0, [pc, #16]	; (23fc228 <os_thread_yield+0x14>)
 23fc218:	6800      	ldr	r0, [r0, #0]
 23fc21a:	4b04      	ldr	r3, [pc, #16]	; (23fc22c <os_thread_yield+0x18>)
 23fc21c:	4403      	add	r3, r0
 23fc21e:	681b      	ldr	r3, [r3, #0]
 23fc220:	68db      	ldr	r3, [r3, #12]
 23fc222:	9302      	str	r3, [sp, #8]
 23fc224:	bd09      	pop	{r0, r3, pc}
 23fc226:	0000      	.short	0x0000
 23fc228:	1007aa98 	.word	0x1007aa98
 23fc22c:	00000030 	.word	0x00000030

023fc230 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
 23fc230:	b509      	push	{r0, r3, lr}
 23fc232:	4804      	ldr	r0, [pc, #16]	; (23fc244 <os_thread_scheduling+0x14>)
 23fc234:	6800      	ldr	r0, [r0, #0]
 23fc236:	4b04      	ldr	r3, [pc, #16]	; (23fc248 <os_thread_scheduling+0x18>)
 23fc238:	4403      	add	r3, r0
 23fc23a:	681b      	ldr	r3, [r3, #0]
 23fc23c:	69db      	ldr	r3, [r3, #28]
 23fc23e:	9302      	str	r3, [sp, #8]
 23fc240:	bd09      	pop	{r0, r3, pc}
 23fc242:	0000      	.short	0x0000
 23fc244:	1007aa98 	.word	0x1007aa98
 23fc248:	00000030 	.word	0x00000030

023fc24c <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
 23fc24c:	b509      	push	{r0, r3, lr}
 23fc24e:	4804      	ldr	r0, [pc, #16]	; (23fc260 <os_timer_create+0x14>)
 23fc250:	6800      	ldr	r0, [r0, #0]
 23fc252:	4b04      	ldr	r3, [pc, #16]	; (23fc264 <os_timer_create+0x18>)
 23fc254:	4403      	add	r3, r0
 23fc256:	681b      	ldr	r3, [r3, #0]
 23fc258:	6a1b      	ldr	r3, [r3, #32]
 23fc25a:	9302      	str	r3, [sp, #8]
 23fc25c:	bd09      	pop	{r0, r3, pc}
 23fc25e:	0000      	.short	0x0000
 23fc260:	1007aa98 	.word	0x1007aa98
 23fc264:	00000030 	.word	0x00000030

023fc268 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
 23fc268:	b509      	push	{r0, r3, lr}
 23fc26a:	4804      	ldr	r0, [pc, #16]	; (23fc27c <os_timer_destroy+0x14>)
 23fc26c:	6800      	ldr	r0, [r0, #0]
 23fc26e:	4b04      	ldr	r3, [pc, #16]	; (23fc280 <os_timer_destroy+0x18>)
 23fc270:	4403      	add	r3, r0
 23fc272:	681b      	ldr	r3, [r3, #0]
 23fc274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fc276:	9302      	str	r3, [sp, #8]
 23fc278:	bd09      	pop	{r0, r3, pc}
 23fc27a:	0000      	.short	0x0000
 23fc27c:	1007aa98 	.word	0x1007aa98
 23fc280:	00000030 	.word	0x00000030

023fc284 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
 23fc284:	b509      	push	{r0, r3, lr}
 23fc286:	4804      	ldr	r0, [pc, #16]	; (23fc298 <os_timer_get_id+0x14>)
 23fc288:	6800      	ldr	r0, [r0, #0]
 23fc28a:	4b04      	ldr	r3, [pc, #16]	; (23fc29c <os_timer_get_id+0x18>)
 23fc28c:	4403      	add	r3, r0
 23fc28e:	681b      	ldr	r3, [r3, #0]
 23fc290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fc292:	9302      	str	r3, [sp, #8]
 23fc294:	bd09      	pop	{r0, r3, pc}
 23fc296:	0000      	.short	0x0000
 23fc298:	1007aa98 	.word	0x1007aa98
 23fc29c:	00000030 	.word	0x00000030

023fc2a0 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
 23fc2a0:	b509      	push	{r0, r3, lr}
 23fc2a2:	4804      	ldr	r0, [pc, #16]	; (23fc2b4 <os_timer_change+0x14>)
 23fc2a4:	6800      	ldr	r0, [r0, #0]
 23fc2a6:	4b04      	ldr	r3, [pc, #16]	; (23fc2b8 <os_timer_change+0x18>)
 23fc2a8:	4403      	add	r3, r0
 23fc2aa:	681b      	ldr	r3, [r3, #0]
 23fc2ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fc2ae:	9302      	str	r3, [sp, #8]
 23fc2b0:	bd09      	pop	{r0, r3, pc}
 23fc2b2:	0000      	.short	0x0000
 23fc2b4:	1007aa98 	.word	0x1007aa98
 23fc2b8:	00000030 	.word	0x00000030

023fc2bc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fc2bc:	b509      	push	{r0, r3, lr}
 23fc2be:	4804      	ldr	r0, [pc, #16]	; (23fc2d0 <os_mutex_recursive_create+0x14>)
 23fc2c0:	6800      	ldr	r0, [r0, #0]
 23fc2c2:	4b04      	ldr	r3, [pc, #16]	; (23fc2d4 <os_mutex_recursive_create+0x18>)
 23fc2c4:	4403      	add	r3, r0
 23fc2c6:	681b      	ldr	r3, [r3, #0]
 23fc2c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fc2ca:	9302      	str	r3, [sp, #8]
 23fc2cc:	bd09      	pop	{r0, r3, pc}
 23fc2ce:	0000      	.short	0x0000
 23fc2d0:	1007aa98 	.word	0x1007aa98
 23fc2d4:	00000030 	.word	0x00000030

023fc2d8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 23fc2d8:	b509      	push	{r0, r3, lr}
 23fc2da:	4804      	ldr	r0, [pc, #16]	; (23fc2ec <os_mutex_recursive_destroy+0x14>)
 23fc2dc:	6800      	ldr	r0, [r0, #0]
 23fc2de:	4b04      	ldr	r3, [pc, #16]	; (23fc2f0 <os_mutex_recursive_destroy+0x18>)
 23fc2e0:	4403      	add	r3, r0
 23fc2e2:	681b      	ldr	r3, [r3, #0]
 23fc2e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23fc2e6:	9302      	str	r3, [sp, #8]
 23fc2e8:	bd09      	pop	{r0, r3, pc}
 23fc2ea:	0000      	.short	0x0000
 23fc2ec:	1007aa98 	.word	0x1007aa98
 23fc2f0:	00000030 	.word	0x00000030

023fc2f4 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 23fc2f4:	b509      	push	{r0, r3, lr}
 23fc2f6:	4804      	ldr	r0, [pc, #16]	; (23fc308 <os_mutex_recursive_lock+0x14>)
 23fc2f8:	6800      	ldr	r0, [r0, #0]
 23fc2fa:	4b04      	ldr	r3, [pc, #16]	; (23fc30c <os_mutex_recursive_lock+0x18>)
 23fc2fc:	4403      	add	r3, r0
 23fc2fe:	681b      	ldr	r3, [r3, #0]
 23fc300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23fc302:	9302      	str	r3, [sp, #8]
 23fc304:	bd09      	pop	{r0, r3, pc}
 23fc306:	0000      	.short	0x0000
 23fc308:	1007aa98 	.word	0x1007aa98
 23fc30c:	00000030 	.word	0x00000030

023fc310 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 23fc310:	b509      	push	{r0, r3, lr}
 23fc312:	4804      	ldr	r0, [pc, #16]	; (23fc324 <os_mutex_recursive_unlock+0x14>)
 23fc314:	6800      	ldr	r0, [r0, #0]
 23fc316:	4b04      	ldr	r3, [pc, #16]	; (23fc328 <os_mutex_recursive_unlock+0x18>)
 23fc318:	4403      	add	r3, r0
 23fc31a:	681b      	ldr	r3, [r3, #0]
 23fc31c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fc31e:	9302      	str	r3, [sp, #8]
 23fc320:	bd09      	pop	{r0, r3, pc}
 23fc322:	0000      	.short	0x0000
 23fc324:	1007aa98 	.word	0x1007aa98
 23fc328:	00000030 	.word	0x00000030

023fc32c <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
 23fc32c:	b509      	push	{r0, r3, lr}
 23fc32e:	4804      	ldr	r0, [pc, #16]	; (23fc340 <os_timer_set_id+0x14>)
 23fc330:	6800      	ldr	r0, [r0, #0]
 23fc332:	4b04      	ldr	r3, [pc, #16]	; (23fc344 <os_timer_set_id+0x18>)
 23fc334:	4403      	add	r3, r0
 23fc336:	681b      	ldr	r3, [r3, #0]
 23fc338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 23fc33a:	9302      	str	r3, [sp, #8]
 23fc33c:	bd09      	pop	{r0, r3, pc}
 23fc33e:	0000      	.short	0x0000
 23fc340:	1007aa98 	.word	0x1007aa98
 23fc344:	00000030 	.word	0x00000030

023fc348 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fc348:	b509      	push	{r0, r3, lr}
 23fc34a:	4804      	ldr	r0, [pc, #16]	; (23fc35c <inet_inet_ntop+0x14>)
 23fc34c:	6800      	ldr	r0, [r0, #0]
 23fc34e:	4b04      	ldr	r3, [pc, #16]	; (23fc360 <inet_inet_ntop+0x18>)
 23fc350:	4403      	add	r3, r0
 23fc352:	681b      	ldr	r3, [r3, #0]
 23fc354:	695b      	ldr	r3, [r3, #20]
 23fc356:	9302      	str	r3, [sp, #8]
 23fc358:	bd09      	pop	{r0, r3, pc}
 23fc35a:	0000      	.short	0x0000
 23fc35c:	1007aa98 	.word	0x1007aa98
 23fc360:	0000004c 	.word	0x0000004c

023fc364 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
 23fc364:	b509      	push	{r0, r3, lr}
 23fc366:	4804      	ldr	r0, [pc, #16]	; (23fc378 <inet_htonl+0x14>)
 23fc368:	6800      	ldr	r0, [r0, #0]
 23fc36a:	4b04      	ldr	r3, [pc, #16]	; (23fc37c <inet_htonl+0x18>)
 23fc36c:	4403      	add	r3, r0
 23fc36e:	681b      	ldr	r3, [r3, #0]
 23fc370:	6a1b      	ldr	r3, [r3, #32]
 23fc372:	9302      	str	r3, [sp, #8]
 23fc374:	bd09      	pop	{r0, r3, pc}
 23fc376:	0000      	.short	0x0000
 23fc378:	1007aa98 	.word	0x1007aa98
 23fc37c:	0000004c 	.word	0x0000004c

023fc380 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
 23fc380:	b509      	push	{r0, r3, lr}
 23fc382:	4804      	ldr	r0, [pc, #16]	; (23fc394 <inet_htons+0x14>)
 23fc384:	6800      	ldr	r0, [r0, #0]
 23fc386:	4b04      	ldr	r3, [pc, #16]	; (23fc398 <inet_htons+0x18>)
 23fc388:	4403      	add	r3, r0
 23fc38a:	681b      	ldr	r3, [r3, #0]
 23fc38c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fc38e:	9302      	str	r3, [sp, #8]
 23fc390:	bd09      	pop	{r0, r3, pc}
 23fc392:	0000      	.short	0x0000
 23fc394:	1007aa98 	.word	0x1007aa98
 23fc398:	0000004c 	.word	0x0000004c

023fc39c <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 23fc39c:	b509      	push	{r0, r3, lr}
 23fc39e:	4804      	ldr	r0, [pc, #16]	; (23fc3b0 <hal_usart_end+0x14>)
 23fc3a0:	6800      	ldr	r0, [r0, #0]
 23fc3a2:	4b04      	ldr	r3, [pc, #16]	; (23fc3b4 <hal_usart_end+0x18>)
 23fc3a4:	4403      	add	r3, r0
 23fc3a6:	681b      	ldr	r3, [r3, #0]
 23fc3a8:	689b      	ldr	r3, [r3, #8]
 23fc3aa:	9302      	str	r3, [sp, #8]
 23fc3ac:	bd09      	pop	{r0, r3, pc}
 23fc3ae:	0000      	.short	0x0000
 23fc3b0:	1007aa98 	.word	0x1007aa98
 23fc3b4:	00000024 	.word	0x00000024

023fc3b8 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fc3b8:	b509      	push	{r0, r3, lr}
 23fc3ba:	4804      	ldr	r0, [pc, #16]	; (23fc3cc <hal_usart_write+0x14>)
 23fc3bc:	6800      	ldr	r0, [r0, #0]
 23fc3be:	4b04      	ldr	r3, [pc, #16]	; (23fc3d0 <hal_usart_write+0x18>)
 23fc3c0:	4403      	add	r3, r0
 23fc3c2:	681b      	ldr	r3, [r3, #0]
 23fc3c4:	68db      	ldr	r3, [r3, #12]
 23fc3c6:	9302      	str	r3, [sp, #8]
 23fc3c8:	bd09      	pop	{r0, r3, pc}
 23fc3ca:	0000      	.short	0x0000
 23fc3cc:	1007aa98 	.word	0x1007aa98
 23fc3d0:	00000024 	.word	0x00000024

023fc3d4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fc3d4:	b509      	push	{r0, r3, lr}
 23fc3d6:	4804      	ldr	r0, [pc, #16]	; (23fc3e8 <hal_usart_available+0x14>)
 23fc3d8:	6800      	ldr	r0, [r0, #0]
 23fc3da:	4b04      	ldr	r3, [pc, #16]	; (23fc3ec <hal_usart_available+0x18>)
 23fc3dc:	4403      	add	r3, r0
 23fc3de:	681b      	ldr	r3, [r3, #0]
 23fc3e0:	691b      	ldr	r3, [r3, #16]
 23fc3e2:	9302      	str	r3, [sp, #8]
 23fc3e4:	bd09      	pop	{r0, r3, pc}
 23fc3e6:	0000      	.short	0x0000
 23fc3e8:	1007aa98 	.word	0x1007aa98
 23fc3ec:	00000024 	.word	0x00000024

023fc3f0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fc3f0:	b509      	push	{r0, r3, lr}
 23fc3f2:	4804      	ldr	r0, [pc, #16]	; (23fc404 <hal_usart_read+0x14>)
 23fc3f4:	6800      	ldr	r0, [r0, #0]
 23fc3f6:	4b04      	ldr	r3, [pc, #16]	; (23fc408 <hal_usart_read+0x18>)
 23fc3f8:	4403      	add	r3, r0
 23fc3fa:	681b      	ldr	r3, [r3, #0]
 23fc3fc:	695b      	ldr	r3, [r3, #20]
 23fc3fe:	9302      	str	r3, [sp, #8]
 23fc400:	bd09      	pop	{r0, r3, pc}
 23fc402:	0000      	.short	0x0000
 23fc404:	1007aa98 	.word	0x1007aa98
 23fc408:	00000024 	.word	0x00000024

023fc40c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fc40c:	b509      	push	{r0, r3, lr}
 23fc40e:	4804      	ldr	r0, [pc, #16]	; (23fc420 <hal_usart_peek+0x14>)
 23fc410:	6800      	ldr	r0, [r0, #0]
 23fc412:	4b04      	ldr	r3, [pc, #16]	; (23fc424 <hal_usart_peek+0x18>)
 23fc414:	4403      	add	r3, r0
 23fc416:	681b      	ldr	r3, [r3, #0]
 23fc418:	699b      	ldr	r3, [r3, #24]
 23fc41a:	9302      	str	r3, [sp, #8]
 23fc41c:	bd09      	pop	{r0, r3, pc}
 23fc41e:	0000      	.short	0x0000
 23fc420:	1007aa98 	.word	0x1007aa98
 23fc424:	00000024 	.word	0x00000024

023fc428 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fc428:	b509      	push	{r0, r3, lr}
 23fc42a:	4804      	ldr	r0, [pc, #16]	; (23fc43c <hal_usart_flush+0x14>)
 23fc42c:	6800      	ldr	r0, [r0, #0]
 23fc42e:	4b04      	ldr	r3, [pc, #16]	; (23fc440 <hal_usart_flush+0x18>)
 23fc430:	4403      	add	r3, r0
 23fc432:	681b      	ldr	r3, [r3, #0]
 23fc434:	69db      	ldr	r3, [r3, #28]
 23fc436:	9302      	str	r3, [sp, #8]
 23fc438:	bd09      	pop	{r0, r3, pc}
 23fc43a:	0000      	.short	0x0000
 23fc43c:	1007aa98 	.word	0x1007aa98
 23fc440:	00000024 	.word	0x00000024

023fc444 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fc444:	b509      	push	{r0, r3, lr}
 23fc446:	4804      	ldr	r0, [pc, #16]	; (23fc458 <hal_usart_is_enabled+0x14>)
 23fc448:	6800      	ldr	r0, [r0, #0]
 23fc44a:	4b04      	ldr	r3, [pc, #16]	; (23fc45c <hal_usart_is_enabled+0x18>)
 23fc44c:	4403      	add	r3, r0
 23fc44e:	681b      	ldr	r3, [r3, #0]
 23fc450:	6a1b      	ldr	r3, [r3, #32]
 23fc452:	9302      	str	r3, [sp, #8]
 23fc454:	bd09      	pop	{r0, r3, pc}
 23fc456:	0000      	.short	0x0000
 23fc458:	1007aa98 	.word	0x1007aa98
 23fc45c:	00000024 	.word	0x00000024

023fc460 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fc460:	b509      	push	{r0, r3, lr}
 23fc462:	4804      	ldr	r0, [pc, #16]	; (23fc474 <hal_usart_available_data_for_write+0x14>)
 23fc464:	6800      	ldr	r0, [r0, #0]
 23fc466:	4b04      	ldr	r3, [pc, #16]	; (23fc478 <hal_usart_available_data_for_write+0x18>)
 23fc468:	4403      	add	r3, r0
 23fc46a:	681b      	ldr	r3, [r3, #0]
 23fc46c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fc46e:	9302      	str	r3, [sp, #8]
 23fc470:	bd09      	pop	{r0, r3, pc}
 23fc472:	0000      	.short	0x0000
 23fc474:	1007aa98 	.word	0x1007aa98
 23fc478:	00000024 	.word	0x00000024

023fc47c <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 23fc47c:	b509      	push	{r0, r3, lr}
 23fc47e:	4804      	ldr	r0, [pc, #16]	; (23fc490 <hal_usart_begin_config+0x14>)
 23fc480:	6800      	ldr	r0, [r0, #0]
 23fc482:	4b04      	ldr	r3, [pc, #16]	; (23fc494 <hal_usart_begin_config+0x18>)
 23fc484:	4403      	add	r3, r0
 23fc486:	681b      	ldr	r3, [r3, #0]
 23fc488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fc48a:	9302      	str	r3, [sp, #8]
 23fc48c:	bd09      	pop	{r0, r3, pc}
 23fc48e:	0000      	.short	0x0000
 23fc490:	1007aa98 	.word	0x1007aa98
 23fc494:	00000024 	.word	0x00000024

023fc498 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fc498:	b509      	push	{r0, r3, lr}
 23fc49a:	4804      	ldr	r0, [pc, #16]	; (23fc4ac <hal_usart_init_ex+0x14>)
 23fc49c:	6800      	ldr	r0, [r0, #0]
 23fc49e:	4b04      	ldr	r3, [pc, #16]	; (23fc4b0 <hal_usart_init_ex+0x18>)
 23fc4a0:	4403      	add	r3, r0
 23fc4a2:	681b      	ldr	r3, [r3, #0]
 23fc4a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fc4a6:	9302      	str	r3, [sp, #8]
 23fc4a8:	bd09      	pop	{r0, r3, pc}
 23fc4aa:	0000      	.short	0x0000
 23fc4ac:	1007aa98 	.word	0x1007aa98
 23fc4b0:	00000024 	.word	0x00000024

023fc4b4 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 23fc4b4:	b509      	push	{r0, r3, lr}
 23fc4b6:	4804      	ldr	r0, [pc, #16]	; (23fc4c8 <hal_i2c_begin+0x14>)
 23fc4b8:	6800      	ldr	r0, [r0, #0]
 23fc4ba:	4b04      	ldr	r3, [pc, #16]	; (23fc4cc <hal_i2c_begin+0x18>)
 23fc4bc:	4403      	add	r3, r0
 23fc4be:	681b      	ldr	r3, [r3, #0]
 23fc4c0:	68db      	ldr	r3, [r3, #12]
 23fc4c2:	9302      	str	r3, [sp, #8]
 23fc4c4:	bd09      	pop	{r0, r3, pc}
 23fc4c6:	0000      	.short	0x0000
 23fc4c8:	1007aa98 	.word	0x1007aa98
 23fc4cc:	00000010 	.word	0x00000010

023fc4d0 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 23fc4d0:	b509      	push	{r0, r3, lr}
 23fc4d2:	4804      	ldr	r0, [pc, #16]	; (23fc4e4 <hal_i2c_begin_transmission+0x14>)
 23fc4d4:	6800      	ldr	r0, [r0, #0]
 23fc4d6:	4b04      	ldr	r3, [pc, #16]	; (23fc4e8 <hal_i2c_begin_transmission+0x18>)
 23fc4d8:	4403      	add	r3, r0
 23fc4da:	681b      	ldr	r3, [r3, #0]
 23fc4dc:	699b      	ldr	r3, [r3, #24]
 23fc4de:	9302      	str	r3, [sp, #8]
 23fc4e0:	bd09      	pop	{r0, r3, pc}
 23fc4e2:	0000      	.short	0x0000
 23fc4e4:	1007aa98 	.word	0x1007aa98
 23fc4e8:	00000010 	.word	0x00000010

023fc4ec <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 23fc4ec:	b509      	push	{r0, r3, lr}
 23fc4ee:	4804      	ldr	r0, [pc, #16]	; (23fc500 <hal_i2c_end_transmission+0x14>)
 23fc4f0:	6800      	ldr	r0, [r0, #0]
 23fc4f2:	4b04      	ldr	r3, [pc, #16]	; (23fc504 <hal_i2c_end_transmission+0x18>)
 23fc4f4:	4403      	add	r3, r0
 23fc4f6:	681b      	ldr	r3, [r3, #0]
 23fc4f8:	69db      	ldr	r3, [r3, #28]
 23fc4fa:	9302      	str	r3, [sp, #8]
 23fc4fc:	bd09      	pop	{r0, r3, pc}
 23fc4fe:	0000      	.short	0x0000
 23fc500:	1007aa98 	.word	0x1007aa98
 23fc504:	00000010 	.word	0x00000010

023fc508 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23fc508:	b509      	push	{r0, r3, lr}
 23fc50a:	4804      	ldr	r0, [pc, #16]	; (23fc51c <hal_i2c_write+0x14>)
 23fc50c:	6800      	ldr	r0, [r0, #0]
 23fc50e:	4b04      	ldr	r3, [pc, #16]	; (23fc520 <hal_i2c_write+0x18>)
 23fc510:	4403      	add	r3, r0
 23fc512:	681b      	ldr	r3, [r3, #0]
 23fc514:	6a1b      	ldr	r3, [r3, #32]
 23fc516:	9302      	str	r3, [sp, #8]
 23fc518:	bd09      	pop	{r0, r3, pc}
 23fc51a:	0000      	.short	0x0000
 23fc51c:	1007aa98 	.word	0x1007aa98
 23fc520:	00000010 	.word	0x00000010

023fc524 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23fc524:	b509      	push	{r0, r3, lr}
 23fc526:	4804      	ldr	r0, [pc, #16]	; (23fc538 <hal_i2c_available+0x14>)
 23fc528:	6800      	ldr	r0, [r0, #0]
 23fc52a:	4b04      	ldr	r3, [pc, #16]	; (23fc53c <hal_i2c_available+0x18>)
 23fc52c:	4403      	add	r3, r0
 23fc52e:	681b      	ldr	r3, [r3, #0]
 23fc530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fc532:	9302      	str	r3, [sp, #8]
 23fc534:	bd09      	pop	{r0, r3, pc}
 23fc536:	0000      	.short	0x0000
 23fc538:	1007aa98 	.word	0x1007aa98
 23fc53c:	00000010 	.word	0x00000010

023fc540 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23fc540:	b509      	push	{r0, r3, lr}
 23fc542:	4804      	ldr	r0, [pc, #16]	; (23fc554 <hal_i2c_read+0x14>)
 23fc544:	6800      	ldr	r0, [r0, #0]
 23fc546:	4b04      	ldr	r3, [pc, #16]	; (23fc558 <hal_i2c_read+0x18>)
 23fc548:	4403      	add	r3, r0
 23fc54a:	681b      	ldr	r3, [r3, #0]
 23fc54c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fc54e:	9302      	str	r3, [sp, #8]
 23fc550:	bd09      	pop	{r0, r3, pc}
 23fc552:	0000      	.short	0x0000
 23fc554:	1007aa98 	.word	0x1007aa98
 23fc558:	00000010 	.word	0x00000010

023fc55c <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23fc55c:	b509      	push	{r0, r3, lr}
 23fc55e:	4804      	ldr	r0, [pc, #16]	; (23fc570 <hal_i2c_peek+0x14>)
 23fc560:	6800      	ldr	r0, [r0, #0]
 23fc562:	4b04      	ldr	r3, [pc, #16]	; (23fc574 <hal_i2c_peek+0x18>)
 23fc564:	4403      	add	r3, r0
 23fc566:	681b      	ldr	r3, [r3, #0]
 23fc568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fc56a:	9302      	str	r3, [sp, #8]
 23fc56c:	bd09      	pop	{r0, r3, pc}
 23fc56e:	0000      	.short	0x0000
 23fc570:	1007aa98 	.word	0x1007aa98
 23fc574:	00000010 	.word	0x00000010

023fc578 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23fc578:	b509      	push	{r0, r3, lr}
 23fc57a:	4804      	ldr	r0, [pc, #16]	; (23fc58c <hal_i2c_flush+0x14>)
 23fc57c:	6800      	ldr	r0, [r0, #0]
 23fc57e:	4b04      	ldr	r3, [pc, #16]	; (23fc590 <hal_i2c_flush+0x18>)
 23fc580:	4403      	add	r3, r0
 23fc582:	681b      	ldr	r3, [r3, #0]
 23fc584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fc586:	9302      	str	r3, [sp, #8]
 23fc588:	bd09      	pop	{r0, r3, pc}
 23fc58a:	0000      	.short	0x0000
 23fc58c:	1007aa98 	.word	0x1007aa98
 23fc590:	00000010 	.word	0x00000010

023fc594 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23fc594:	b509      	push	{r0, r3, lr}
 23fc596:	4804      	ldr	r0, [pc, #16]	; (23fc5a8 <hal_i2c_is_enabled+0x14>)
 23fc598:	6800      	ldr	r0, [r0, #0]
 23fc59a:	4b04      	ldr	r3, [pc, #16]	; (23fc5ac <hal_i2c_is_enabled+0x18>)
 23fc59c:	4403      	add	r3, r0
 23fc59e:	681b      	ldr	r3, [r3, #0]
 23fc5a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fc5a2:	9302      	str	r3, [sp, #8]
 23fc5a4:	bd09      	pop	{r0, r3, pc}
 23fc5a6:	0000      	.short	0x0000
 23fc5a8:	1007aa98 	.word	0x1007aa98
 23fc5ac:	00000010 	.word	0x00000010

023fc5b0 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23fc5b0:	b509      	push	{r0, r3, lr}
 23fc5b2:	4804      	ldr	r0, [pc, #16]	; (23fc5c4 <hal_i2c_init+0x14>)
 23fc5b4:	6800      	ldr	r0, [r0, #0]
 23fc5b6:	4b04      	ldr	r3, [pc, #16]	; (23fc5c8 <hal_i2c_init+0x18>)
 23fc5b8:	4403      	add	r3, r0
 23fc5ba:	681b      	ldr	r3, [r3, #0]
 23fc5bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fc5be:	9302      	str	r3, [sp, #8]
 23fc5c0:	bd09      	pop	{r0, r3, pc}
 23fc5c2:	0000      	.short	0x0000
 23fc5c4:	1007aa98 	.word	0x1007aa98
 23fc5c8:	00000010 	.word	0x00000010

023fc5cc <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 23fc5cc:	b509      	push	{r0, r3, lr}
 23fc5ce:	4804      	ldr	r0, [pc, #16]	; (23fc5e0 <hal_i2c_request_ex+0x14>)
 23fc5d0:	6800      	ldr	r0, [r0, #0]
 23fc5d2:	4b04      	ldr	r3, [pc, #16]	; (23fc5e4 <hal_i2c_request_ex+0x18>)
 23fc5d4:	4403      	add	r3, r0
 23fc5d6:	681b      	ldr	r3, [r3, #0]
 23fc5d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23fc5da:	9302      	str	r3, [sp, #8]
 23fc5dc:	bd09      	pop	{r0, r3, pc}
 23fc5de:	0000      	.short	0x0000
 23fc5e0:	1007aa98 	.word	0x1007aa98
 23fc5e4:	00000010 	.word	0x00000010

023fc5e8 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
 23fc5e8:	b509      	push	{r0, r3, lr}
 23fc5ea:	4804      	ldr	r0, [pc, #16]	; (23fc5fc <sock_setsockopt+0x14>)
 23fc5ec:	6800      	ldr	r0, [r0, #0]
 23fc5ee:	4b04      	ldr	r3, [pc, #16]	; (23fc600 <sock_setsockopt+0x18>)
 23fc5f0:	4403      	add	r3, r0
 23fc5f2:	681b      	ldr	r3, [r3, #0]
 23fc5f4:	699b      	ldr	r3, [r3, #24]
 23fc5f6:	9302      	str	r3, [sp, #8]
 23fc5f8:	bd09      	pop	{r0, r3, pc}
 23fc5fa:	0000      	.short	0x0000
 23fc5fc:	1007aa98 	.word	0x1007aa98
 23fc600:	00000020 	.word	0x00000020

023fc604 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
 23fc604:	b509      	push	{r0, r3, lr}
 23fc606:	4804      	ldr	r0, [pc, #16]	; (23fc618 <sock_close+0x14>)
 23fc608:	6800      	ldr	r0, [r0, #0]
 23fc60a:	4b04      	ldr	r3, [pc, #16]	; (23fc61c <sock_close+0x18>)
 23fc60c:	4403      	add	r3, r0
 23fc60e:	681b      	ldr	r3, [r3, #0]
 23fc610:	69db      	ldr	r3, [r3, #28]
 23fc612:	9302      	str	r3, [sp, #8]
 23fc614:	bd09      	pop	{r0, r3, pc}
 23fc616:	0000      	.short	0x0000
 23fc618:	1007aa98 	.word	0x1007aa98
 23fc61c:	00000020 	.word	0x00000020

023fc620 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
 23fc620:	b509      	push	{r0, r3, lr}
 23fc622:	4804      	ldr	r0, [pc, #16]	; (23fc634 <sock_connect+0x14>)
 23fc624:	6800      	ldr	r0, [r0, #0]
 23fc626:	4b04      	ldr	r3, [pc, #16]	; (23fc638 <sock_connect+0x18>)
 23fc628:	4403      	add	r3, r0
 23fc62a:	681b      	ldr	r3, [r3, #0]
 23fc62c:	6a1b      	ldr	r3, [r3, #32]
 23fc62e:	9302      	str	r3, [sp, #8]
 23fc630:	bd09      	pop	{r0, r3, pc}
 23fc632:	0000      	.short	0x0000
 23fc634:	1007aa98 	.word	0x1007aa98
 23fc638:	00000020 	.word	0x00000020

023fc63c <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
 23fc63c:	b509      	push	{r0, r3, lr}
 23fc63e:	4804      	ldr	r0, [pc, #16]	; (23fc650 <sock_recv+0x14>)
 23fc640:	6800      	ldr	r0, [r0, #0]
 23fc642:	4b04      	ldr	r3, [pc, #16]	; (23fc654 <sock_recv+0x18>)
 23fc644:	4403      	add	r3, r0
 23fc646:	681b      	ldr	r3, [r3, #0]
 23fc648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fc64a:	9302      	str	r3, [sp, #8]
 23fc64c:	bd09      	pop	{r0, r3, pc}
 23fc64e:	0000      	.short	0x0000
 23fc650:	1007aa98 	.word	0x1007aa98
 23fc654:	00000020 	.word	0x00000020

023fc658 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
 23fc658:	b509      	push	{r0, r3, lr}
 23fc65a:	4804      	ldr	r0, [pc, #16]	; (23fc66c <sock_send+0x14>)
 23fc65c:	6800      	ldr	r0, [r0, #0]
 23fc65e:	4b04      	ldr	r3, [pc, #16]	; (23fc670 <sock_send+0x18>)
 23fc660:	4403      	add	r3, r0
 23fc662:	681b      	ldr	r3, [r3, #0]
 23fc664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fc666:	9302      	str	r3, [sp, #8]
 23fc668:	bd09      	pop	{r0, r3, pc}
 23fc66a:	0000      	.short	0x0000
 23fc66c:	1007aa98 	.word	0x1007aa98
 23fc670:	00000020 	.word	0x00000020

023fc674 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
 23fc674:	b509      	push	{r0, r3, lr}
 23fc676:	4804      	ldr	r0, [pc, #16]	; (23fc688 <sock_socket+0x14>)
 23fc678:	6800      	ldr	r0, [r0, #0]
 23fc67a:	4b04      	ldr	r3, [pc, #16]	; (23fc68c <sock_socket+0x18>)
 23fc67c:	4403      	add	r3, r0
 23fc67e:	681b      	ldr	r3, [r3, #0]
 23fc680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 23fc682:	9302      	str	r3, [sp, #8]
 23fc684:	bd09      	pop	{r0, r3, pc}
 23fc686:	0000      	.short	0x0000
 23fc688:	1007aa98 	.word	0x1007aa98
 23fc68c:	00000020 	.word	0x00000020

023fc690 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23fc690:	b509      	push	{r0, r3, lr}
 23fc692:	4804      	ldr	r0, [pc, #16]	; (23fc6a4 <hal_spi_init+0x14>)
 23fc694:	6800      	ldr	r0, [r0, #0]
 23fc696:	4b04      	ldr	r3, [pc, #16]	; (23fc6a8 <hal_spi_init+0x18>)
 23fc698:	4403      	add	r3, r0
 23fc69a:	681b      	ldr	r3, [r3, #0]
 23fc69c:	69db      	ldr	r3, [r3, #28]
 23fc69e:	9302      	str	r3, [sp, #8]
 23fc6a0:	bd09      	pop	{r0, r3, pc}
 23fc6a2:	0000      	.short	0x0000
 23fc6a4:	1007aa98 	.word	0x1007aa98
 23fc6a8:	00000018 	.word	0x00000018

023fc6ac <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23fc6ac:	b509      	push	{r0, r3, lr}
 23fc6ae:	4804      	ldr	r0, [pc, #16]	; (23fc6c0 <hal_spi_is_enabled+0x14>)
 23fc6b0:	6800      	ldr	r0, [r0, #0]
 23fc6b2:	4b04      	ldr	r3, [pc, #16]	; (23fc6c4 <hal_spi_is_enabled+0x18>)
 23fc6b4:	4403      	add	r3, r0
 23fc6b6:	681b      	ldr	r3, [r3, #0]
 23fc6b8:	6a1b      	ldr	r3, [r3, #32]
 23fc6ba:	9302      	str	r3, [sp, #8]
 23fc6bc:	bd09      	pop	{r0, r3, pc}
 23fc6be:	0000      	.short	0x0000
 23fc6c0:	1007aa98 	.word	0x1007aa98
 23fc6c4:	00000018 	.word	0x00000018

023fc6c8 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fc6c8:	b509      	push	{r0, r3, lr}
 23fc6ca:	4804      	ldr	r0, [pc, #16]	; (23fc6dc <HAL_USB_USART_Init+0x14>)
 23fc6cc:	6800      	ldr	r0, [r0, #0]
 23fc6ce:	4b04      	ldr	r3, [pc, #16]	; (23fc6e0 <HAL_USB_USART_Init+0x18>)
 23fc6d0:	4403      	add	r3, r0
 23fc6d2:	681b      	ldr	r3, [r3, #0]
 23fc6d4:	681b      	ldr	r3, [r3, #0]
 23fc6d6:	9302      	str	r3, [sp, #8]
 23fc6d8:	bd09      	pop	{r0, r3, pc}
 23fc6da:	0000      	.short	0x0000
 23fc6dc:	1007aa98 	.word	0x1007aa98
 23fc6e0:	00000034 	.word	0x00000034

023fc6e4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23fc6e4:	b509      	push	{r0, r3, lr}
 23fc6e6:	4804      	ldr	r0, [pc, #16]	; (23fc6f8 <HAL_USB_USART_Begin+0x14>)
 23fc6e8:	6800      	ldr	r0, [r0, #0]
 23fc6ea:	4b04      	ldr	r3, [pc, #16]	; (23fc6fc <HAL_USB_USART_Begin+0x18>)
 23fc6ec:	4403      	add	r3, r0
 23fc6ee:	681b      	ldr	r3, [r3, #0]
 23fc6f0:	685b      	ldr	r3, [r3, #4]
 23fc6f2:	9302      	str	r3, [sp, #8]
 23fc6f4:	bd09      	pop	{r0, r3, pc}
 23fc6f6:	0000      	.short	0x0000
 23fc6f8:	1007aa98 	.word	0x1007aa98
 23fc6fc:	00000034 	.word	0x00000034

023fc700 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 23fc700:	b509      	push	{r0, r3, lr}
 23fc702:	4804      	ldr	r0, [pc, #16]	; (23fc714 <HAL_USB_USART_End+0x14>)
 23fc704:	6800      	ldr	r0, [r0, #0]
 23fc706:	4b04      	ldr	r3, [pc, #16]	; (23fc718 <HAL_USB_USART_End+0x18>)
 23fc708:	4403      	add	r3, r0
 23fc70a:	681b      	ldr	r3, [r3, #0]
 23fc70c:	689b      	ldr	r3, [r3, #8]
 23fc70e:	9302      	str	r3, [sp, #8]
 23fc710:	bd09      	pop	{r0, r3, pc}
 23fc712:	0000      	.short	0x0000
 23fc714:	1007aa98 	.word	0x1007aa98
 23fc718:	00000034 	.word	0x00000034

023fc71c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN_WRAP(4, hal_usb, HAL_USB_USART_Available_Data, protected, int32_t(HAL_USB_USART_Serial))
 23fc71c:	b509      	push	{r0, r3, lr}
 23fc71e:	4804      	ldr	r0, [pc, #16]	; (23fc730 <HAL_USB_USART_Available_Data+0x14>)
 23fc720:	6800      	ldr	r0, [r0, #0]
 23fc722:	4b04      	ldr	r3, [pc, #16]	; (23fc734 <HAL_USB_USART_Available_Data+0x18>)
 23fc724:	4403      	add	r3, r0
 23fc726:	681b      	ldr	r3, [r3, #0]
 23fc728:	691b      	ldr	r3, [r3, #16]
 23fc72a:	9302      	str	r3, [sp, #8]
 23fc72c:	bd09      	pop	{r0, r3, pc}
 23fc72e:	0000      	.short	0x0000
 23fc730:	1007aa98 	.word	0x1007aa98
 23fc734:	00000034 	.word	0x00000034

023fc738 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN_WRAP(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, protected, int32_t(HAL_USB_USART_Serial))
 23fc738:	b509      	push	{r0, r3, lr}
 23fc73a:	4804      	ldr	r0, [pc, #16]	; (23fc74c <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fc73c:	6800      	ldr	r0, [r0, #0]
 23fc73e:	4b04      	ldr	r3, [pc, #16]	; (23fc750 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fc740:	4403      	add	r3, r0
 23fc742:	681b      	ldr	r3, [r3, #0]
 23fc744:	695b      	ldr	r3, [r3, #20]
 23fc746:	9302      	str	r3, [sp, #8]
 23fc748:	bd09      	pop	{r0, r3, pc}
 23fc74a:	0000      	.short	0x0000
 23fc74c:	1007aa98 	.word	0x1007aa98
 23fc750:	00000034 	.word	0x00000034

023fc754 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN_WRAP(6, hal_usb, HAL_USB_USART_Receive_Data, protected, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fc754:	b509      	push	{r0, r3, lr}
 23fc756:	4804      	ldr	r0, [pc, #16]	; (23fc768 <HAL_USB_USART_Receive_Data+0x14>)
 23fc758:	6800      	ldr	r0, [r0, #0]
 23fc75a:	4b04      	ldr	r3, [pc, #16]	; (23fc76c <HAL_USB_USART_Receive_Data+0x18>)
 23fc75c:	4403      	add	r3, r0
 23fc75e:	681b      	ldr	r3, [r3, #0]
 23fc760:	699b      	ldr	r3, [r3, #24]
 23fc762:	9302      	str	r3, [sp, #8]
 23fc764:	bd09      	pop	{r0, r3, pc}
 23fc766:	0000      	.short	0x0000
 23fc768:	1007aa98 	.word	0x1007aa98
 23fc76c:	00000034 	.word	0x00000034

023fc770 <HAL_USB_USART_Send_Data>:
DYNALIB_FN_WRAP(7, hal_usb, HAL_USB_USART_Send_Data, protected, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fc770:	b509      	push	{r0, r3, lr}
 23fc772:	4804      	ldr	r0, [pc, #16]	; (23fc784 <HAL_USB_USART_Send_Data+0x14>)
 23fc774:	6800      	ldr	r0, [r0, #0]
 23fc776:	4b04      	ldr	r3, [pc, #16]	; (23fc788 <HAL_USB_USART_Send_Data+0x18>)
 23fc778:	4403      	add	r3, r0
 23fc77a:	681b      	ldr	r3, [r3, #0]
 23fc77c:	69db      	ldr	r3, [r3, #28]
 23fc77e:	9302      	str	r3, [sp, #8]
 23fc780:	bd09      	pop	{r0, r3, pc}
 23fc782:	0000      	.short	0x0000
 23fc784:	1007aa98 	.word	0x1007aa98
 23fc788:	00000034 	.word	0x00000034

023fc78c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN_WRAP(8, hal_usb, HAL_USB_USART_Flush_Data, protected, void(HAL_USB_USART_Serial))
 23fc78c:	b509      	push	{r0, r3, lr}
 23fc78e:	4804      	ldr	r0, [pc, #16]	; (23fc7a0 <HAL_USB_USART_Flush_Data+0x14>)
 23fc790:	6800      	ldr	r0, [r0, #0]
 23fc792:	4b04      	ldr	r3, [pc, #16]	; (23fc7a4 <HAL_USB_USART_Flush_Data+0x18>)
 23fc794:	4403      	add	r3, r0
 23fc796:	681b      	ldr	r3, [r3, #0]
 23fc798:	6a1b      	ldr	r3, [r3, #32]
 23fc79a:	9302      	str	r3, [sp, #8]
 23fc79c:	bd09      	pop	{r0, r3, pc}
 23fc79e:	0000      	.short	0x0000
 23fc7a0:	1007aa98 	.word	0x1007aa98
 23fc7a4:	00000034 	.word	0x00000034

023fc7a8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 23fc7a8:	b509      	push	{r0, r3, lr}
 23fc7aa:	4804      	ldr	r0, [pc, #16]	; (23fc7bc <log_message+0x14>)
 23fc7ac:	6800      	ldr	r0, [r0, #0]
 23fc7ae:	4b04      	ldr	r3, [pc, #16]	; (23fc7c0 <log_message+0x18>)
 23fc7b0:	4403      	add	r3, r0
 23fc7b2:	681b      	ldr	r3, [r3, #0]
 23fc7b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23fc7b6:	9302      	str	r3, [sp, #8]
 23fc7b8:	bd09      	pop	{r0, r3, pc}
 23fc7ba:	0000      	.short	0x0000
 23fc7bc:	1007aa98 	.word	0x1007aa98
 23fc7c0:	00000048 	.word	0x00000048

023fc7c4 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 23fc7c4:	b509      	push	{r0, r3, lr}
 23fc7c6:	4804      	ldr	r0, [pc, #16]	; (23fc7d8 <log_message_v+0x14>)
 23fc7c8:	6800      	ldr	r0, [r0, #0]
 23fc7ca:	4b04      	ldr	r3, [pc, #16]	; (23fc7dc <log_message_v+0x18>)
 23fc7cc:	4403      	add	r3, r0
 23fc7ce:	681b      	ldr	r3, [r3, #0]
 23fc7d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fc7d2:	9302      	str	r3, [sp, #8]
 23fc7d4:	bd09      	pop	{r0, r3, pc}
 23fc7d6:	0000      	.short	0x0000
 23fc7d8:	1007aa98 	.word	0x1007aa98
 23fc7dc:	00000048 	.word	0x00000048

023fc7e0 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 23fc7e0:	b509      	push	{r0, r3, lr}
 23fc7e2:	4804      	ldr	r0, [pc, #16]	; (23fc7f4 <log_level_name+0x14>)
 23fc7e4:	6800      	ldr	r0, [r0, #0]
 23fc7e6:	4b04      	ldr	r3, [pc, #16]	; (23fc7f8 <log_level_name+0x18>)
 23fc7e8:	4403      	add	r3, r0
 23fc7ea:	681b      	ldr	r3, [r3, #0]
 23fc7ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 23fc7ee:	9302      	str	r3, [sp, #8]
 23fc7f0:	bd09      	pop	{r0, r3, pc}
 23fc7f2:	0000      	.short	0x0000
 23fc7f4:	1007aa98 	.word	0x1007aa98
 23fc7f8:	00000048 	.word	0x00000048

023fc7fc <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 23fc7fc:	b509      	push	{r0, r3, lr}
 23fc7fe:	4804      	ldr	r0, [pc, #16]	; (23fc810 <log_set_callbacks+0x14>)
 23fc800:	6800      	ldr	r0, [r0, #0]
 23fc802:	4b04      	ldr	r3, [pc, #16]	; (23fc814 <log_set_callbacks+0x18>)
 23fc804:	4403      	add	r3, r0
 23fc806:	681b      	ldr	r3, [r3, #0]
 23fc808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 23fc80a:	9302      	str	r3, [sp, #8]
 23fc80c:	bd09      	pop	{r0, r3, pc}
 23fc80e:	0000      	.short	0x0000
 23fc810:	1007aa98 	.word	0x1007aa98
 23fc814:	00000048 	.word	0x00000048

023fc818 <panic_ext>:
DYNALIB_FN(48, services, devicetree_tree_lock, int(void*))
DYNALIB_FN(49, services, devicetree_tree_get, int(void*, uint32_t, void*))
DYNALIB_FN(50, services, devicetree_string_dictionary_lookup, const char*(uint32_t, void*))
DYNALIB_FN(51, services, devicetree_hash_string, uint32_t(const char*, size_t))
DYNALIB_FN(52, services, security_mode_get, int(void*))
DYNALIB_FN(53, services, panic_ext, void(const PanicData*, void*))
 23fc818:	b509      	push	{r0, r3, lr}
 23fc81a:	4804      	ldr	r0, [pc, #16]	; (23fc82c <panic_ext+0x14>)
 23fc81c:	6800      	ldr	r0, [r0, #0]
 23fc81e:	4b04      	ldr	r3, [pc, #16]	; (23fc830 <panic_ext+0x18>)
 23fc820:	4403      	add	r3, r0
 23fc822:	681b      	ldr	r3, [r3, #0]
 23fc824:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 23fc828:	9302      	str	r3, [sp, #8]
 23fc82a:	bd09      	pop	{r0, r3, pc}
 23fc82c:	1007aa98 	.word	0x1007aa98
 23fc830:	00000048 	.word	0x00000048

023fc834 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23fc834:	b509      	push	{r0, r3, lr}
 23fc836:	4804      	ldr	r0, [pc, #16]	; (23fc848 <set_system_mode+0x14>)
 23fc838:	6800      	ldr	r0, [r0, #0]
 23fc83a:	4b04      	ldr	r3, [pc, #16]	; (23fc84c <set_system_mode+0x18>)
 23fc83c:	4403      	add	r3, r0
 23fc83e:	681b      	ldr	r3, [r3, #0]
 23fc840:	685b      	ldr	r3, [r3, #4]
 23fc842:	9302      	str	r3, [sp, #8]
 23fc844:	bd09      	pop	{r0, r3, pc}
 23fc846:	0000      	.short	0x0000
 23fc848:	1007aa98 	.word	0x1007aa98
 23fc84c:	00000008 	.word	0x00000008

023fc850 <system_subscribe_event>:
DYNALIB_FN(4, system, system_fileTransfer_deprecated, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
 23fc850:	b509      	push	{r0, r3, lr}
 23fc852:	4804      	ldr	r0, [pc, #16]	; (23fc864 <system_subscribe_event+0x14>)
 23fc854:	6800      	ldr	r0, [r0, #0]
 23fc856:	4b04      	ldr	r3, [pc, #16]	; (23fc868 <system_subscribe_event+0x18>)
 23fc858:	4403      	add	r3, r0
 23fc85a:	681b      	ldr	r3, [r3, #0]
 23fc85c:	6a1b      	ldr	r3, [r3, #32]
 23fc85e:	9302      	str	r3, [sp, #8]
 23fc860:	bd09      	pop	{r0, r3, pc}
 23fc862:	0000      	.short	0x0000
 23fc864:	1007aa98 	.word	0x1007aa98
 23fc868:	00000008 	.word	0x00000008

023fc86c <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 23fc86c:	b509      	push	{r0, r3, lr}
 23fc86e:	4804      	ldr	r0, [pc, #16]	; (23fc880 <system_thread_set_state+0x14>)
 23fc870:	6800      	ldr	r0, [r0, #0]
 23fc872:	4b04      	ldr	r3, [pc, #16]	; (23fc884 <system_thread_set_state+0x18>)
 23fc874:	4403      	add	r3, r0
 23fc876:	681b      	ldr	r3, [r3, #0]
 23fc878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fc87a:	9302      	str	r3, [sp, #8]
 23fc87c:	bd09      	pop	{r0, r3, pc}
 23fc87e:	0000      	.short	0x0000
 23fc880:	1007aa98 	.word	0x1007aa98
 23fc884:	00000008 	.word	0x00000008

023fc888 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fc888:	b509      	push	{r0, r3, lr}
 23fc88a:	4804      	ldr	r0, [pc, #16]	; (23fc89c <system_ctrl_set_app_request_handler+0x14>)
 23fc88c:	6800      	ldr	r0, [r0, #0]
 23fc88e:	4b04      	ldr	r3, [pc, #16]	; (23fc8a0 <system_ctrl_set_app_request_handler+0x18>)
 23fc890:	4403      	add	r3, r0
 23fc892:	681b      	ldr	r3, [r3, #0]
 23fc894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fc898:	9302      	str	r3, [sp, #8]
 23fc89a:	bd09      	pop	{r0, r3, pc}
 23fc89c:	1007aa98 	.word	0x1007aa98
 23fc8a0:	00000008 	.word	0x00000008

023fc8a4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fc8a4:	b509      	push	{r0, r3, lr}
 23fc8a6:	4804      	ldr	r0, [pc, #16]	; (23fc8b8 <system_ctrl_set_result+0x14>)
 23fc8a8:	6800      	ldr	r0, [r0, #0]
 23fc8aa:	4b04      	ldr	r3, [pc, #16]	; (23fc8bc <system_ctrl_set_result+0x18>)
 23fc8ac:	4403      	add	r3, r0
 23fc8ae:	681b      	ldr	r3, [r3, #0]
 23fc8b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fc8b4:	9302      	str	r3, [sp, #8]
 23fc8b6:	bd09      	pop	{r0, r3, pc}
 23fc8b8:	1007aa98 	.word	0x1007aa98
 23fc8bc:	00000008 	.word	0x00000008

023fc8c0 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
 23fc8c0:	b509      	push	{r0, r3, lr}
 23fc8c2:	4804      	ldr	r0, [pc, #16]	; (23fc8d4 <system_reset+0x14>)
 23fc8c4:	6800      	ldr	r0, [r0, #0]
 23fc8c6:	4b04      	ldr	r3, [pc, #16]	; (23fc8d8 <system_reset+0x18>)
 23fc8c8:	4403      	add	r3, r0
 23fc8ca:	681b      	ldr	r3, [r3, #0]
 23fc8cc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 23fc8d0:	9302      	str	r3, [sp, #8]
 23fc8d2:	bd09      	pop	{r0, r3, pc}
 23fc8d4:	1007aa98 	.word	0x1007aa98
 23fc8d8:	00000008 	.word	0x00000008

023fc8dc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fc8dc:	b509      	push	{r0, r3, lr}
 23fc8de:	4804      	ldr	r0, [pc, #16]	; (23fc8f0 <network_connect+0x14>)
 23fc8e0:	6800      	ldr	r0, [r0, #0]
 23fc8e2:	4b04      	ldr	r3, [pc, #16]	; (23fc8f4 <network_connect+0x18>)
 23fc8e4:	4403      	add	r3, r0
 23fc8e6:	681b      	ldr	r3, [r3, #0]
 23fc8e8:	685b      	ldr	r3, [r3, #4]
 23fc8ea:	9302      	str	r3, [sp, #8]
 23fc8ec:	bd09      	pop	{r0, r3, pc}
 23fc8ee:	0000      	.short	0x0000
 23fc8f0:	1007aa98 	.word	0x1007aa98
 23fc8f4:	00000028 	.word	0x00000028

023fc8f8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fc8f8:	b509      	push	{r0, r3, lr}
 23fc8fa:	4804      	ldr	r0, [pc, #16]	; (23fc90c <network_connecting+0x14>)
 23fc8fc:	6800      	ldr	r0, [r0, #0]
 23fc8fe:	4b04      	ldr	r3, [pc, #16]	; (23fc910 <network_connecting+0x18>)
 23fc900:	4403      	add	r3, r0
 23fc902:	681b      	ldr	r3, [r3, #0]
 23fc904:	689b      	ldr	r3, [r3, #8]
 23fc906:	9302      	str	r3, [sp, #8]
 23fc908:	bd09      	pop	{r0, r3, pc}
 23fc90a:	0000      	.short	0x0000
 23fc90c:	1007aa98 	.word	0x1007aa98
 23fc910:	00000028 	.word	0x00000028

023fc914 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23fc914:	b509      	push	{r0, r3, lr}
 23fc916:	4804      	ldr	r0, [pc, #16]	; (23fc928 <network_disconnect+0x14>)
 23fc918:	6800      	ldr	r0, [r0, #0]
 23fc91a:	4b04      	ldr	r3, [pc, #16]	; (23fc92c <network_disconnect+0x18>)
 23fc91c:	4403      	add	r3, r0
 23fc91e:	681b      	ldr	r3, [r3, #0]
 23fc920:	68db      	ldr	r3, [r3, #12]
 23fc922:	9302      	str	r3, [sp, #8]
 23fc924:	bd09      	pop	{r0, r3, pc}
 23fc926:	0000      	.short	0x0000
 23fc928:	1007aa98 	.word	0x1007aa98
 23fc92c:	00000028 	.word	0x00000028

023fc930 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23fc930:	b509      	push	{r0, r3, lr}
 23fc932:	4804      	ldr	r0, [pc, #16]	; (23fc944 <network_ready+0x14>)
 23fc934:	6800      	ldr	r0, [r0, #0]
 23fc936:	4b04      	ldr	r3, [pc, #16]	; (23fc948 <network_ready+0x18>)
 23fc938:	4403      	add	r3, r0
 23fc93a:	681b      	ldr	r3, [r3, #0]
 23fc93c:	691b      	ldr	r3, [r3, #16]
 23fc93e:	9302      	str	r3, [sp, #8]
 23fc940:	bd09      	pop	{r0, r3, pc}
 23fc942:	0000      	.short	0x0000
 23fc944:	1007aa98 	.word	0x1007aa98
 23fc948:	00000028 	.word	0x00000028

023fc94c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23fc94c:	b509      	push	{r0, r3, lr}
 23fc94e:	4804      	ldr	r0, [pc, #16]	; (23fc960 <network_on+0x14>)
 23fc950:	6800      	ldr	r0, [r0, #0]
 23fc952:	4b04      	ldr	r3, [pc, #16]	; (23fc964 <network_on+0x18>)
 23fc954:	4403      	add	r3, r0
 23fc956:	681b      	ldr	r3, [r3, #0]
 23fc958:	695b      	ldr	r3, [r3, #20]
 23fc95a:	9302      	str	r3, [sp, #8]
 23fc95c:	bd09      	pop	{r0, r3, pc}
 23fc95e:	0000      	.short	0x0000
 23fc960:	1007aa98 	.word	0x1007aa98
 23fc964:	00000028 	.word	0x00000028

023fc968 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fc968:	b509      	push	{r0, r3, lr}
 23fc96a:	4804      	ldr	r0, [pc, #16]	; (23fc97c <network_off+0x14>)
 23fc96c:	6800      	ldr	r0, [r0, #0]
 23fc96e:	4b04      	ldr	r3, [pc, #16]	; (23fc980 <network_off+0x18>)
 23fc970:	4403      	add	r3, r0
 23fc972:	681b      	ldr	r3, [r3, #0]
 23fc974:	699b      	ldr	r3, [r3, #24]
 23fc976:	9302      	str	r3, [sp, #8]
 23fc978:	bd09      	pop	{r0, r3, pc}
 23fc97a:	0000      	.short	0x0000
 23fc97c:	1007aa98 	.word	0x1007aa98
 23fc980:	00000028 	.word	0x00000028

023fc984 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fc984:	b509      	push	{r0, r3, lr}
 23fc986:	4804      	ldr	r0, [pc, #16]	; (23fc998 <network_listen+0x14>)
 23fc988:	6800      	ldr	r0, [r0, #0]
 23fc98a:	4b04      	ldr	r3, [pc, #16]	; (23fc99c <network_listen+0x18>)
 23fc98c:	4403      	add	r3, r0
 23fc98e:	681b      	ldr	r3, [r3, #0]
 23fc990:	69db      	ldr	r3, [r3, #28]
 23fc992:	9302      	str	r3, [sp, #8]
 23fc994:	bd09      	pop	{r0, r3, pc}
 23fc996:	0000      	.short	0x0000
 23fc998:	1007aa98 	.word	0x1007aa98
 23fc99c:	00000028 	.word	0x00000028

023fc9a0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fc9a0:	b509      	push	{r0, r3, lr}
 23fc9a2:	4804      	ldr	r0, [pc, #16]	; (23fc9b4 <network_listening+0x14>)
 23fc9a4:	6800      	ldr	r0, [r0, #0]
 23fc9a6:	4b04      	ldr	r3, [pc, #16]	; (23fc9b8 <network_listening+0x18>)
 23fc9a8:	4403      	add	r3, r0
 23fc9aa:	681b      	ldr	r3, [r3, #0]
 23fc9ac:	6a1b      	ldr	r3, [r3, #32]
 23fc9ae:	9302      	str	r3, [sp, #8]
 23fc9b0:	bd09      	pop	{r0, r3, pc}
 23fc9b2:	0000      	.short	0x0000
 23fc9b4:	1007aa98 	.word	0x1007aa98
 23fc9b8:	00000028 	.word	0x00000028

023fc9bc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fc9bc:	b509      	push	{r0, r3, lr}
 23fc9be:	4804      	ldr	r0, [pc, #16]	; (23fc9d0 <network_set_listen_timeout+0x14>)
 23fc9c0:	6800      	ldr	r0, [r0, #0]
 23fc9c2:	4b04      	ldr	r3, [pc, #16]	; (23fc9d4 <network_set_listen_timeout+0x18>)
 23fc9c4:	4403      	add	r3, r0
 23fc9c6:	681b      	ldr	r3, [r3, #0]
 23fc9c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fc9ca:	9302      	str	r3, [sp, #8]
 23fc9cc:	bd09      	pop	{r0, r3, pc}
 23fc9ce:	0000      	.short	0x0000
 23fc9d0:	1007aa98 	.word	0x1007aa98
 23fc9d4:	00000028 	.word	0x00000028

023fc9d8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fc9d8:	b509      	push	{r0, r3, lr}
 23fc9da:	4804      	ldr	r0, [pc, #16]	; (23fc9ec <network_get_listen_timeout+0x14>)
 23fc9dc:	6800      	ldr	r0, [r0, #0]
 23fc9de:	4b04      	ldr	r3, [pc, #16]	; (23fc9f0 <network_get_listen_timeout+0x18>)
 23fc9e0:	4403      	add	r3, r0
 23fc9e2:	681b      	ldr	r3, [r3, #0]
 23fc9e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fc9e6:	9302      	str	r3, [sp, #8]
 23fc9e8:	bd09      	pop	{r0, r3, pc}
 23fc9ea:	0000      	.short	0x0000
 23fc9ec:	1007aa98 	.word	0x1007aa98
 23fc9f0:	00000028 	.word	0x00000028

023fc9f4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fc9f4:	b509      	push	{r0, r3, lr}
 23fc9f6:	4804      	ldr	r0, [pc, #16]	; (23fca08 <network_is_on+0x14>)
 23fc9f8:	6800      	ldr	r0, [r0, #0]
 23fc9fa:	4b04      	ldr	r3, [pc, #16]	; (23fca0c <network_is_on+0x18>)
 23fc9fc:	4403      	add	r3, r0
 23fc9fe:	681b      	ldr	r3, [r3, #0]
 23fca00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fca02:	9302      	str	r3, [sp, #8]
 23fca04:	bd09      	pop	{r0, r3, pc}
 23fca06:	0000      	.short	0x0000
 23fca08:	1007aa98 	.word	0x1007aa98
 23fca0c:	00000028 	.word	0x00000028

023fca10 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fca10:	b509      	push	{r0, r3, lr}
 23fca12:	4804      	ldr	r0, [pc, #16]	; (23fca24 <network_is_off+0x14>)
 23fca14:	6800      	ldr	r0, [r0, #0]
 23fca16:	4b04      	ldr	r3, [pc, #16]	; (23fca28 <network_is_off+0x18>)
 23fca18:	4403      	add	r3, r0
 23fca1a:	681b      	ldr	r3, [r3, #0]
 23fca1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fca1e:	9302      	str	r3, [sp, #8]
 23fca20:	bd09      	pop	{r0, r3, pc}
 23fca22:	0000      	.short	0x0000
 23fca24:	1007aa98 	.word	0x1007aa98
 23fca28:	00000028 	.word	0x00000028

023fca2c <network_prefer>:
DYNALIB_FN(18, system_net, network_set_configuration, int(network_handle_t, const network_configuration_t*, void*))
DYNALIB_FN(19, system_net, network_get_configuration, int(network_handle_t, network_configuration_t**, size_t*, const char*, size_t, void*))
DYNALIB_FN(20, system_net, network_free_configuration, int(network_configuration_t*, size_t, void*))
DYNALIB_FN(21, system_net, network_prefer, network_handle_t(network_handle_t, bool, void*))
 23fca2c:	b509      	push	{r0, r3, lr}
 23fca2e:	4804      	ldr	r0, [pc, #16]	; (23fca40 <network_prefer+0x14>)
 23fca30:	6800      	ldr	r0, [r0, #0]
 23fca32:	4b04      	ldr	r3, [pc, #16]	; (23fca44 <network_prefer+0x18>)
 23fca34:	4403      	add	r3, r0
 23fca36:	681b      	ldr	r3, [r3, #0]
 23fca38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fca3a:	9302      	str	r3, [sp, #8]
 23fca3c:	bd09      	pop	{r0, r3, pc}
 23fca3e:	0000      	.short	0x0000
 23fca40:	1007aa98 	.word	0x1007aa98
 23fca44:	00000028 	.word	0x00000028

023fca48 <network_is_preferred>:
DYNALIB_FN(22, system_net, network_is_preferred, bool(network_handle_t, void*))
 23fca48:	b509      	push	{r0, r3, lr}
 23fca4a:	4804      	ldr	r0, [pc, #16]	; (23fca5c <network_is_preferred+0x14>)
 23fca4c:	6800      	ldr	r0, [r0, #0]
 23fca4e:	4b04      	ldr	r3, [pc, #16]	; (23fca60 <network_is_preferred+0x18>)
 23fca50:	4403      	add	r3, r0
 23fca52:	681b      	ldr	r3, [r3, #0]
 23fca54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23fca56:	9302      	str	r3, [sp, #8]
 23fca58:	bd09      	pop	{r0, r3, pc}
 23fca5a:	0000      	.short	0x0000
 23fca5c:	1007aa98 	.word	0x1007aa98
 23fca60:	00000028 	.word	0x00000028

023fca64 <spark_cloud_flag_connect>:
DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 23fca64:	b509      	push	{r0, r3, lr}
 23fca66:	4804      	ldr	r0, [pc, #16]	; (23fca78 <spark_cloud_flag_connect+0x14>)
 23fca68:	6800      	ldr	r0, [r0, #0]
 23fca6a:	4b04      	ldr	r3, [pc, #16]	; (23fca7c <spark_cloud_flag_connect+0x18>)
 23fca6c:	4403      	add	r3, r0
 23fca6e:	681b      	ldr	r3, [r3, #0]
 23fca70:	68db      	ldr	r3, [r3, #12]
 23fca72:	9302      	str	r3, [sp, #8]
 23fca74:	bd09      	pop	{r0, r3, pc}
 23fca76:	0000      	.short	0x0000
 23fca78:	1007aa98 	.word	0x1007aa98
 23fca7c:	0000002c 	.word	0x0000002c

023fca80 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fca80:	b509      	push	{r0, r3, lr}
 23fca82:	4804      	ldr	r0, [pc, #16]	; (23fca94 <spark_set_random_seed_from_cloud_handler+0x14>)
 23fca84:	6800      	ldr	r0, [r0, #0]
 23fca86:	4b04      	ldr	r3, [pc, #16]	; (23fca98 <spark_set_random_seed_from_cloud_handler+0x18>)
 23fca88:	4403      	add	r3, r0
 23fca8a:	681b      	ldr	r3, [r3, #0]
 23fca8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fca8e:	9302      	str	r3, [sp, #8]
 23fca90:	bd09      	pop	{r0, r3, pc}
 23fca92:	0000      	.short	0x0000
 23fca94:	1007aa98 	.word	0x1007aa98
 23fca98:	0000002c 	.word	0x0000002c

023fca9c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || defined(DYNALIB_IMPORT)

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fca9c:	b509      	push	{r0, r3, lr}
 23fca9e:	4804      	ldr	r0, [pc, #16]	; (23fcab0 <malloc+0x14>)
 23fcaa0:	6800      	ldr	r0, [r0, #0]
 23fcaa2:	4b04      	ldr	r3, [pc, #16]	; (23fcab4 <malloc+0x18>)
 23fcaa4:	4403      	add	r3, r0
 23fcaa6:	681b      	ldr	r3, [r3, #0]
 23fcaa8:	681b      	ldr	r3, [r3, #0]
 23fcaaa:	9302      	str	r3, [sp, #8]
 23fcaac:	bd09      	pop	{r0, r3, pc}
 23fcaae:	0000      	.short	0x0000
 23fcab0:	1007aa98 	.word	0x1007aa98
 23fcab4:	00000004 	.word	0x00000004

023fcab8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fcab8:	b509      	push	{r0, r3, lr}
 23fcaba:	4804      	ldr	r0, [pc, #16]	; (23fcacc <free+0x14>)
 23fcabc:	6800      	ldr	r0, [r0, #0]
 23fcabe:	4b04      	ldr	r3, [pc, #16]	; (23fcad0 <free+0x18>)
 23fcac0:	4403      	add	r3, r0
 23fcac2:	681b      	ldr	r3, [r3, #0]
 23fcac4:	685b      	ldr	r3, [r3, #4]
 23fcac6:	9302      	str	r3, [sp, #8]
 23fcac8:	bd09      	pop	{r0, r3, pc}
 23fcaca:	0000      	.short	0x0000
 23fcacc:	1007aa98 	.word	0x1007aa98
 23fcad0:	00000004 	.word	0x00000004

023fcad4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23fcad4:	b509      	push	{r0, r3, lr}
 23fcad6:	4804      	ldr	r0, [pc, #16]	; (23fcae8 <realloc+0x14>)
 23fcad8:	6800      	ldr	r0, [r0, #0]
 23fcada:	4b04      	ldr	r3, [pc, #16]	; (23fcaec <realloc+0x18>)
 23fcadc:	4403      	add	r3, r0
 23fcade:	681b      	ldr	r3, [r3, #0]
 23fcae0:	689b      	ldr	r3, [r3, #8]
 23fcae2:	9302      	str	r3, [sp, #8]
 23fcae4:	bd09      	pop	{r0, r3, pc}
 23fcae6:	0000      	.short	0x0000
 23fcae8:	1007aa98 	.word	0x1007aa98
 23fcaec:	00000004 	.word	0x00000004

023fcaf0 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23fcaf0:	b509      	push	{r0, r3, lr}
 23fcaf2:	4804      	ldr	r0, [pc, #16]	; (23fcb04 <vsnprintf+0x14>)
 23fcaf4:	6800      	ldr	r0, [r0, #0]
 23fcaf6:	4b04      	ldr	r3, [pc, #16]	; (23fcb08 <vsnprintf+0x18>)
 23fcaf8:	4403      	add	r3, r0
 23fcafa:	681b      	ldr	r3, [r3, #0]
 23fcafc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fcafe:	9302      	str	r3, [sp, #8]
 23fcb00:	bd09      	pop	{r0, r3, pc}
 23fcb02:	0000      	.short	0x0000
 23fcb04:	1007aa98 	.word	0x1007aa98
 23fcb08:	00000004 	.word	0x00000004

023fcb0c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 23fcb0c:	b509      	push	{r0, r3, lr}
 23fcb0e:	4804      	ldr	r0, [pc, #16]	; (23fcb20 <abort+0x14>)
 23fcb10:	6800      	ldr	r0, [r0, #0]
 23fcb12:	4b04      	ldr	r3, [pc, #16]	; (23fcb24 <abort+0x18>)
 23fcb14:	4403      	add	r3, r0
 23fcb16:	681b      	ldr	r3, [r3, #0]
 23fcb18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fcb1a:	9302      	str	r3, [sp, #8]
 23fcb1c:	bd09      	pop	{r0, r3, pc}
 23fcb1e:	0000      	.short	0x0000
 23fcb20:	1007aa98 	.word	0x1007aa98
 23fcb24:	00000004 	.word	0x00000004

023fcb28 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 23fcb28:	b509      	push	{r0, r3, lr}
 23fcb2a:	4804      	ldr	r0, [pc, #16]	; (23fcb3c <__errno+0x14>)
 23fcb2c:	6800      	ldr	r0, [r0, #0]
 23fcb2e:	4b04      	ldr	r3, [pc, #16]	; (23fcb40 <__errno+0x18>)
 23fcb30:	4403      	add	r3, r0
 23fcb32:	681b      	ldr	r3, [r3, #0]
 23fcb34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fcb36:	9302      	str	r3, [sp, #8]
 23fcb38:	bd09      	pop	{r0, r3, pc}
 23fcb3a:	0000      	.short	0x0000
 23fcb3c:	1007aa98 	.word	0x1007aa98
 23fcb40:	00000004 	.word	0x00000004

023fcb44 <__assert_func>:

#if defined(DYNALIB_EXPORT) || defined(DYNALIB_IMPORT)
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fcb44:	b509      	push	{r0, r3, lr}
 23fcb46:	4804      	ldr	r0, [pc, #16]	; (23fcb58 <__assert_func+0x14>)
 23fcb48:	6800      	ldr	r0, [r0, #0]
 23fcb4a:	4b04      	ldr	r3, [pc, #16]	; (23fcb5c <__assert_func+0x18>)
 23fcb4c:	4403      	add	r3, r0
 23fcb4e:	681b      	ldr	r3, [r3, #0]
 23fcb50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fcb52:	9302      	str	r3, [sp, #8]
 23fcb54:	bd09      	pop	{r0, r3, pc}
 23fcb56:	0000      	.short	0x0000
 23fcb58:	1007aa98 	.word	0x1007aa98
 23fcb5c:	00000004 	.word	0x00000004

023fcb60 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fcb60:	b509      	push	{r0, r3, lr}
 23fcb62:	4804      	ldr	r0, [pc, #16]	; (23fcb74 <newlib_impure_ptr_callback+0x14>)
 23fcb64:	6800      	ldr	r0, [r0, #0]
 23fcb66:	4b04      	ldr	r3, [pc, #16]	; (23fcb78 <newlib_impure_ptr_callback+0x18>)
 23fcb68:	4403      	add	r3, r0
 23fcb6a:	681b      	ldr	r3, [r3, #0]
 23fcb6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fcb6e:	9302      	str	r3, [sp, #8]
 23fcb70:	bd09      	pop	{r0, r3, pc}
 23fcb72:	0000      	.short	0x0000
 23fcb74:	1007aa98 	.word	0x1007aa98
 23fcb78:	00000004 	.word	0x00000004

023fcb7c <__cxa_guard_acquire>:

DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
DYNALIB_FN(22, rt, __cxa_guard_acquire, int(__guard*))
 23fcb7c:	b509      	push	{r0, r3, lr}
 23fcb7e:	4804      	ldr	r0, [pc, #16]	; (23fcb90 <__cxa_guard_acquire+0x14>)
 23fcb80:	6800      	ldr	r0, [r0, #0]
 23fcb82:	4b04      	ldr	r3, [pc, #16]	; (23fcb94 <__cxa_guard_acquire+0x18>)
 23fcb84:	4403      	add	r3, r0
 23fcb86:	681b      	ldr	r3, [r3, #0]
 23fcb88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23fcb8a:	9302      	str	r3, [sp, #8]
 23fcb8c:	bd09      	pop	{r0, r3, pc}
 23fcb8e:	0000      	.short	0x0000
 23fcb90:	1007aa98 	.word	0x1007aa98
 23fcb94:	00000004 	.word	0x00000004

023fcb98 <__cxa_guard_release>:
DYNALIB_FN(23, rt, __cxa_guard_release, void(__guard*))
 23fcb98:	b509      	push	{r0, r3, lr}
 23fcb9a:	4804      	ldr	r0, [pc, #16]	; (23fcbac <__cxa_guard_release+0x14>)
 23fcb9c:	6800      	ldr	r0, [r0, #0]
 23fcb9e:	4b04      	ldr	r3, [pc, #16]	; (23fcbb0 <__cxa_guard_release+0x18>)
 23fcba0:	4403      	add	r3, r0
 23fcba2:	681b      	ldr	r3, [r3, #0]
 23fcba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 23fcba6:	9302      	str	r3, [sp, #8]
 23fcba8:	bd09      	pop	{r0, r3, pc}
 23fcbaa:	0000      	.short	0x0000
 23fcbac:	1007aa98 	.word	0x1007aa98
 23fcbb0:	00000004 	.word	0x00000004

023fcbb4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fcbb4:	2200      	movs	r2, #0
 23fcbb6:	6840      	ldr	r0, [r0, #4]
 23fcbb8:	4611      	mov	r1, r2
 23fcbba:	f7ff bef1 	b.w	23fc9a0 <network_listening>

023fcbbe <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fcbbe:	2200      	movs	r2, #0
 23fcbc0:	6840      	ldr	r0, [r0, #4]
 23fcbc2:	4611      	mov	r1, r2
 23fcbc4:	f7ff bf08 	b.w	23fc9d8 <network_get_listen_timeout>

023fcbc8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fcbc8:	2200      	movs	r2, #0
 23fcbca:	6840      	ldr	r0, [r0, #4]
 23fcbcc:	f7ff bef6 	b.w	23fc9bc <network_set_listen_timeout>

023fcbd0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fcbd0:	2200      	movs	r2, #0
 23fcbd2:	6840      	ldr	r0, [r0, #4]
 23fcbd4:	f081 0101 	eor.w	r1, r1, #1
 23fcbd8:	f7ff bed4 	b.w	23fc984 <network_listen>

023fcbdc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fcbdc:	2300      	movs	r3, #0
 23fcbde:	6840      	ldr	r0, [r0, #4]
 23fcbe0:	461a      	mov	r2, r3
 23fcbe2:	4619      	mov	r1, r3
 23fcbe4:	f7ff bec0 	b.w	23fc968 <network_off>

023fcbe8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fcbe8:	2300      	movs	r3, #0
 23fcbea:	6840      	ldr	r0, [r0, #4]
 23fcbec:	461a      	mov	r2, r3
 23fcbee:	4619      	mov	r1, r3
 23fcbf0:	f7ff beac 	b.w	23fc94c <network_on>

023fcbf4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fcbf4:	2200      	movs	r2, #0
 23fcbf6:	6840      	ldr	r0, [r0, #4]
 23fcbf8:	4611      	mov	r1, r2
 23fcbfa:	f7ff be99 	b.w	23fc930 <network_ready>

023fcbfe <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fcbfe:	2200      	movs	r2, #0
 23fcc00:	6840      	ldr	r0, [r0, #4]
 23fcc02:	4611      	mov	r1, r2
 23fcc04:	f7ff be78 	b.w	23fc8f8 <network_connecting>

023fcc08 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fcc08:	2200      	movs	r2, #0
 23fcc0a:	2102      	movs	r1, #2
 23fcc0c:	6840      	ldr	r0, [r0, #4]
 23fcc0e:	f7ff be81 	b.w	23fc914 <network_disconnect>

023fcc12 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fcc12:	2300      	movs	r3, #0
 23fcc14:	6840      	ldr	r0, [r0, #4]
 23fcc16:	461a      	mov	r2, r3
 23fcc18:	f7ff be60 	b.w	23fc8dc <network_connect>

023fcc1c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name, bool flushCache = false);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fcc1c:	2203      	movs	r2, #3
 23fcc1e:	4b02      	ldr	r3, [pc, #8]	; (23fcc28 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fcc20:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fcc22:	4a02      	ldr	r2, [pc, #8]	; (23fcc2c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fcc24:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fcc26:	4770      	bx	lr
 23fcc28:	1007aed4 	.word	0x1007aed4
 23fcc2c:	023ffa28 	.word	0x023ffa28

023fcc30 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fcc30:	680b      	ldr	r3, [r1, #0]
 23fcc32:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23fcc34:	684b      	ldr	r3, [r1, #4]
 23fcc36:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23fcc38:	b113      	cbz	r3, 23fcc40 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
 23fcc3a:	685a      	ldr	r2, [r3, #4]
 23fcc3c:	3201      	adds	r2, #1
 23fcc3e:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fcc40:	4770      	bx	lr

023fcc42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 23fcc42:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
 23fcc44:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 23fcc46:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 23fcc48:	b17c      	cbz	r4, 23fcc6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 23fcc4a:	6863      	ldr	r3, [r4, #4]
 23fcc4c:	3b01      	subs	r3, #1
 23fcc4e:	6063      	str	r3, [r4, #4]
 23fcc50:	b95b      	cbnz	r3, 23fcc6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 23fcc52:	6823      	ldr	r3, [r4, #0]
 23fcc54:	4620      	mov	r0, r4
 23fcc56:	689b      	ldr	r3, [r3, #8]
 23fcc58:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fcc5a:	68a3      	ldr	r3, [r4, #8]
 23fcc5c:	3b01      	subs	r3, #1
 23fcc5e:	60a3      	str	r3, [r4, #8]
 23fcc60:	b91b      	cbnz	r3, 23fcc6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 23fcc62:	6823      	ldr	r3, [r4, #0]
 23fcc64:	4620      	mov	r0, r4
 23fcc66:	68db      	ldr	r3, [r3, #12]
 23fcc68:	4798      	blx	r3
      }
 23fcc6a:	4628      	mov	r0, r5
 23fcc6c:	bd38      	pop	{r3, r4, r5, pc}
	...

023fcc70 <_GLOBAL__sub_I__ZN8particle10CloudEvent15s_subscriptionsE>:
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 23fcc70:	2200      	movs	r2, #0
 23fcc72:	4b02      	ldr	r3, [pc, #8]	; (23fcc7c <_GLOBAL__sub_I__ZN8particle10CloudEvent15s_subscriptionsE+0xc>)
 23fcc74:	e9c3 2200 	strd	r2, r2, [r3]
 23fcc78:	609a      	str	r2, [r3, #8]
        // Keep the reference around until the application callback is called
        d.unwrap();
    }
}

} // namespace particle
 23fcc7a:	4770      	bx	lr
 23fcc7c:	1007aedc 	.word	0x1007aedc

023fcc80 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23fcc80:	b510      	push	{r4, lr}
 23fcc82:	4604      	mov	r4, r0
 23fcc84:	4608      	mov	r0, r1
{
    _spi = spi;
 23fcc86:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23fcc88:	f7ff fd02 	bl	23fc690 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fcc8c:	2300      	movs	r3, #0
}
 23fcc8e:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fcc90:	6063      	str	r3, [r4, #4]
}
 23fcc92:	bd10      	pop	{r4, pc}

023fcc94 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
 23fcc94:	b507      	push	{r0, r1, r2, lr}
 23fcc96:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 23fcc98:	2100      	movs	r1, #0
{
 23fcc9a:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 23fcc9c:	9100      	str	r1, [sp, #0]
 23fcc9e:	2001      	movs	r0, #1
 23fcca0:	218c      	movs	r1, #140	; 0x8c
 23fcca2:	f7ff fe0d 	bl	23fc8c0 <system_reset>
}
 23fcca6:	b003      	add	sp, #12
 23fcca8:	f85d fb04 	ldr.w	pc, [sp], #4

023fccac <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
 23fccac:	4601      	mov	r1, r0
    reset(0, flags);
 23fccae:	2000      	movs	r0, #0
 23fccb0:	f7ff bff0 	b.w	23fcc94 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

023fccb4 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
 23fccb4:	2000      	movs	r0, #0
 23fccb6:	f7ff bff9 	b.w	23fccac <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

023fccbc <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23fccbc:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fccbe:	2000      	movs	r0, #0
 23fccc0:	4b04      	ldr	r3, [pc, #16]	; (23fccd4 <_GLOBAL__sub_I_System+0x18>)
 23fccc2:	601a      	str	r2, [r3, #0]
 23fccc4:	4b04      	ldr	r3, [pc, #16]	; (23fccd8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23fccc6:	4a05      	ldr	r2, [pc, #20]	; (23fccdc <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23fccc8:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23fcccc:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fccce:	f7ff bdb1 	b.w	23fc834 <set_system_mode>
 23fccd2:	bf00      	nop
 23fccd4:	1007aef4 	.word	0x1007aef4
 23fccd8:	1007aee8 	.word	0x1007aee8
 23fccdc:	ffff0000 	.word	0xffff0000

023fcce0 <_ZN6StringD1Ev>:
    init();
    char buf[33] = {};
    dtoa(value, decimalPlaces, buf);
  *this = buf;
}
String::~String()
 23fcce0:	b510      	push	{r4, lr}
 23fcce2:	4604      	mov	r4, r0
{
    free(buffer);
 23fcce4:	6800      	ldr	r0, [r0, #0]
 23fcce6:	f7ff fee7 	bl	23fcab8 <free>
}
 23fccea:	4620      	mov	r0, r4
 23fccec:	bd10      	pop	{r4, pc}

023fccee <_ZN6String10invalidateEv>:
    len = 0;
    flags = 0;
}

void String::invalidate(void)
{
 23fccee:	b510      	push	{r4, lr}
 23fccf0:	4604      	mov	r4, r0
    if (buffer) {
 23fccf2:	6800      	ldr	r0, [r0, #0]
 23fccf4:	b108      	cbz	r0, 23fccfa <_ZN6String10invalidateEv+0xc>
        free(buffer);
 23fccf6:	f7ff fedf 	bl	23fcab8 <free>
    }
    buffer = nullptr;
 23fccfa:	2300      	movs	r3, #0
    capacity_ = len = 0;
 23fccfc:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = nullptr;
 23fcd00:	6023      	str	r3, [r4, #0]
}
 23fcd02:	bd10      	pop	{r4, pc}

023fcd04 <_ZN6String12changeBufferEj>:
    len = size;
    return true;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23fcd04:	b538      	push	{r3, r4, r5, lr}
 23fcd06:	4604      	mov	r4, r0
 23fcd08:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23fcd0a:	6800      	ldr	r0, [r0, #0]
 23fcd0c:	3101      	adds	r1, #1
 23fcd0e:	f7ff fee1 	bl	23fcad4 <realloc>
    if (newbuffer) {
 23fcd12:	b110      	cbz	r0, 23fcd1a <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity_ = maxStrLen;
 23fcd14:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
 23fcd18:	2001      	movs	r0, #1
    }
    return 0;
}
 23fcd1a:	bd38      	pop	{r3, r4, r5, pc}

023fcd1c <_ZN6String7reserveEj>:
{
 23fcd1c:	b510      	push	{r4, lr}
    if (buffer && capacity_ >= size) {
 23fcd1e:	6803      	ldr	r3, [r0, #0]
{
 23fcd20:	4604      	mov	r4, r0
    if (buffer && capacity_ >= size) {
 23fcd22:	b123      	cbz	r3, 23fcd2e <_ZN6String7reserveEj+0x12>
 23fcd24:	6843      	ldr	r3, [r0, #4]
 23fcd26:	428b      	cmp	r3, r1
 23fcd28:	d301      	bcc.n	23fcd2e <_ZN6String7reserveEj+0x12>
 23fcd2a:	2001      	movs	r0, #1
}
 23fcd2c:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
 23fcd2e:	4620      	mov	r0, r4
 23fcd30:	f7ff ffe8 	bl	23fcd04 <_ZN6String12changeBufferEj>
 23fcd34:	2800      	cmp	r0, #0
 23fcd36:	d0f9      	beq.n	23fcd2c <_ZN6String7reserveEj+0x10>
        if (len == 0) {
 23fcd38:	68a3      	ldr	r3, [r4, #8]
 23fcd3a:	2b00      	cmp	r3, #0
 23fcd3c:	d1f5      	bne.n	23fcd2a <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
 23fcd3e:	6822      	ldr	r2, [r4, #0]
 23fcd40:	7013      	strb	r3, [r2, #0]
 23fcd42:	e7f2      	b.n	23fcd2a <_ZN6String7reserveEj+0xe>

023fcd44 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23fcd44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fcd46:	460d      	mov	r5, r1
    if (!reserve(length)) {
 23fcd48:	4611      	mov	r1, r2
 23fcd4a:	9201      	str	r2, [sp, #4]
{
 23fcd4c:	4604      	mov	r4, r0
    if (!reserve(length)) {
 23fcd4e:	f7ff ffe5 	bl	23fcd1c <_ZN6String7reserveEj>
 23fcd52:	9a01      	ldr	r2, [sp, #4]
 23fcd54:	b928      	cbnz	r0, 23fcd62 <_ZN6String4copyEPKcj+0x1e>
        invalidate();
 23fcd56:	4620      	mov	r0, r4
 23fcd58:	f7ff ffc9 	bl	23fccee <_ZN6String10invalidateEv>
    }
    len = length;
    memcpy(buffer, cstr, length);
    buffer[len] = 0;
    return *this;
}
 23fcd5c:	4620      	mov	r0, r4
 23fcd5e:	b003      	add	sp, #12
 23fcd60:	bd30      	pop	{r4, r5, pc}
    memcpy(buffer, cstr, length);
 23fcd62:	4629      	mov	r1, r5
    len = length;
 23fcd64:	60a2      	str	r2, [r4, #8]
    memcpy(buffer, cstr, length);
 23fcd66:	6820      	ldr	r0, [r4, #0]
 23fcd68:	f002 fc14 	bl	23ff594 <memcpy>
    buffer[len] = 0;
 23fcd6c:	2100      	movs	r1, #0
 23fcd6e:	6822      	ldr	r2, [r4, #0]
 23fcd70:	68a3      	ldr	r3, [r4, #8]
 23fcd72:	54d1      	strb	r1, [r2, r3]
    return *this;
 23fcd74:	e7f2      	b.n	23fcd5c <_ZN6String4copyEPKcj+0x18>

023fcd76 <_ZN6StringC1EPK19__FlashStringHelper>:
    buffer = nullptr;
 23fcd76:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 23fcd78:	b513      	push	{r0, r1, r4, lr}
 23fcd7a:	4604      	mov	r4, r0
    capacity_ = 0;
 23fcd7c:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23fcd80:	6083      	str	r3, [r0, #8]
    flags = 0;
 23fcd82:	7303      	strb	r3, [r0, #12]
    if (cstr) {
 23fcd84:	b141      	cbz	r1, 23fcd98 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
        copy(cstr, strlen(cstr));
 23fcd86:	4608      	mov	r0, r1
 23fcd88:	9101      	str	r1, [sp, #4]
 23fcd8a:	f7fe fc2f 	bl	23fb5ec <strlen>
 23fcd8e:	9901      	ldr	r1, [sp, #4]
 23fcd90:	4602      	mov	r2, r0
 23fcd92:	4620      	mov	r0, r4
 23fcd94:	f7ff ffd6 	bl	23fcd44 <_ZN6String4copyEPKcj>
}
 23fcd98:	4620      	mov	r0, r4
 23fcd9a:	b002      	add	sp, #8
 23fcd9c:	bd10      	pop	{r4, pc}

023fcd9e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 23fcd9e:	b538      	push	{r3, r4, r5, lr}
 23fcda0:	4605      	mov	r5, r0
    if (buffer) {
 23fcda2:	6800      	ldr	r0, [r0, #0]
{
 23fcda4:	460c      	mov	r4, r1
    if (buffer) {
 23fcda6:	b170      	cbz	r0, 23fcdc6 <_ZN6String4moveERS_+0x28>
        if (capacity_ >= rhs.len && rhs.buffer) {
 23fcda8:	686a      	ldr	r2, [r5, #4]
 23fcdaa:	688b      	ldr	r3, [r1, #8]
 23fcdac:	429a      	cmp	r2, r3
 23fcdae:	d308      	bcc.n	23fcdc2 <_ZN6String4moveERS_+0x24>
 23fcdb0:	6809      	ldr	r1, [r1, #0]
 23fcdb2:	b131      	cbz	r1, 23fcdc2 <_ZN6String4moveERS_+0x24>
            strcpy(buffer, rhs.buffer);
 23fcdb4:	f002 fc63 	bl	23ff67e <strcpy>
            len = rhs.len;
 23fcdb8:	68a3      	ldr	r3, [r4, #8]
 23fcdba:	60ab      	str	r3, [r5, #8]
            rhs.len = 0;
 23fcdbc:	2300      	movs	r3, #0
    buffer = rhs.buffer;
    capacity_ = rhs.capacity_;
    len = rhs.len;
    rhs.buffer = nullptr;
    rhs.capacity_ = 0;
    rhs.len = 0;
 23fcdbe:	60a3      	str	r3, [r4, #8]
}
 23fcdc0:	bd38      	pop	{r3, r4, r5, pc}
            free(buffer);
 23fcdc2:	f7ff fe79 	bl	23fcab8 <free>
    buffer = rhs.buffer;
 23fcdc6:	6823      	ldr	r3, [r4, #0]
 23fcdc8:	602b      	str	r3, [r5, #0]
    capacity_ = rhs.capacity_;
 23fcdca:	6863      	ldr	r3, [r4, #4]
 23fcdcc:	606b      	str	r3, [r5, #4]
    len = rhs.len;
 23fcdce:	68a3      	ldr	r3, [r4, #8]
 23fcdd0:	60ab      	str	r3, [r5, #8]
    rhs.buffer = nullptr;
 23fcdd2:	2300      	movs	r3, #0
    rhs.capacity_ = 0;
 23fcdd4:	e9c4 3300 	strd	r3, r3, [r4]
 23fcdd8:	e7f1      	b.n	23fcdbe <_ZN6String4moveERS_+0x20>

023fcdda <_ZN6StringC1EOS_>:
    buffer = nullptr;
 23fcdda:	2300      	movs	r3, #0
String::String(String &&rval)
 23fcddc:	b510      	push	{r4, lr}
 23fcdde:	4604      	mov	r4, r0
    capacity_ = 0;
 23fcde0:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23fcde4:	6083      	str	r3, [r0, #8]
    flags = 0;
 23fcde6:	7303      	strb	r3, [r0, #12]
    move(rval);
 23fcde8:	f7ff ffd9 	bl	23fcd9e <_ZN6String4moveERS_>
}
 23fcdec:	4620      	mov	r0, r4
 23fcdee:	bd10      	pop	{r4, pc}

023fcdf0 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
    if (this == &rhs) {
 23fcdf0:	4288      	cmp	r0, r1
{
 23fcdf2:	b510      	push	{r4, lr}
 23fcdf4:	4604      	mov	r4, r0
    if (this == &rhs) {
 23fcdf6:	d005      	beq.n	23fce04 <_ZN6StringaSERKS_+0x14>
        return *this;
    }

    if (rhs.buffer) {
 23fcdf8:	680b      	ldr	r3, [r1, #0]
 23fcdfa:	b12b      	cbz	r3, 23fce08 <_ZN6StringaSERKS_+0x18>
        copy(rhs.buffer, rhs.len);
 23fcdfc:	688a      	ldr	r2, [r1, #8]
 23fcdfe:	4619      	mov	r1, r3
 23fce00:	f7ff ffa0 	bl	23fcd44 <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
 23fce04:	4620      	mov	r0, r4
 23fce06:	bd10      	pop	{r4, pc}
        invalidate();
 23fce08:	f7ff ff71 	bl	23fccee <_ZN6String10invalidateEv>
 23fce0c:	e7fa      	b.n	23fce04 <_ZN6StringaSERKS_+0x14>

023fce0e <_ZN6StringC1ERKS_>:
    buffer = nullptr;
 23fce0e:	2300      	movs	r3, #0
String::String(const String &value)
 23fce10:	b510      	push	{r4, lr}
 23fce12:	4604      	mov	r4, r0
    capacity_ = 0;
 23fce14:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23fce18:	6083      	str	r3, [r0, #8]
    flags = 0;
 23fce1a:	7303      	strb	r3, [r0, #12]
    *this = value;
 23fce1c:	f7ff ffe8 	bl	23fcdf0 <_ZN6StringaSERKS_>
}
 23fce20:	4620      	mov	r0, r4
 23fce22:	bd10      	pop	{r4, pc}

023fce24 <_ZN6String6formatEPKcz>:
    OutputStringStream stream(*this);
    printable.printTo(stream);
}

String String::format(const char* fmt, ...)
{
 23fce24:	b40e      	push	{r1, r2, r3}
 23fce26:	b570      	push	{r4, r5, r6, lr}
 23fce28:	b087      	sub	sp, #28
 23fce2a:	ad0b      	add	r5, sp, #44	; 0x2c
 23fce2c:	f855 2b04 	ldr.w	r2, [r5], #4
 23fce30:	4604      	mov	r4, r0
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 23fce32:	462b      	mov	r3, r5
 23fce34:	2105      	movs	r1, #5
 23fce36:	a804      	add	r0, sp, #16
 23fce38:	9201      	str	r2, [sp, #4]
    va_start(marker, fmt);
 23fce3a:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 23fce3c:	f7ff fe58 	bl	23fcaf0 <vsnprintf>
 23fce40:	4606      	mov	r6, r0
    va_end(marker);

    String result;
 23fce42:	490b      	ldr	r1, [pc, #44]	; (23fce70 <_ZN6String6formatEPKcz+0x4c>)
 23fce44:	4620      	mov	r0, r4
 23fce46:	f7ff ff96 	bl	23fcd76 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
 23fce4a:	4631      	mov	r1, r6
 23fce4c:	4620      	mov	r0, r4
 23fce4e:	f7ff ff65 	bl	23fcd1c <_ZN6String7reserveEj>
    if (result.buffer) {
 23fce52:	6820      	ldr	r0, [r4, #0]
 23fce54:	b130      	cbz	r0, 23fce64 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 23fce56:	462b      	mov	r3, r5
 23fce58:	9a01      	ldr	r2, [sp, #4]
 23fce5a:	1c71      	adds	r1, r6, #1
        va_start(marker, fmt);
 23fce5c:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 23fce5e:	f7ff fe47 	bl	23fcaf0 <vsnprintf>
        va_end(marker);
        result.len = n;
 23fce62:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
 23fce64:	4620      	mov	r0, r4
 23fce66:	b007      	add	sp, #28
 23fce68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 23fce6c:	b003      	add	sp, #12
 23fce6e:	4770      	bx	lr
 23fce70:	023ffade 	.word	0x023ffade

023fce74 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
 23fce74:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
 23fce76:	6843      	ldr	r3, [r0, #4]
    {
 23fce78:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
 23fce7a:	3b01      	subs	r3, #1
 23fce7c:	6043      	str	r3, [r0, #4]
 23fce7e:	b963      	cbnz	r3, 23fce9a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
 23fce80:	6803      	ldr	r3, [r0, #0]
 23fce82:	689b      	ldr	r3, [r3, #8]
 23fce84:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fce86:	68a3      	ldr	r3, [r4, #8]
 23fce88:	3b01      	subs	r3, #1
 23fce8a:	60a3      	str	r3, [r4, #8]
 23fce8c:	b92b      	cbnz	r3, 23fce9a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
 23fce8e:	6823      	ldr	r3, [r4, #0]
 23fce90:	4620      	mov	r0, r4
    }
 23fce92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 23fce96:	68db      	ldr	r3, [r3, #12]
 23fce98:	4718      	bx	r3
    }
 23fce9a:	bd10      	pop	{r4, pc}

023fce9c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fce9c:	b570      	push	{r4, r5, r6, lr}
 23fce9e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fcea0:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fcea4:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 23fcea8:	42ae      	cmp	r6, r5
 23fceaa:	d004      	beq.n	23fceb6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 23fceac:	4628      	mov	r0, r5
 23fceae:	f7ff ff17 	bl	23fcce0 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 23fceb2:	3510      	adds	r5, #16
 23fceb4:	e7f8      	b.n	23fcea8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fceb6:	6820      	ldr	r0, [r4, #0]
 23fceb8:	f7ff fdfe 	bl	23fcab8 <free>
    AllocatorT::free(data_);
}
 23fcebc:	4620      	mov	r0, r4
 23fcebe:	bd70      	pop	{r4, r5, r6, pc}

023fcec0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23fcec0:	2300      	movs	r3, #0
 23fcec2:	4802      	ldr	r0, [pc, #8]	; (23fcecc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fcec4:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23fcec6:	f7ff b9f9 	b.w	23fc2bc <os_mutex_recursive_create>
 23fceca:	bf00      	nop
 23fcecc:	1007aef8 	.word	0x1007aef8

023fced0 <_ZN5spark16JSONStreamWriter5writeEPKcj>:

inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
 23fced0:	b510      	push	{r4, lr}
 23fced2:	4604      	mov	r4, r0
    bytesWritten_ += strm_.write((const uint8_t*)data, size);
 23fced4:	6880      	ldr	r0, [r0, #8]
 23fced6:	6803      	ldr	r3, [r0, #0]
 23fced8:	68db      	ldr	r3, [r3, #12]
 23fceda:	4798      	blx	r3
 23fcedc:	68e3      	ldr	r3, [r4, #12]
 23fcede:	4418      	add	r0, r3
 23fcee0:	60e0      	str	r0, [r4, #12]
}
 23fcee2:	bd10      	pop	{r4, pc}

023fcee4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fcee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fcee6:	4606      	mov	r6, r0
 23fcee8:	460d      	mov	r5, r1
  size_t n = 0;
 23fceea:	2400      	movs	r4, #0
 23fceec:	188f      	adds	r7, r1, r2
  while (size--) {
 23fceee:	42bd      	cmp	r5, r7
 23fcef0:	d00c      	beq.n	23fcf0c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23fcef2:	6833      	ldr	r3, [r6, #0]
 23fcef4:	4630      	mov	r0, r6
 23fcef6:	689b      	ldr	r3, [r3, #8]
 23fcef8:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fcefc:	4798      	blx	r3
     if (chunk>=0)
 23fcefe:	1e03      	subs	r3, r0, #0
 23fcf00:	db01      	blt.n	23fcf06 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23fcf02:	441c      	add	r4, r3
  while (size--) {
 23fcf04:	e7f3      	b.n	23fceee <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23fcf06:	2c00      	cmp	r4, #0
 23fcf08:	bf08      	it	eq
 23fcf0a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23fcf0c:	4620      	mov	r0, r4
 23fcf0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fcf10 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 23fcf10:	4770      	bx	lr

023fcf12 <_ZN5spark16JSONStreamWriterD0Ev>:
 23fcf12:	b510      	push	{r4, lr}
 23fcf14:	4604      	mov	r4, r0
 23fcf16:	2110      	movs	r1, #16
 23fcf18:	f7fe fb91 	bl	23fb63e <_ZdlPvj>
 23fcf1c:	4620      	mov	r0, r4
 23fcf1e:	bd10      	pop	{r4, pc}

023fcf20 <_ZN5Print5writeEPKc>:

    int getWriteError() const { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 23fcf20:	b513      	push	{r0, r1, r4, lr}
 23fcf22:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
 23fcf24:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23fcf26:	b159      	cbz	r1, 23fcf40 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23fcf28:	9101      	str	r1, [sp, #4]
 23fcf2a:	f7fe fb5f 	bl	23fb5ec <strlen>
 23fcf2e:	4602      	mov	r2, r0
 23fcf30:	4620      	mov	r0, r4
 23fcf32:	6823      	ldr	r3, [r4, #0]
 23fcf34:	9901      	ldr	r1, [sp, #4]
 23fcf36:	68db      	ldr	r3, [r3, #12]
    }
 23fcf38:	b002      	add	sp, #8
 23fcf3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23fcf3e:	4718      	bx	r3
    }
 23fcf40:	b002      	add	sp, #8
 23fcf42:	bd10      	pop	{r4, pc}

023fcf44 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 23fcf44:	6803      	ldr	r3, [r0, #0]
 23fcf46:	689b      	ldr	r3, [r3, #8]
 23fcf48:	4718      	bx	r3

023fcf4a <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23fcf4a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23fcf4c:	2a01      	cmp	r2, #1
 23fcf4e:	bf98      	it	ls
 23fcf50:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23fcf52:	b530      	push	{r4, r5, lr}
 23fcf54:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23fcf56:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23fcf5a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23fcf5c:	460d      	mov	r5, r1
 23fcf5e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23fcf62:	fb01 5312 	mls	r3, r1, r2, r5
 23fcf66:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fcf6a:	2b09      	cmp	r3, #9
 23fcf6c:	bf94      	ite	ls
 23fcf6e:	3330      	addls	r3, #48	; 0x30
 23fcf70:	3337      	addhi	r3, #55	; 0x37
 23fcf72:	b2db      	uxtb	r3, r3
  } while(n);
 23fcf74:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fcf76:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23fcf7a:	d9ef      	bls.n	23fcf5c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23fcf7c:	4621      	mov	r1, r4
 23fcf7e:	f7ff ffcf 	bl	23fcf20 <_ZN5Print5writeEPKc>
}
 23fcf82:	b00b      	add	sp, #44	; 0x2c
 23fcf84:	bd30      	pop	{r4, r5, pc}

023fcf86 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
 23fcf86:	b510      	push	{r4, lr}
 23fcf88:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23fcf8a:	f7ff f935 	bl	23fc1f8 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
 23fcf8e:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
 23fcf90:	6823      	ldr	r3, [r4, #0]
 23fcf92:	4620      	mov	r0, r4
 23fcf94:	695b      	ldr	r3, [r3, #20]
 23fcf96:	4798      	blx	r3
    if (c >= 0) return c;
 23fcf98:	2800      	cmp	r0, #0
 23fcf9a:	da08      	bge.n	23fcfae <_ZN6Stream9timedReadEv+0x28>
 23fcf9c:	f7ff f92c 	bl	23fc1f8 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
 23fcfa0:	68e3      	ldr	r3, [r4, #12]
 23fcfa2:	1ac0      	subs	r0, r0, r3
 23fcfa4:	68a3      	ldr	r3, [r4, #8]
 23fcfa6:	4298      	cmp	r0, r3
 23fcfa8:	d3f2      	bcc.n	23fcf90 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
 23fcfaa:	f04f 30ff 	mov.w	r0, #4294967295
}
 23fcfae:	bd10      	pop	{r4, pc}

023fcfb0 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
 23fcfb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fcfb4:	4607      	mov	r7, r0
 23fcfb6:	460c      	mov	r4, r1
 23fcfb8:	460d      	mov	r5, r1
 23fcfba:	188e      	adds	r6, r1, r2
  size_t count = 0;
  while (count < length) {
 23fcfbc:	42b5      	cmp	r5, r6
 23fcfbe:	eba5 0804 	sub.w	r8, r5, r4
 23fcfc2:	d007      	beq.n	23fcfd4 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
 23fcfc4:	4638      	mov	r0, r7
 23fcfc6:	f7ff ffde 	bl	23fcf86 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
 23fcfca:	1e03      	subs	r3, r0, #0
 23fcfcc:	db02      	blt.n	23fcfd4 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
 23fcfce:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
 23fcfd2:	e7f3      	b.n	23fcfbc <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
 23fcfd4:	4640      	mov	r0, r8
 23fcfd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fcfda <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 23fcfda:	4770      	bx	lr

023fcfdc <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 23fcfdc:	4608      	mov	r0, r1
 23fcfde:	b111      	cbz	r1, 23fcfe6 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 23fcfe0:	680b      	ldr	r3, [r1, #0]
 23fcfe2:	685b      	ldr	r3, [r3, #4]
 23fcfe4:	4718      	bx	r3
}
 23fcfe6:	4770      	bx	lr

023fcfe8 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
 23fcfe8:	4770      	bx	lr

023fcfea <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fcfea:	4770      	bx	lr

023fcfec <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 23fcfec:	4770      	bx	lr

023fcfee <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
 23fcfee:	b538      	push	{r3, r4, r5, lr}
 23fcff0:	4604      	mov	r4, r0
 23fcff2:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 23fcff4:	6800      	ldr	r0, [r0, #0]
 23fcff6:	212e      	movs	r1, #46	; 0x2e
 23fcff8:	f002 fb37 	bl	23ff66a <strchrnul>
    size = s - category;
 23fcffc:	6823      	ldr	r3, [r4, #0]
 23fcffe:	1ac3      	subs	r3, r0, r3
 23fd000:	602b      	str	r3, [r5, #0]
    if (size) {
 23fd002:	b123      	cbz	r3, 23fd00e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
 23fd004:	7803      	ldrb	r3, [r0, #0]
 23fd006:	b103      	cbz	r3, 23fd00a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
 23fd008:	3001      	adds	r0, #1
 23fd00a:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd00c:	6020      	str	r0, [r4, #0]
}
 23fd00e:	4618      	mov	r0, r3
 23fd010:	bd38      	pop	{r3, r4, r5, pc}

023fd012 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 23fd012:	b510      	push	{r4, lr}
 23fd014:	4604      	mov	r4, r0
 23fd016:	2104      	movs	r1, #4
 23fd018:	f7fe fb11 	bl	23fb63e <_ZdlPvj>
 23fd01c:	4620      	mov	r0, r4
 23fd01e:	bd10      	pop	{r4, pc}

023fd020 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fd020:	b510      	push	{r4, lr}
 23fd022:	4604      	mov	r4, r0
 23fd024:	2104      	movs	r1, #4
 23fd026:	f7fe fb0a 	bl	23fb63e <_ZdlPvj>
 23fd02a:	4620      	mov	r0, r4
 23fd02c:	bd10      	pop	{r4, pc}

023fd02e <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 23fd02e:	f7ff b961 	b.w	23fc2f4 <os_mutex_recursive_lock>

023fd032 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 23fd032:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 23fd034:	f7fe fad0 	bl	23fb5d8 <strcmp>
}
 23fd038:	fab0 f080 	clz	r0, r0
 23fd03c:	0940      	lsrs	r0, r0, #5
 23fd03e:	bd08      	pop	{r3, pc}

023fd040 <__tcf_1>:
 23fd040:	4770      	bx	lr

023fd042 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 23fd042:	b510      	push	{r4, lr}
 23fd044:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
 23fd046:	f001 f937 	bl	23fe2b8 <_Z16_fetch_usbserialv>
 23fd04a:	4284      	cmp	r4, r0
 23fd04c:	d105      	bne.n	23fd05a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 23fd04e:	f001 f933 	bl	23fe2b8 <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
 23fd052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial.end();
 23fd056:	f001 b923 	b.w	23fe2a0 <_ZN9USBSerial3endEv>
    if (stream == &Serial1) {
 23fd05a:	f002 f8a3 	bl	23ff1a4 <_Z22__fetch_global_Serial1v>
 23fd05e:	4284      	cmp	r4, r0
 23fd060:	d105      	bne.n	23fd06e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2c>
        Serial1.end();
 23fd062:	f002 f89f 	bl	23ff1a4 <_Z22__fetch_global_Serial1v>
}
 23fd066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 23fd06a:	f001 bb7a 	b.w	23fe762 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 23fd06e:	b12c      	cbz	r4, 23fd07c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
 23fd070:	6823      	ldr	r3, [r4, #0]
 23fd072:	4620      	mov	r0, r4
}
 23fd074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fd078:	685b      	ldr	r3, [r3, #4]
 23fd07a:	4718      	bx	r3
 23fd07c:	bd10      	pop	{r4, pc}

023fd07e <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 23fd07e:	b513      	push	{r0, r1, r4, lr}
 23fd080:	4604      	mov	r4, r0
    return value(val, strlen(val));
 23fd082:	4608      	mov	r0, r1
 23fd084:	9101      	str	r1, [sp, #4]
 23fd086:	f7fe fab1 	bl	23fb5ec <strlen>
 23fd08a:	4602      	mov	r2, r0
 23fd08c:	4620      	mov	r0, r4
 23fd08e:	9901      	ldr	r1, [sp, #4]
}
 23fd090:	b002      	add	sp, #8
 23fd092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
 23fd096:	f001 bafb 	b.w	23fe690 <_ZN5spark10JSONWriter5valueEPKcj>

023fd09a <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 23fd09a:	b513      	push	{r0, r1, r4, lr}
 23fd09c:	4604      	mov	r4, r0
    write(str, strlen(str));
 23fd09e:	4608      	mov	r0, r1
 23fd0a0:	9101      	str	r1, [sp, #4]
 23fd0a2:	f7fe faa3 	bl	23fb5ec <strlen>
 23fd0a6:	4602      	mov	r2, r0
 23fd0a8:	4620      	mov	r0, r4
 23fd0aa:	6823      	ldr	r3, [r4, #0]
 23fd0ac:	9901      	ldr	r1, [sp, #4]
 23fd0ae:	68db      	ldr	r3, [r3, #12]
}
 23fd0b0:	b002      	add	sp, #8
 23fd0b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
 23fd0b6:	4718      	bx	r3

023fd0b8 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 23fd0b8:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fd0ba:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 23fd0bc:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fd0c0:	2201      	movs	r2, #1
 23fd0c2:	68db      	ldr	r3, [r3, #12]
 23fd0c4:	f10d 0107 	add.w	r1, sp, #7
 23fd0c8:	4798      	blx	r3
}
 23fd0ca:	b003      	add	sp, #12
 23fd0cc:	f85d fb04 	ldr.w	pc, [sp], #4

023fd0d0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fd0d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
inline typename spark::Vector<T, AllocatorT>::ConstIterator spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 23fd0d4:	f04f 0a14 	mov.w	sl, #20
 23fd0d8:	e9d0 8400 	ldrd	r8, r4, [r0]
 23fd0dc:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 23fd0de:	4645      	mov	r5, r8
 23fd0e0:	fb0a f404 	mul.w	r4, sl, r4
 23fd0e4:	9300      	str	r3, [sp, #0]
 23fd0e6:	4b17      	ldr	r3, [pc, #92]	; (23fd144 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fd0e8:	10a4      	asrs	r4, r4, #2
 23fd0ea:	435c      	muls	r4, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 23fd0ec:	2c00      	cmp	r4, #0
 23fd0ee:	dd21      	ble.n	23fd134 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
 23fd0f0:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 23fd0f2:	fb0a f006 	mul.w	r0, sl, r6
 23fd0f6:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 23fd0fa:	f8b9 b004 	ldrh.w	fp, [r9, #4]
 23fd0fe:	463a      	mov	r2, r7
 23fd100:	455f      	cmp	r7, fp
 23fd102:	bf28      	it	cs
 23fd104:	465a      	movcs	r2, fp
 23fd106:	5828      	ldr	r0, [r5, r0]
 23fd108:	9101      	str	r1, [sp, #4]
 23fd10a:	f002 fac0 	bl	23ff68e <strncmp>
                if (cmp == 0) {
 23fd10e:	2800      	cmp	r0, #0
 23fd110:	f04f 0301 	mov.w	r3, #1
 23fd114:	9901      	ldr	r1, [sp, #4]
 23fd116:	d10b      	bne.n	23fd130 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
 23fd118:	455f      	cmp	r7, fp
 23fd11a:	d103      	bne.n	23fd124 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 23fd11c:	9a00      	ldr	r2, [sp, #0]
 23fd11e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fd120:	4634      	mov	r4, r6
 23fd122:	e7e3      	b.n	23fd0ec <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 23fd124:	d9fc      	bls.n	23fd120 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 23fd126:	1ba6      	subs	r6, r4, r6
	      ++__first;
 23fd128:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
 23fd12c:	3e01      	subs	r6, #1
 23fd12e:	e7f7      	b.n	23fd120 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
 23fd130:	dbf9      	blt.n	23fd126 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
 23fd132:	e7f5      	b.n	23fd120 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
 23fd134:	eba5 0508 	sub.w	r5, r5, r8
}
 23fd138:	4802      	ldr	r0, [pc, #8]	; (23fd144 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fd13a:	10ad      	asrs	r5, r5, #2
 23fd13c:	4368      	muls	r0, r5
 23fd13e:	b003      	add	sp, #12
 23fd140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fd144:	cccccccd 	.word	0xcccccccd

023fd148 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fd148:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 23fd14a:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 23fd14c:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fd14e:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 23fd150:	b303      	cbz	r3, 23fd194 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 23fd152:	b1f9      	cbz	r1, 23fd194 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 23fd154:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 23fd156:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 23fd15a:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 23fd15c:	a903      	add	r1, sp, #12
 23fd15e:	a801      	add	r0, sp, #4
 23fd160:	f7ff ff45 	bl	23fcfee <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fd164:	4601      	mov	r1, r0
 23fd166:	b1a8      	cbz	r0, 23fd194 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd168:	f10d 030b 	add.w	r3, sp, #11
 23fd16c:	4620      	mov	r0, r4
 23fd16e:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 23fd170:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd174:	f7ff ffac 	bl	23fd0d0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 23fd178:	f89d 300b 	ldrb.w	r3, [sp, #11]
 23fd17c:	b153      	cbz	r3, 23fd194 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 23fd17e:	6823      	ldr	r3, [r4, #0]
 23fd180:	2414      	movs	r4, #20
 23fd182:	fb04 3400 	mla	r4, r4, r0, r3
            if (node.level >= 0) {
 23fd186:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 23fd18a:	3408      	adds	r4, #8
            if (node.level >= 0) {
 23fd18c:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 23fd18e:	bfa8      	it	ge
 23fd190:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
 23fd192:	e7e3      	b.n	23fd15c <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 23fd194:	4628      	mov	r0, r5
 23fd196:	b004      	add	sp, #16
 23fd198:	bd70      	pop	{r4, r5, r6, pc}

023fd19a <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
 23fd19a:	b40e      	push	{r1, r2, r3}
 23fd19c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fd19e:	b08c      	sub	sp, #48	; 0x30
 23fd1a0:	af00      	add	r7, sp, #0
 23fd1a2:	f107 0544 	add.w	r5, r7, #68	; 0x44
 23fd1a6:	f855 2b04 	ldr.w	r2, [r5], #4
 23fd1aa:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd1ac:	462b      	mov	r3, r5
 23fd1ae:	2120      	movs	r1, #32
 23fd1b0:	f107 0010 	add.w	r0, r7, #16
 23fd1b4:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fd1b6:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd1b8:	f7ff fc9a 	bl	23fcaf0 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
 23fd1bc:	281f      	cmp	r0, #31
 23fd1be:	687a      	ldr	r2, [r7, #4]
 23fd1c0:	d91a      	bls.n	23fd1f8 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
 23fd1c2:	f100 0308 	add.w	r3, r0, #8
 23fd1c6:	f023 0307 	bic.w	r3, r3, #7
        }
 23fd1ca:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
 23fd1cc:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd1d0:	1c41      	adds	r1, r0, #1
 23fd1d2:	462b      	mov	r3, r5
 23fd1d4:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fd1d6:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd1d8:	f7ff fc8a 	bl	23fcaf0 <vsnprintf>
        if (n > 0) {
 23fd1dc:	1e02      	subs	r2, r0, #0
 23fd1de:	dd04      	ble.n	23fd1ea <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
 23fd1e0:	6823      	ldr	r3, [r4, #0]
 23fd1e2:	4669      	mov	r1, sp
 23fd1e4:	4620      	mov	r0, r4
 23fd1e6:	68db      	ldr	r3, [r3, #12]
 23fd1e8:	4798      	blx	r3
 23fd1ea:	46b5      	mov	sp, r6
}
 23fd1ec:	3730      	adds	r7, #48	; 0x30
 23fd1ee:	46bd      	mov	sp, r7
 23fd1f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fd1f4:	b003      	add	sp, #12
 23fd1f6:	4770      	bx	lr
    } else if (n > 0) {
 23fd1f8:	2800      	cmp	r0, #0
 23fd1fa:	d0f7      	beq.n	23fd1ec <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
 23fd1fc:	6823      	ldr	r3, [r4, #0]
 23fd1fe:	4602      	mov	r2, r0
 23fd200:	68db      	ldr	r3, [r3, #12]
 23fd202:	4620      	mov	r0, r4
 23fd204:	f107 0110 	add.w	r1, r7, #16
 23fd208:	4798      	blx	r3
}
 23fd20a:	e7ef      	b.n	23fd1ec <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

023fd20c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 23fd20c:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 23fd20e:	4c08      	ldr	r4, [pc, #32]	; (23fd230 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x24>)
 23fd210:	e8d4 3f8f 	ldab	r3, [r4]
 23fd214:	07db      	lsls	r3, r3, #31
 23fd216:	d409      	bmi.n	23fd22c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fd218:	4620      	mov	r0, r4
 23fd21a:	f7ff fcaf 	bl	23fcb7c <__cxa_guard_acquire>
 23fd21e:	b128      	cbz	r0, 23fd22c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fd220:	4620      	mov	r0, r4
 23fd222:	f7ff fcb9 	bl	23fcb98 <__cxa_guard_release>
 23fd226:	4803      	ldr	r0, [pc, #12]	; (23fd234 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 23fd228:	f002 f9a6 	bl	23ff578 <atexit>
}
 23fd22c:	4802      	ldr	r0, [pc, #8]	; (23fd238 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 23fd22e:	bd10      	pop	{r4, pc}
 23fd230:	1007af00 	.word	0x1007af00
 23fd234:	023fcfe9 	.word	0x023fcfe9
 23fd238:	1007aaa8 	.word	0x1007aaa8

023fd23c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 23fd23c:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 23fd23e:	4c08      	ldr	r4, [pc, #32]	; (23fd260 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x24>)
 23fd240:	e8d4 3f8f 	ldab	r3, [r4]
 23fd244:	07db      	lsls	r3, r3, #31
 23fd246:	d409      	bmi.n	23fd25c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fd248:	4620      	mov	r0, r4
 23fd24a:	f7ff fc97 	bl	23fcb7c <__cxa_guard_acquire>
 23fd24e:	b128      	cbz	r0, 23fd25c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fd250:	4620      	mov	r0, r4
 23fd252:	f7ff fca1 	bl	23fcb98 <__cxa_guard_release>
 23fd256:	4803      	ldr	r0, [pc, #12]	; (23fd264 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 23fd258:	f002 f98e 	bl	23ff578 <atexit>
    return &factory;
}
 23fd25c:	4802      	ldr	r0, [pc, #8]	; (23fd268 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 23fd25e:	bd10      	pop	{r4, pc}
 23fd260:	1007af04 	.word	0x1007af04
 23fd264:	023fd041 	.word	0x023fd041
 23fd268:	1007aaac 	.word	0x1007aaac

023fd26c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 23fd26c:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 23fd26e:	2500      	movs	r5, #0
 23fd270:	4604      	mov	r4, r0
 23fd272:	e9c0 5500 	strd	r5, r5, [r0]
 23fd276:	e9c0 5504 	strd	r5, r5, [r0, #16]
 23fd27a:	6085      	str	r5, [r0, #8]
 23fd27c:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
 23fd27e:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
 23fd282:	f7ff f81b 	bl	23fc2bc <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 23fd286:	f7ff ffc1 	bl	23fd20c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 23fd28a:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fd28c:	f7ff ffd6 	bl	23fd23c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 23fd290:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fd292:	6220      	str	r0, [r4, #32]
}
 23fd294:	4620      	mov	r0, r4
 23fd296:	bd38      	pop	{r3, r4, r5, pc}

023fd298 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 23fd298:	b510      	push	{r4, lr}
    static LogManager mgr;
 23fd29a:	4c0a      	ldr	r4, [pc, #40]	; (23fd2c4 <_ZN5spark10LogManager8instanceEv+0x2c>)
 23fd29c:	e8d4 3f8f 	ldab	r3, [r4]
 23fd2a0:	07db      	lsls	r3, r3, #31
 23fd2a2:	d40c      	bmi.n	23fd2be <_ZN5spark10LogManager8instanceEv+0x26>
 23fd2a4:	4620      	mov	r0, r4
 23fd2a6:	f7ff fc69 	bl	23fcb7c <__cxa_guard_acquire>
 23fd2aa:	b140      	cbz	r0, 23fd2be <_ZN5spark10LogManager8instanceEv+0x26>
 23fd2ac:	4806      	ldr	r0, [pc, #24]	; (23fd2c8 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fd2ae:	f7ff ffdd 	bl	23fd26c <_ZN5spark10LogManagerC1Ev>
 23fd2b2:	4620      	mov	r0, r4
 23fd2b4:	f7ff fc70 	bl	23fcb98 <__cxa_guard_release>
 23fd2b8:	4804      	ldr	r0, [pc, #16]	; (23fd2cc <_ZN5spark10LogManager8instanceEv+0x34>)
 23fd2ba:	f002 f95d 	bl	23ff578 <atexit>
    return &mgr;
}
 23fd2be:	4802      	ldr	r0, [pc, #8]	; (23fd2c8 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fd2c0:	bd10      	pop	{r4, pc}
 23fd2c2:	bf00      	nop
 23fd2c4:	1007aefc 	.word	0x1007aefc
 23fd2c8:	1007af0c 	.word	0x1007af0c
 23fd2cc:	023fd80d 	.word	0x023fd80d

023fd2d0 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 23fd2d0:	2300      	movs	r3, #0
 23fd2d2:	4a02      	ldr	r2, [pc, #8]	; (23fd2dc <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 23fd2d4:	4902      	ldr	r1, [pc, #8]	; (23fd2e0 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 23fd2d6:	4803      	ldr	r0, [pc, #12]	; (23fd2e4 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 23fd2d8:	f7ff ba90 	b.w	23fc7fc <log_set_callbacks>
 23fd2dc:	023fd5f5 	.word	0x023fd5f5
 23fd2e0:	023fd581 	.word	0x023fd581
 23fd2e4:	023fd501 	.word	0x023fd501

023fd2e8 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 23fd2e8:	2300      	movs	r3, #0
 23fd2ea:	461a      	mov	r2, r3
 23fd2ec:	4619      	mov	r1, r3
 23fd2ee:	4618      	mov	r0, r3
 23fd2f0:	f7ff ba84 	b.w	23fc7fc <log_set_callbacks>

023fd2f4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 23fd2f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd2f6:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 23fd2f8:	688d      	ldr	r5, [r1, #8]
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fd2fa:	4668      	mov	r0, sp
 23fd2fc:	f7ff fc98 	bl	23fcc30 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fd300:	466a      	mov	r2, sp
 23fd302:	4629      	mov	r1, r5
 23fd304:	4620      	mov	r0, r4
 23fd306:	f001 f8e3 	bl	23fe4d0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 23fd30a:	a801      	add	r0, sp, #4
 23fd30c:	f7ff fc99 	bl	23fcc42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fd310:	4620      	mov	r0, r4
 23fd312:	b003      	add	sp, #12
 23fd314:	bd30      	pop	{r4, r5, pc}

023fd316 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 23fd316:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd318:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 23fd31a:	68cd      	ldr	r5, [r1, #12]
 23fd31c:	4668      	mov	r0, sp
 23fd31e:	f7ff fc87 	bl	23fcc30 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fd322:	466a      	mov	r2, sp
 23fd324:	4629      	mov	r1, r5
 23fd326:	4620      	mov	r0, r4
 23fd328:	f001 f8ae 	bl	23fe488 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fd32c:	a801      	add	r0, sp, #4
 23fd32e:	f7ff fc88 	bl	23fcc42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fd332:	4620      	mov	r0, r4
 23fd334:	b003      	add	sp, #12
 23fd336:	bd30      	pop	{r4, r5, pc}

023fd338 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 23fd338:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd33a:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 23fd33c:	690d      	ldr	r5, [r1, #16]
 23fd33e:	4668      	mov	r0, sp
 23fd340:	f7ff fc76 	bl	23fcc30 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fd344:	466a      	mov	r2, sp
 23fd346:	4629      	mov	r1, r5
 23fd348:	4620      	mov	r0, r4
 23fd34a:	f001 f846 	bl	23fe3da <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fd34e:	a801      	add	r0, sp, #4
 23fd350:	f7ff fc77 	bl	23fcc42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fd354:	4620      	mov	r0, r4
 23fd356:	b003      	add	sp, #12
 23fd358:	bd30      	pop	{r4, r5, pc}
	...

023fd35c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 23fd35c:	b570      	push	{r4, r5, r6, lr}
 23fd35e:	b08a      	sub	sp, #40	; 0x28
 23fd360:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 23fd362:	4601      	mov	r1, r0
 23fd364:	a804      	add	r0, sp, #16
 23fd366:	f7ff ffc5 	bl	23fd2f4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 23fd36a:	4e14      	ldr	r6, [pc, #80]	; (23fd3bc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 23fd36c:	a804      	add	r0, sp, #16
 23fd36e:	f001 f8c7 	bl	23fe500 <_ZN5spark18JSONObjectIterator4nextEv>
 23fd372:	b1e8      	cbz	r0, 23fd3b0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 23fd374:	4668      	mov	r0, sp
 23fd376:	a904      	add	r1, sp, #16
 23fd378:	f7ff ffcd 	bl	23fd316 <_ZNK5spark18JSONObjectIterator4nameEv>
 23fd37c:	4631      	mov	r1, r6
 23fd37e:	9802      	ldr	r0, [sp, #8]
 23fd380:	f7ff fe57 	bl	23fd032 <_ZNK5spark10JSONStringeqEPKc.isra.0>
 23fd384:	4604      	mov	r4, r0
 23fd386:	b110      	cbz	r0, 23fd38e <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 23fd388:	1e2c      	subs	r4, r5, #0
 23fd38a:	bf18      	it	ne
 23fd38c:	2401      	movne	r4, #1
 23fd38e:	a801      	add	r0, sp, #4
 23fd390:	f7ff fc57 	bl	23fcc42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fd394:	2c00      	cmp	r4, #0
 23fd396:	d0e9      	beq.n	23fd36c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 23fd398:	4668      	mov	r0, sp
 23fd39a:	a904      	add	r1, sp, #16
 23fd39c:	f7ff ffcc 	bl	23fd338 <_ZNK5spark18JSONObjectIterator5valueEv>
 23fd3a0:	4668      	mov	r0, sp
 23fd3a2:	f001 f850 	bl	23fe446 <_ZNK5spark9JSONValue5toIntEv>
 23fd3a6:	6028      	str	r0, [r5, #0]
 23fd3a8:	a801      	add	r0, sp, #4
 23fd3aa:	f7ff fc4a 	bl	23fcc42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fd3ae:	e7dd      	b.n	23fd36c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 23fd3b0:	a805      	add	r0, sp, #20
 23fd3b2:	f7ff fc46 	bl	23fcc42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fd3b6:	b00a      	add	sp, #40	; 0x28
 23fd3b8:	bd70      	pop	{r4, r5, r6, pc}
 23fd3ba:	bf00      	nop
 23fd3bc:	023ffa84 	.word	0x023ffa84

023fd3c0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fd3c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd3c2:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 23fd3c4:	4913      	ldr	r1, [pc, #76]	; (23fd414 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
 23fd3c6:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fd3c8:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 23fd3ca:	f7fe f905 	bl	23fb5d8 <strcmp>
 23fd3ce:	b950      	cbnz	r0, 23fd3e6 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
 23fd3d0:	f000 ff72 	bl	23fe2b8 <_Z16_fetch_usbserialv>
 23fd3d4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fd3d8:	f000 ff5e 	bl	23fe298 <_ZN9USBSerial5beginEl>
}
 23fd3dc:	b003      	add	sp, #12
 23fd3de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
 23fd3e2:	f000 bf69 	b.w	23fe2b8 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
 23fd3e6:	4620      	mov	r0, r4
 23fd3e8:	490b      	ldr	r1, [pc, #44]	; (23fd418 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
 23fd3ea:	f7fe f8f5 	bl	23fb5d8 <strcmp>
 23fd3ee:	b978      	cbnz	r0, 23fd410 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
 23fd3f0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 23fd3f4:	a901      	add	r1, sp, #4
 23fd3f6:	4628      	mov	r0, r5
        int baud = 9600;
 23fd3f8:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 23fd3fa:	f7ff ffaf 	bl	23fd35c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 23fd3fe:	f001 fed1 	bl	23ff1a4 <_Z22__fetch_global_Serial1v>
 23fd402:	9901      	ldr	r1, [sp, #4]
 23fd404:	f001 f9aa 	bl	23fe75c <_ZN11USARTSerial5beginEm>
        return &Serial1;
 23fd408:	f001 fecc 	bl	23ff1a4 <_Z22__fetch_global_Serial1v>
}
 23fd40c:	b003      	add	sp, #12
 23fd40e:	bd30      	pop	{r4, r5, pc}
    return nullptr;
 23fd410:	2000      	movs	r0, #0
 23fd412:	e7fb      	b.n	23fd40c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
 23fd414:	023ffa89 	.word	0x023ffa89
 23fd418:	023ffa90 	.word	0x023ffa90

023fd41c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fd41c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fd41e:	2614      	movs	r6, #20
 23fd420:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fd424:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fd426:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fd42a:	42ae      	cmp	r6, r5
 23fd42c:	d005      	beq.n	23fd43a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 23fd42e:	f105 0008 	add.w	r0, r5, #8
 23fd432:	f7ff fff3 	bl	23fd41c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fd436:	3514      	adds	r5, #20
 23fd438:	e7f7      	b.n	23fd42a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fd43a:	6820      	ldr	r0, [r4, #0]
 23fd43c:	f7ff fb3c 	bl	23fcab8 <free>
}
 23fd440:	4620      	mov	r0, r4
 23fd442:	bd70      	pop	{r4, r5, r6, pc}

023fd444 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 23fd444:	b510      	push	{r4, lr}
 23fd446:	4604      	mov	r4, r0
 23fd448:	300c      	adds	r0, #12
 23fd44a:	f7ff ffe7 	bl	23fd41c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fd44e:	4620      	mov	r0, r4
 23fd450:	f7ff fd24 	bl	23fce9c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fd454:	4620      	mov	r0, r4
 23fd456:	bd10      	pop	{r4, pc}

023fd458 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 23fd458:	b510      	push	{r4, lr}
 23fd45a:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 23fd45c:	4b03      	ldr	r3, [pc, #12]	; (23fd46c <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 23fd45e:	f840 3b04 	str.w	r3, [r0], #4
 23fd462:	f7ff ffef 	bl	23fd444 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 23fd466:	4620      	mov	r0, r4
 23fd468:	bd10      	pop	{r4, pc}
 23fd46a:	bf00      	nop
 23fd46c:	023ff9f8 	.word	0x023ff9f8

023fd470 <_ZN5spark16StreamLogHandlerD0Ev>:
 23fd470:	b510      	push	{r4, lr}
 23fd472:	4604      	mov	r4, r0
 23fd474:	f7ff fff0 	bl	23fd458 <_ZN5spark16StreamLogHandlerD1Ev>
 23fd478:	4620      	mov	r0, r4
 23fd47a:	2124      	movs	r1, #36	; 0x24
 23fd47c:	f7fe f8df 	bl	23fb63e <_ZdlPvj>
 23fd480:	4620      	mov	r0, r4
 23fd482:	bd10      	pop	{r4, pc}

023fd484 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 23fd484:	b510      	push	{r4, lr}
 23fd486:	4604      	mov	r4, r0
 23fd488:	4b02      	ldr	r3, [pc, #8]	; (23fd494 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 23fd48a:	6003      	str	r3, [r0, #0]
 23fd48c:	f7ff ffe4 	bl	23fd458 <_ZN5spark16StreamLogHandlerD1Ev>
 23fd490:	4620      	mov	r0, r4
 23fd492:	bd10      	pop	{r4, pc}
 23fd494:	023ffb18 	.word	0x023ffb18

023fd498 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 23fd498:	b510      	push	{r4, lr}
 23fd49a:	4604      	mov	r4, r0
 23fd49c:	f7ff fff2 	bl	23fd484 <_ZN5spark20JSONStreamLogHandlerD1Ev>
 23fd4a0:	4620      	mov	r0, r4
 23fd4a2:	2124      	movs	r1, #36	; 0x24
 23fd4a4:	f7fe f8cb 	bl	23fb63e <_ZdlPvj>
 23fd4a8:	4620      	mov	r0, r4
 23fd4aa:	bd10      	pop	{r4, pc}

023fd4ac <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
 23fd4ac:	680a      	ldr	r2, [r1, #0]
 23fd4ae:	b510      	push	{r4, lr}
 23fd4b0:	6002      	str	r2, [r0, #0]
 23fd4b2:	684a      	ldr	r2, [r1, #4]
 23fd4b4:	6042      	str	r2, [r0, #4]
        capacity_(0) {
 23fd4b6:	2200      	movs	r2, #0
 23fd4b8:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23fd4bc:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fd4be:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd4c0:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fd4c2:	6084      	str	r4, [r0, #8]
 23fd4c4:	68cc      	ldr	r4, [r1, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd4c6:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fd4c8:	60c4      	str	r4, [r0, #12]
 23fd4ca:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd4cc:	610a      	str	r2, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fd4ce:	6104      	str	r4, [r0, #16]
 23fd4d0:	bd10      	pop	{r4, pc}

023fd4d2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
 23fd4d2:	2200      	movs	r2, #0
 23fd4d4:	e9c0 2200 	strd	r2, r2, [r0]
 23fd4d8:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 23fd4da:	b510      	push	{r4, lr}
 23fd4dc:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd4de:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fd4e0:	6004      	str	r4, [r0, #0]
 23fd4e2:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd4e4:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fd4e6:	6044      	str	r4, [r0, #4]
 23fd4e8:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd4ea:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fd4ec:	6084      	str	r4, [r0, #8]
}
 23fd4ee:	bd10      	pop	{r4, pc}

023fd4f0 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 23fd4f0:	b510      	push	{r4, lr}
 23fd4f2:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23fd4f4:	6803      	ldr	r3, [r0, #0]
 23fd4f6:	6818      	ldr	r0, [r3, #0]
 23fd4f8:	f7fe ff0a 	bl	23fc310 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 23fd4fc:	4620      	mov	r0, r4
 23fd4fe:	bd10      	pop	{r4, pc}

023fd500 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 23fd500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fd504:	b087      	sub	sp, #28
 23fd506:	9303      	str	r3, [sp, #12]

#elif defined(CONFIG_PLATFORM_8721D)


static inline bool hal_interrupt_is_isr() {
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 23fd508:	4b1c      	ldr	r3, [pc, #112]	; (23fd57c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 23fd50a:	4680      	mov	r8, r0
 23fd50c:	685b      	ldr	r3, [r3, #4]
 23fd50e:	4689      	mov	r9, r1
 23fd510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fd514:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
 23fd516:	b96b      	cbnz	r3, 23fd534 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 23fd518:	f7ff febe 	bl	23fd298 <_ZN5spark10LogManager8instanceEv>
 23fd51c:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fd51e:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
 23fd522:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fd524:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
 23fd526:	f7ff fd82 	bl	23fd02e <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
 23fd52a:	7b23      	ldrb	r3, [r4, #12]
 23fd52c:	b12b      	cbz	r3, 23fd53a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 23fd52e:	a805      	add	r0, sp, #20
 23fd530:	f7ff ffde 	bl	23fd4f0 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 23fd534:	b007      	add	sp, #28
 23fd536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 23fd53a:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 23fd53c:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 23fd540:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 23fd542:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fd546:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fd54a:	45aa      	cmp	sl, r5
 23fd54c:	d012      	beq.n	23fd574 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 23fd54e:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 23fd552:	4631      	mov	r1, r6
 23fd554:	1d38      	adds	r0, r7, #4
 23fd556:	f7ff fdf7 	bl	23fd148 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fd55a:	4581      	cmp	r9, r0
 23fd55c:	d3f5      	bcc.n	23fd54a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 23fd55e:	9a03      	ldr	r2, [sp, #12]
 23fd560:	683b      	ldr	r3, [r7, #0]
 23fd562:	9200      	str	r2, [sp, #0]
 23fd564:	f8d3 b008 	ldr.w	fp, [r3, #8]
 23fd568:	464a      	mov	r2, r9
 23fd56a:	4633      	mov	r3, r6
 23fd56c:	4641      	mov	r1, r8
 23fd56e:	4638      	mov	r0, r7
 23fd570:	47d8      	blx	fp
 23fd572:	e7ea      	b.n	23fd54a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 23fd574:	2300      	movs	r3, #0
 23fd576:	7323      	strb	r3, [r4, #12]
 23fd578:	e7d9      	b.n	23fd52e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 23fd57a:	bf00      	nop
 23fd57c:	e000ed00 	.word	0xe000ed00

023fd580 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 23fd580:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fd584:	469b      	mov	fp, r3
 23fd586:	4b1a      	ldr	r3, [pc, #104]	; (23fd5f0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 23fd588:	4680      	mov	r8, r0
 23fd58a:	685b      	ldr	r3, [r3, #4]
 23fd58c:	4689      	mov	r9, r1
 23fd58e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fd592:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
 23fd594:	b96b      	cbnz	r3, 23fd5b2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 23fd596:	f7ff fe7f 	bl	23fd298 <_ZN5spark10LogManager8instanceEv>
 23fd59a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fd59c:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fd5a0:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fd5a2:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fd5a4:	f7ff fd43 	bl	23fd02e <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
 23fd5a8:	7b23      	ldrb	r3, [r4, #12]
 23fd5aa:	b12b      	cbz	r3, 23fd5b8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 23fd5ac:	a801      	add	r0, sp, #4
 23fd5ae:	f7ff ff9f 	bl	23fd4f0 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fd5b2:	b003      	add	sp, #12
 23fd5b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 23fd5b8:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 23fd5ba:	b2f6      	uxtb	r6, r6
 23fd5bc:	7323      	strb	r3, [r4, #12]
 23fd5be:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fd5c2:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fd5c6:	4555      	cmp	r5, sl
 23fd5c8:	d00e      	beq.n	23fd5e8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 23fd5ca:	f855 7b04 	ldr.w	r7, [r5], #4
 23fd5ce:	4659      	mov	r1, fp
 23fd5d0:	1d38      	adds	r0, r7, #4
 23fd5d2:	f7ff fdb9 	bl	23fd148 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fd5d6:	4286      	cmp	r6, r0
 23fd5d8:	d3f5      	bcc.n	23fd5c6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 23fd5da:	683b      	ldr	r3, [r7, #0]
 23fd5dc:	464a      	mov	r2, r9
 23fd5de:	4641      	mov	r1, r8
 23fd5e0:	4638      	mov	r0, r7
 23fd5e2:	68db      	ldr	r3, [r3, #12]
 23fd5e4:	4798      	blx	r3
 23fd5e6:	e7ee      	b.n	23fd5c6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 23fd5e8:	2300      	movs	r3, #0
 23fd5ea:	7323      	strb	r3, [r4, #12]
 23fd5ec:	e7de      	b.n	23fd5ac <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 23fd5ee:	bf00      	nop
 23fd5f0:	e000ed00 	.word	0xe000ed00

023fd5f4 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 23fd5f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fd5f8:	4b16      	ldr	r3, [pc, #88]	; (23fd654 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 23fd5fa:	4605      	mov	r5, r0
 23fd5fc:	685b      	ldr	r3, [r3, #4]
 23fd5fe:	460f      	mov	r7, r1
 23fd600:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (hal_interrupt_is_isr()) {
 23fd604:	bb1b      	cbnz	r3, 23fd64e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 23fd606:	f7ff fe47 	bl	23fd298 <_ZN5spark10LogManager8instanceEv>
 23fd60a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fd60c:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fd610:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fd612:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fd614:	f7ff fd0b 	bl	23fd02e <_ZN14RecursiveMutex4lockEv.isra.0>
 23fd618:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 23fd61c:	2446      	movs	r4, #70	; 0x46
 23fd61e:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fd622:	45b0      	cmp	r8, r6
 23fd624:	d109      	bne.n	23fd63a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 23fd626:	a801      	add	r0, sp, #4
 23fd628:	f7ff ff62 	bl	23fd4f0 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 23fd62c:	42a5      	cmp	r5, r4
 23fd62e:	bfb4      	ite	lt
 23fd630:	2000      	movlt	r0, #0
 23fd632:	2001      	movge	r0, #1
}
 23fd634:	b002      	add	sp, #8
 23fd636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 23fd63a:	f856 0b04 	ldr.w	r0, [r6], #4
 23fd63e:	4639      	mov	r1, r7
 23fd640:	3004      	adds	r0, #4
 23fd642:	f7ff fd81 	bl	23fd148 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 23fd646:	4284      	cmp	r4, r0
 23fd648:	bfa8      	it	ge
 23fd64a:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 23fd64c:	e7e9      	b.n	23fd622 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 23fd64e:	2000      	movs	r0, #0
 23fd650:	e7f0      	b.n	23fd634 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 23fd652:	bf00      	nop
 23fd654:	e000ed00 	.word	0xe000ed00

023fd658 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fd658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd65a:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 23fd65e:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fd660:	4604      	mov	r4, r0
 23fd662:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd664:	db0d      	blt.n	23fd682 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
 23fd666:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
 23fd668:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fd66a:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fd66c:	dd04      	ble.n	23fd678 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
 23fd66e:	00b9      	lsls	r1, r7, #2
 23fd670:	f7ff fa30 	bl	23fcad4 <realloc>
            if (!d) {
 23fd674:	b918      	cbnz	r0, 23fd67e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
 23fd676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 23fd678:	f7ff fa1e 	bl	23fcab8 <free>
        T* d = nullptr;
 23fd67c:	2000      	movs	r0, #0
        data_ = d;
 23fd67e:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fd680:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 23fd682:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fd684:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fd686:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
 23fd68a:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fd68c:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
 23fd690:	1d08      	adds	r0, r1, #4
 23fd692:	f001 ff8c 	bl	23ff5ae <memmove>
    new(p) T(std::move(value));
 23fd696:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
 23fd69a:	6863      	ldr	r3, [r4, #4]
    return true;
 23fd69c:	2001      	movs	r0, #1
    ++size_;
 23fd69e:	3301      	adds	r3, #1
 23fd6a0:	6063      	str	r3, [r4, #4]
    return true;
 23fd6a2:	e7e8      	b.n	23fd676 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

023fd6a4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fd6a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd6a6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fd6a8:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fd6ac:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fd6ae:	9301      	str	r3, [sp, #4]
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fd6b0:	460d      	mov	r5, r1
      { _M_device.lock(); }
 23fd6b2:	f7ff fcbc 	bl	23fd02e <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
 23fd6b6:	e9d4 3200 	ldrd	r3, r2, [r4]
 23fd6ba:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
 23fd6be:	4293      	cmp	r3, r2
 23fd6c0:	4619      	mov	r1, r3
 23fd6c2:	d00a      	beq.n	23fd6da <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 23fd6c4:	6809      	ldr	r1, [r1, #0]
 23fd6c6:	3304      	adds	r3, #4
 23fd6c8:	42a9      	cmp	r1, r5
 23fd6ca:	d1f8      	bne.n	23fd6be <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
 23fd6cc:	a801      	add	r0, sp, #4
 23fd6ce:	f7ff ff0f 	bl	23fd4f0 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fd6d2:	2500      	movs	r5, #0
}
 23fd6d4:	4628      	mov	r0, r5
 23fd6d6:	b003      	add	sp, #12
 23fd6d8:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 23fd6da:	4629      	mov	r1, r5
 23fd6dc:	4620      	mov	r0, r4
 23fd6de:	f7ff ffbb 	bl	23fd658 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
 23fd6e2:	4605      	mov	r5, r0
 23fd6e4:	2800      	cmp	r0, #0
 23fd6e6:	d0f1      	beq.n	23fd6cc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 23fd6e8:	6863      	ldr	r3, [r4, #4]
 23fd6ea:	2b01      	cmp	r3, #1
 23fd6ec:	d101      	bne.n	23fd6f2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 23fd6ee:	f7ff fdef 	bl	23fd2d0 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fd6f2:	a801      	add	r0, sp, #4
 23fd6f4:	f7ff fefc 	bl	23fd4f0 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fd6f8:	e7ec      	b.n	23fd6d4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

023fd6fa <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fd6fa:	460b      	mov	r3, r1
 23fd6fc:	b570      	push	{r4, r5, r6, lr}
 23fd6fe:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 23fd700:	e9d0 0200 	ldrd	r0, r2, [r0]
 23fd704:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 23fd708:	4282      	cmp	r2, r0
 23fd70a:	d00f      	beq.n	23fd72c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
 23fd70c:	4601      	mov	r1, r0
            if (*p == value) {
 23fd70e:	681d      	ldr	r5, [r3, #0]
 23fd710:	f851 6b04 	ldr.w	r6, [r1], #4
 23fd714:	42ae      	cmp	r6, r5
 23fd716:	d107      	bne.n	23fd728 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fd718:	1a52      	subs	r2, r2, r1
 23fd71a:	f001 ff48 	bl	23ff5ae <memmove>
    return true;
 23fd71e:	2001      	movs	r0, #1
    --size_;
 23fd720:	6863      	ldr	r3, [r4, #4]
 23fd722:	3b01      	subs	r3, #1
 23fd724:	6063      	str	r3, [r4, #4]
}
 23fd726:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
 23fd728:	4608      	mov	r0, r1
 23fd72a:	e7ed      	b.n	23fd708 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
 23fd72c:	2000      	movs	r0, #0
 23fd72e:	e7fa      	b.n	23fd726 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

023fd730 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fd730:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fd732:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fd734:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fd738:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fd73a:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fd73c:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
 23fd73e:	f7ff fc76 	bl	23fd02e <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 23fd742:	4620      	mov	r0, r4
 23fd744:	a901      	add	r1, sp, #4
 23fd746:	f7ff ffd8 	bl	23fd6fa <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 23fd74a:	b118      	cbz	r0, 23fd754 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 23fd74c:	6863      	ldr	r3, [r4, #4]
 23fd74e:	b90b      	cbnz	r3, 23fd754 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 23fd750:	f7ff fdca 	bl	23fd2e8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fd754:	a803      	add	r0, sp, #12
 23fd756:	f7ff fecb 	bl	23fd4f0 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fd75a:	b004      	add	sp, #16
 23fd75c:	bd10      	pop	{r4, pc}

023fd75e <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 23fd75e:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 23fd760:	b570      	push	{r4, r5, r6, lr}
 23fd762:	4604      	mov	r4, r0
 23fd764:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 23fd768:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 23fd76c:	42ae      	cmp	r6, r5
 23fd76e:	d015      	beq.n	23fd79c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 23fd770:	4620      	mov	r0, r4
 23fd772:	f105 0110 	add.w	r1, r5, #16
 23fd776:	f7ff ffc0 	bl	23fd6fa <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 23fd77a:	6863      	ldr	r3, [r4, #4]
 23fd77c:	b90b      	cbnz	r3, 23fd782 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 23fd77e:	f7ff fdb3 	bl	23fd2e8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 23fd782:	69e0      	ldr	r0, [r4, #28]
 23fd784:	6929      	ldr	r1, [r5, #16]
 23fd786:	6803      	ldr	r3, [r0, #0]
 23fd788:	68db      	ldr	r3, [r3, #12]
 23fd78a:	4798      	blx	r3
        if (h.stream) {
 23fd78c:	6969      	ldr	r1, [r5, #20]
 23fd78e:	b119      	cbz	r1, 23fd798 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 23fd790:	6a20      	ldr	r0, [r4, #32]
 23fd792:	6803      	ldr	r3, [r0, #0]
 23fd794:	68db      	ldr	r3, [r3, #12]
 23fd796:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 23fd798:	3518      	adds	r5, #24
 23fd79a:	e7e7      	b.n	23fd76c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 23fd79c:	2618      	movs	r6, #24
 23fd79e:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fd7a2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fd7a6:	42ae      	cmp	r6, r5
 23fd7a8:	d004      	beq.n	23fd7b4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 23fd7aa:	4628      	mov	r0, r5
 23fd7ac:	f7ff fa98 	bl	23fcce0 <_ZN6StringD1Ev>
 23fd7b0:	3518      	adds	r5, #24
 23fd7b2:	e7f8      	b.n	23fd7a6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 23fd7b4:	2300      	movs	r3, #0
 23fd7b6:	6163      	str	r3, [r4, #20]
}
 23fd7b8:	bd70      	pop	{r4, r5, r6, pc}

023fd7ba <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 23fd7ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fd7bc:	4604      	mov	r4, r0
    resetSystemCallbacks();
 23fd7be:	f7ff fd93 	bl	23fd2e8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fd7c2:	f104 0324 	add.w	r3, r4, #36	; 0x24
 23fd7c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fd7c8:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fd7ca:	f7ff fc30 	bl	23fd02e <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
 23fd7ce:	4620      	mov	r0, r4
 23fd7d0:	f7ff ffc5 	bl	23fd75e <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 23fd7d4:	a801      	add	r0, sp, #4
 23fd7d6:	f7ff fe8b 	bl	23fd4f0 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 23fd7da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fd7dc:	b108      	cbz	r0, 23fd7e2 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 23fd7de:	f7fe fd7b 	bl	23fc2d8 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 23fd7e2:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fd7e6:	2618      	movs	r6, #24
 23fd7e8:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fd7ec:	42ae      	cmp	r6, r5
 23fd7ee:	d004      	beq.n	23fd7fa <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 23fd7f0:	4628      	mov	r0, r5
 23fd7f2:	f7ff fa75 	bl	23fcce0 <_ZN6StringD1Ev>
 23fd7f6:	3518      	adds	r5, #24
 23fd7f8:	e7f8      	b.n	23fd7ec <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 23fd7fa:	6920      	ldr	r0, [r4, #16]
 23fd7fc:	f7ff f95c 	bl	23fcab8 <free>
 23fd800:	6820      	ldr	r0, [r4, #0]
 23fd802:	f7ff f959 	bl	23fcab8 <free>
}
 23fd806:	4620      	mov	r0, r4
 23fd808:	b002      	add	sp, #8
 23fd80a:	bd70      	pop	{r4, r5, r6, pc}

023fd80c <__tcf_2>:
    static LogManager mgr;
 23fd80c:	4801      	ldr	r0, [pc, #4]	; (23fd814 <__tcf_2+0x8>)
 23fd80e:	f7ff bfd4 	b.w	23fd7ba <_ZN5spark10LogManagerD1Ev>
 23fd812:	bf00      	nop
 23fd814:	1007af0c 	.word	0x1007af0c

023fd818 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 23fd818:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fd81a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd81c:	4604      	mov	r4, r0
 23fd81e:	460d      	mov	r5, r1
 23fd820:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fd822:	d915      	bls.n	23fd850 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
 23fd824:	4290      	cmp	r0, r2
 23fd826:	d214      	bcs.n	23fd852 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
 23fd828:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fd82c:	1a75      	subs	r5, r6, r1
 23fd82e:	f1a1 0714 	sub.w	r7, r1, #20
 23fd832:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fd834:	42b7      	cmp	r7, r6
 23fd836:	d01a      	beq.n	23fd86e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
 23fd838:	b11c      	cbz	r4, 23fd842 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
 23fd83a:	4631      	mov	r1, r6
 23fd83c:	4620      	mov	r0, r4
 23fd83e:	f7ff fe35 	bl	23fd4ac <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
 23fd842:	f106 0008 	add.w	r0, r6, #8
 23fd846:	f7ff fde9 	bl	23fd41c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 23fd84a:	3e14      	subs	r6, #20
 23fd84c:	3c14      	subs	r4, #20
 23fd84e:	e7f1      	b.n	23fd834 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
 23fd850:	d00d      	beq.n	23fd86e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
 23fd852:	42b5      	cmp	r5, r6
 23fd854:	d00b      	beq.n	23fd86e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
 23fd856:	b11c      	cbz	r4, 23fd860 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
 23fd858:	4629      	mov	r1, r5
 23fd85a:	4620      	mov	r0, r4
 23fd85c:	f7ff fe26 	bl	23fd4ac <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
 23fd860:	f105 0008 	add.w	r0, r5, #8
 23fd864:	f7ff fdda 	bl	23fd41c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 23fd868:	3514      	adds	r5, #20
 23fd86a:	3414      	adds	r4, #20
 23fd86c:	e7f1      	b.n	23fd852 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
 23fd86e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fd870 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fd870:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fd872:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd874:	4604      	mov	r4, r0
 23fd876:	460d      	mov	r5, r1
 23fd878:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fd87a:	d914      	bls.n	23fd8a6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 23fd87c:	4290      	cmp	r0, r2
 23fd87e:	d213      	bcs.n	23fd8a8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 23fd880:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 23fd884:	1a75      	subs	r5, r6, r1
 23fd886:	f1a1 0710 	sub.w	r7, r1, #16
 23fd88a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fd88c:	42b7      	cmp	r7, r6
 23fd88e:	d018      	beq.n	23fd8c2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 23fd890:	b11c      	cbz	r4, 23fd89a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 23fd892:	4631      	mov	r1, r6
 23fd894:	4620      	mov	r0, r4
 23fd896:	f7ff faa0 	bl	23fcdda <_ZN6StringC1EOS_>
                end->~T();
 23fd89a:	4630      	mov	r0, r6
 23fd89c:	f7ff fa20 	bl	23fcce0 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fd8a0:	3e10      	subs	r6, #16
 23fd8a2:	3c10      	subs	r4, #16
 23fd8a4:	e7f2      	b.n	23fd88c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fd8a6:	d00c      	beq.n	23fd8c2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 23fd8a8:	42b5      	cmp	r5, r6
 23fd8aa:	d00a      	beq.n	23fd8c2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 23fd8ac:	b11c      	cbz	r4, 23fd8b6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 23fd8ae:	4629      	mov	r1, r5
 23fd8b0:	4620      	mov	r0, r4
 23fd8b2:	f7ff fa92 	bl	23fcdda <_ZN6StringC1EOS_>
                p->~T();
 23fd8b6:	4628      	mov	r0, r5
 23fd8b8:	f7ff fa12 	bl	23fcce0 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fd8bc:	3510      	adds	r5, #16
 23fd8be:	3410      	adds	r4, #16
 23fd8c0:	e7f2      	b.n	23fd8a8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 23fd8c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fd8c4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 23fd8c4:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23fd8c6:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fd8c8:	4605      	mov	r5, r0
        if (n > 0) {
 23fd8ca:	dd11      	ble.n	23fd8f0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 23fd8cc:	0130      	lsls	r0, r6, #4
 23fd8ce:	f7ff f8e5 	bl	23fca9c <malloc>
            if (!d) {
 23fd8d2:	4604      	mov	r4, r0
 23fd8d4:	b158      	cbz	r0, 23fd8ee <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23fd8d6:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fd8da:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 23fd8de:	f7ff ffc7 	bl	23fd870 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fd8e2:	6828      	ldr	r0, [r5, #0]
 23fd8e4:	f7ff f8e8 	bl	23fcab8 <free>
        return true;
 23fd8e8:	2001      	movs	r0, #1
        data_ = d;
 23fd8ea:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fd8ec:	60ae      	str	r6, [r5, #8]
    }
 23fd8ee:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23fd8f0:	2400      	movs	r4, #0
 23fd8f2:	e7f6      	b.n	23fd8e2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

023fd8f4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fd8f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fd8f8:	4690      	mov	r8, r2
        capacity_(0) {
 23fd8fa:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fd8fc:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fd8fe:	b095      	sub	sp, #84	; 0x54
 23fd900:	9103      	str	r1, [sp, #12]
    return size_;
 23fd902:	f8d8 1004 	ldr.w	r1, [r8, #4]
 23fd906:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 23fd908:	4299      	cmp	r1, r3
        capacity_(0) {
 23fd90a:	e9c0 3300 	strd	r3, r3, [r0]
 23fd90e:	e9c0 3302 	strd	r3, r3, [r0, #8]
 23fd912:	e9c0 3304 	strd	r3, r3, [r0, #16]
 23fd916:	e9cd 3308 	strd	r3, r3, [sp, #32]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fd91a:	7602      	strb	r2, [r0, #24]
 23fd91c:	930a      	str	r3, [sp, #40]	; 0x28
    if (n > capacity_ && !realloc(n)) {
 23fd91e:	dc23      	bgt.n	23fd968 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 23fd920:	e9d8 5700 	ldrd	r5, r7, [r8]
 23fd924:	2314      	movs	r3, #20
 23fd926:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 23fd92a:	42af      	cmp	r7, r5
 23fd92c:	d03b      	beq.n	23fd9a6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 23fd92e:	4629      	mov	r1, r5
 23fd930:	a80b      	add	r0, sp, #44	; 0x2c
 23fd932:	f7ff fa52 	bl	23fcdda <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 23fd936:	a90b      	add	r1, sp, #44	; 0x2c
 23fd938:	a80f      	add	r0, sp, #60	; 0x3c
 23fd93a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 23fd93c:	f7ff fa4d 	bl	23fcdda <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd940:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
 23fd944:	4299      	cmp	r1, r3
 23fd946:	da1b      	bge.n	23fd980 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 23fd948:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 23fd94a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
 23fd94c:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 23fd950:	4631      	mov	r1, r6
 23fd952:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 23fd956:	f106 0010 	add.w	r0, r6, #16
 23fd95a:	f7ff ff89 	bl	23fd870 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 23fd95e:	b9ee      	cbnz	r6, 23fd99c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 23fd960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fd962:	3301      	adds	r3, #1
 23fd964:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
 23fd966:	e011      	b.n	23fd98c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 23fd968:	a808      	add	r0, sp, #32
 23fd96a:	f7ff ffab 	bl	23fd8c4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fd96e:	2800      	cmp	r0, #0
 23fd970:	d1d6      	bne.n	23fd920 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
 23fd972:	a808      	add	r0, sp, #32
 23fd974:	f7ff fa92 	bl	23fce9c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fd978:	4620      	mov	r0, r4
 23fd97a:	b015      	add	sp, #84	; 0x54
 23fd97c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd980:	3101      	adds	r1, #1
 23fd982:	a808      	add	r0, sp, #32
 23fd984:	f7ff ff9e 	bl	23fd8c4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fd988:	2800      	cmp	r0, #0
 23fd98a:	d1dd      	bne.n	23fd948 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 23fd98c:	a80f      	add	r0, sp, #60	; 0x3c
 23fd98e:	f7ff f9a7 	bl	23fcce0 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 23fd992:	a80b      	add	r0, sp, #44	; 0x2c
 23fd994:	f7ff f9a4 	bl	23fcce0 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 23fd998:	3514      	adds	r5, #20
 23fd99a:	e7c6      	b.n	23fd92a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 23fd99c:	4630      	mov	r0, r6
 23fd99e:	a90f      	add	r1, sp, #60	; 0x3c
 23fd9a0:	f7ff fa1b 	bl	23fcdda <_ZN6StringC1EOS_>
 23fd9a4:	e7dc      	b.n	23fd960 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 23fd9a6:	2600      	movs	r6, #0
 23fd9a8:	f04f 0914 	mov.w	r9, #20
 23fd9ac:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
 23fd9b0:	960d      	str	r6, [sp, #52]	; 0x34
    return data_[i];
 23fd9b2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    for (int i = 0; i < cats.size(); ++i) {
 23fd9b6:	429e      	cmp	r6, r3
 23fd9b8:	da7c      	bge.n	23fdab4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
    const char * c_str() const { return buffer; }
 23fd9ba:	0133      	lsls	r3, r6, #4
 23fd9bc:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 23fd9be:	9306      	str	r3, [sp, #24]
        if (!category) {
 23fd9c0:	b90b      	cbnz	r3, 23fd9c6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
 23fd9c2:	3601      	adds	r6, #1
 23fd9c4:	e7f5      	b.n	23fd9b2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
 23fd9c6:	2300      	movs	r3, #0
 23fd9c8:	9307      	str	r3, [sp, #28]
 23fd9ca:	fb09 f306 	mul.w	r3, r9, r6
        Vector<Node> *pNodes = &nodes; // Root nodes
 23fd9ce:	ad0b      	add	r5, sp, #44	; 0x2c
 23fd9d0:	9302      	str	r3, [sp, #8]
        while ((name = nextSubcategoryName(category, size))) {
 23fd9d2:	a907      	add	r1, sp, #28
 23fd9d4:	a806      	add	r0, sp, #24
 23fd9d6:	f7ff fb0a 	bl	23fcfee <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fd9da:	4682      	mov	sl, r0
 23fd9dc:	2800      	cmp	r0, #0
 23fd9de:	d0f0      	beq.n	23fd9c2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
 23fd9e0:	f04f 0300 	mov.w	r3, #0
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd9e4:	4601      	mov	r1, r0
            bool found = false;
 23fd9e6:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd9ea:	4628      	mov	r0, r5
 23fd9ec:	9a07      	ldr	r2, [sp, #28]
 23fd9ee:	f10d 0317 	add.w	r3, sp, #23
 23fd9f2:	f7ff fb6d 	bl	23fd0d0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fd9f6:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd9fa:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fd9fc:	2f00      	cmp	r7, #0
 23fd9fe:	d14a      	bne.n	23fda96 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
 23fda00:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        capacity_(0) {
 23fda04:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
            level(-1) {
 23fda08:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 23fda0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fda10:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 23fda14:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 23fda18:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fda1a:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 23fda1e:	4293      	cmp	r3, r2
 23fda20:	db17      	blt.n	23fda52 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
 23fda22:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
 23fda26:	f1ba 0f00 	cmp.w	sl, #0
 23fda2a:	dd30      	ble.n	23fda8e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
 23fda2c:	fb09 f00a 	mul.w	r0, r9, sl
 23fda30:	f7ff f834 	bl	23fca9c <malloc>
            if (!d) {
 23fda34:	4683      	mov	fp, r0
 23fda36:	b360      	cbz	r0, 23fda92 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
 23fda38:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fda3c:	fb09 1202 	mla	r2, r9, r2, r1
 23fda40:	f7ff feea 	bl	23fd818 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
 23fda44:	6828      	ldr	r0, [r5, #0]
 23fda46:	f7ff f837 	bl	23fcab8 <free>
        data_ = d;
 23fda4a:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
 23fda4e:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
 23fda52:	682b      	ldr	r3, [r5, #0]
 23fda54:	9a01      	ldr	r2, [sp, #4]
 23fda56:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
 23fda5a:	686a      	ldr	r2, [r5, #4]
 23fda5c:	4651      	mov	r1, sl
 23fda5e:	fb09 3202 	mla	r2, r9, r2, r3
 23fda62:	f10a 0014 	add.w	r0, sl, #20
 23fda66:	f7ff fed7 	bl	23fd818 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 23fda6a:	f1ba 0f00 	cmp.w	sl, #0
 23fda6e:	d003      	beq.n	23fda78 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
 23fda70:	4650      	mov	r0, sl
 23fda72:	a90f      	add	r1, sp, #60	; 0x3c
 23fda74:	f7ff fd1a 	bl	23fd4ac <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
 23fda78:	686b      	ldr	r3, [r5, #4]
 23fda7a:	3301      	adds	r3, #1
 23fda7c:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
 23fda7e:	a811      	add	r0, sp, #68	; 0x44
 23fda80:	f7ff fccc 	bl	23fd41c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fda84:	b13f      	cbz	r7, 23fda96 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
 23fda86:	a80b      	add	r0, sp, #44	; 0x2c
 23fda88:	f7ff fcc8 	bl	23fd41c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fda8c:	e771      	b.n	23fd972 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 23fda8e:	46bb      	mov	fp, r7
 23fda90:	e7d8      	b.n	23fda44 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fda92:	2701      	movs	r7, #1
 23fda94:	e7f3      	b.n	23fda7e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
 23fda96:	9b01      	ldr	r3, [sp, #4]
 23fda98:	682d      	ldr	r5, [r5, #0]
 23fda9a:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
 23fda9e:	9b06      	ldr	r3, [sp, #24]
 23fdaa0:	781b      	ldrb	r3, [r3, #0]
 23fdaa2:	b92b      	cbnz	r3, 23fdab0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
 23fdaa4:	f8d8 3000 	ldr.w	r3, [r8]
 23fdaa8:	9a02      	ldr	r2, [sp, #8]
 23fdaaa:	4413      	add	r3, r2
 23fdaac:	7c1b      	ldrb	r3, [r3, #16]
 23fdaae:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 23fdab0:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 23fdab2:	e78e      	b.n	23fd9d2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fdab4:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fdab6:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fdab8:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fdaba:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fdabc:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fdabe:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 23fdac0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
 23fdac2:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fdac4:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fdac6:	60a2      	str	r2, [r4, #8]
 23fdac8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
 23fdaca:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fdacc:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fdace:	60e2      	str	r2, [r4, #12]
 23fdad0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 23fdad2:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fdad4:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fdad6:	6122      	str	r2, [r4, #16]
 23fdad8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 23fdada:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
 23fdadc:	9b03      	ldr	r3, [sp, #12]
 23fdade:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 23fdae0:	6162      	str	r2, [r4, #20]
 23fdae2:	7623      	strb	r3, [r4, #24]
 23fdae4:	e7cf      	b.n	23fda86 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

023fdae8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fdae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fdaea:	4604      	mov	r4, r0
        filter_(level, filters) {
 23fdaec:	4626      	mov	r6, r4
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fdaee:	4617      	mov	r7, r2
 23fdaf0:	b087      	sub	sp, #28
 23fdaf2:	460d      	mov	r5, r1
        stream_(&stream) {
 23fdaf4:	4668      	mov	r0, sp
 23fdaf6:	4619      	mov	r1, r3
 23fdaf8:	f7fe fa20 	bl	23fbf3c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fdafc:	4b0b      	ldr	r3, [pc, #44]	; (23fdb2c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
 23fdafe:	4669      	mov	r1, sp
 23fdb00:	f846 3b04 	str.w	r3, [r6], #4
 23fdb04:	a803      	add	r0, sp, #12
 23fdb06:	f7fe fa19 	bl	23fbf3c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fdb0a:	4639      	mov	r1, r7
 23fdb0c:	aa03      	add	r2, sp, #12
 23fdb0e:	4630      	mov	r0, r6
 23fdb10:	f7ff fef0 	bl	23fd8f4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fdb14:	a803      	add	r0, sp, #12
 23fdb16:	f7fe f92a 	bl	23fbd6e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fdb1a:	4668      	mov	r0, sp
 23fdb1c:	f7fe f927 	bl	23fbd6e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23fdb20:	4620      	mov	r0, r4
        stream_(&stream) {
 23fdb22:	4b03      	ldr	r3, [pc, #12]	; (23fdb30 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
 23fdb24:	6225      	str	r5, [r4, #32]
 23fdb26:	6023      	str	r3, [r4, #0]
}
 23fdb28:	b007      	add	sp, #28
 23fdb2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fdb2c:	023ff9f8 	.word	0x023ff9f8
 23fdb30:	023ffb00 	.word	0x023ffb00

023fdb34 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 23fdb34:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fdb36:	460f      	mov	r7, r1
 23fdb38:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fdb3a:	4638      	mov	r0, r7
 23fdb3c:	491c      	ldr	r1, [pc, #112]	; (23fdbb0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
 23fdb3e:	4616      	mov	r6, r2
 23fdb40:	461d      	mov	r5, r3
 23fdb42:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fdb44:	f7fd fd48 	bl	23fb5d8 <strcmp>
 23fdb48:	b9c0      	cbnz	r0, 23fdb7c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
 23fdb4a:	b1a4      	cbz	r4, 23fdb76 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 23fdb4c:	4629      	mov	r1, r5
 23fdb4e:	a801      	add	r0, sp, #4
 23fdb50:	f7ff fcbf 	bl	23fd4d2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fdb54:	2024      	movs	r0, #36	; 0x24
 23fdb56:	4917      	ldr	r1, [pc, #92]	; (23fdbb4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fdb58:	f001 fbf4 	bl	23ff344 <_ZnwjRKSt9nothrow_t>
 23fdb5c:	4605      	mov	r5, r0
 23fdb5e:	b130      	cbz	r0, 23fdb6e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
 23fdb60:	ab01      	add	r3, sp, #4
 23fdb62:	4632      	mov	r2, r6
 23fdb64:	4621      	mov	r1, r4
 23fdb66:	f7ff ffbf 	bl	23fdae8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fdb6a:	4b13      	ldr	r3, [pc, #76]	; (23fdbb8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
 23fdb6c:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fdb6e:	a801      	add	r0, sp, #4
 23fdb70:	f7fe f8fd 	bl	23fbd6e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fdb74:	462c      	mov	r4, r5
}
 23fdb76:	4620      	mov	r0, r4
 23fdb78:	b005      	add	sp, #20
 23fdb7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 23fdb7c:	4638      	mov	r0, r7
 23fdb7e:	490f      	ldr	r1, [pc, #60]	; (23fdbbc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
 23fdb80:	f7fd fd2a 	bl	23fb5d8 <strcmp>
 23fdb84:	b990      	cbnz	r0, 23fdbac <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
 23fdb86:	2c00      	cmp	r4, #0
 23fdb88:	d0f5      	beq.n	23fdb76 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fdb8a:	4629      	mov	r1, r5
 23fdb8c:	a801      	add	r0, sp, #4
 23fdb8e:	f7ff fca0 	bl	23fd4d2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fdb92:	2024      	movs	r0, #36	; 0x24
 23fdb94:	4907      	ldr	r1, [pc, #28]	; (23fdbb4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fdb96:	f001 fbd5 	bl	23ff344 <_ZnwjRKSt9nothrow_t>
 23fdb9a:	4605      	mov	r5, r0
 23fdb9c:	2800      	cmp	r0, #0
 23fdb9e:	d0e6      	beq.n	23fdb6e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
 23fdba0:	4632      	mov	r2, r6
 23fdba2:	4621      	mov	r1, r4
 23fdba4:	ab01      	add	r3, sp, #4
 23fdba6:	f7ff ff9f 	bl	23fdae8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fdbaa:	e7e0      	b.n	23fdb6e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
 23fdbac:	2400      	movs	r4, #0
 23fdbae:	e7e2      	b.n	23fdb76 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
 23fdbb0:	023ffa98 	.word	0x023ffa98
 23fdbb4:	023ffd40 	.word	0x023ffd40
 23fdbb8:	023ffb18 	.word	0x023ffb18
 23fdbbc:	023ffa9c 	.word	0x023ffa9c

023fdbc0 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 23fdbc0:	4b01      	ldr	r3, [pc, #4]	; (23fdbc8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23fdbc2:	4a02      	ldr	r2, [pc, #8]	; (23fdbcc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23fdbc4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23fdbc6:	4770      	bx	lr
 23fdbc8:	1007af08 	.word	0x1007af08
 23fdbcc:	023ffaad 	.word	0x023ffaad

023fdbd0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fdbd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fdbd4:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 23fdbd6:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fdbda:	4604      	mov	r4, r0
 23fdbdc:	460e      	mov	r6, r1
 23fdbde:	4617      	mov	r7, r2
 23fdbe0:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 23fdbe2:	f000 fb69 	bl	23fe2b8 <_Z16_fetch_usbserialv>
 23fdbe6:	4581      	cmp	r9, r0
 23fdbe8:	d04d      	beq.n	23fdc86 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 23fdbea:	792b      	ldrb	r3, [r5, #4]
 23fdbec:	0719      	lsls	r1, r3, #28
 23fdbee:	d504      	bpl.n	23fdbfa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 23fdbf0:	4620      	mov	r0, r4
 23fdbf2:	696a      	ldr	r2, [r5, #20]
 23fdbf4:	4954      	ldr	r1, [pc, #336]	; (23fdd48 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 23fdbf6:	f7ff fad0 	bl	23fd19a <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 23fdbfa:	f1b8 0f00 	cmp.w	r8, #0
 23fdbfe:	d00d      	beq.n	23fdc1c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 23fdc00:	215b      	movs	r1, #91	; 0x5b
 23fdc02:	4620      	mov	r0, r4
 23fdc04:	f7ff fa58 	bl	23fd0b8 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 23fdc08:	4641      	mov	r1, r8
 23fdc0a:	4620      	mov	r0, r4
 23fdc0c:	f7ff fa45 	bl	23fd09a <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 23fdc10:	6823      	ldr	r3, [r4, #0]
 23fdc12:	2202      	movs	r2, #2
 23fdc14:	4620      	mov	r0, r4
 23fdc16:	68db      	ldr	r3, [r3, #12]
 23fdc18:	494c      	ldr	r1, [pc, #304]	; (23fdd4c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 23fdc1a:	4798      	blx	r3
    if (attr.has_file) {
 23fdc1c:	792b      	ldrb	r3, [r5, #4]
 23fdc1e:	07da      	lsls	r2, r3, #31
 23fdc20:	d524      	bpl.n	23fdc6c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 23fdc22:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 23fdc26:	212f      	movs	r1, #47	; 0x2f
 23fdc28:	4640      	mov	r0, r8
 23fdc2a:	f001 fd44 	bl	23ff6b6 <strrchr>
    if (s1) {
 23fdc2e:	b108      	cbz	r0, 23fdc34 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 23fdc30:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 23fdc34:	4641      	mov	r1, r8
 23fdc36:	4620      	mov	r0, r4
 23fdc38:	f7ff fa2f 	bl	23fd09a <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 23fdc3c:	792b      	ldrb	r3, [r5, #4]
 23fdc3e:	079b      	lsls	r3, r3, #30
 23fdc40:	d508      	bpl.n	23fdc54 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 23fdc42:	213a      	movs	r1, #58	; 0x3a
 23fdc44:	4620      	mov	r0, r4
 23fdc46:	f7ff fa37 	bl	23fd0b8 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 23fdc4a:	4620      	mov	r0, r4
 23fdc4c:	68ea      	ldr	r2, [r5, #12]
 23fdc4e:	4940      	ldr	r1, [pc, #256]	; (23fdd50 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 23fdc50:	f7ff faa3 	bl	23fd19a <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 23fdc54:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
 23fdc56:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
 23fdc58:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 23fdc5c:	4620      	mov	r0, r4
            write(", ", 2);
 23fdc5e:	f04f 0202 	mov.w	r2, #2
 23fdc62:	68db      	ldr	r3, [r3, #12]
 23fdc64:	bf14      	ite	ne
 23fdc66:	493b      	ldrne	r1, [pc, #236]	; (23fdd54 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 23fdc68:	493b      	ldreq	r1, [pc, #236]	; (23fdd58 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fdc6a:	4798      	blx	r3
    if (attr.has_function) {
 23fdc6c:	792b      	ldrb	r3, [r5, #4]
 23fdc6e:	0758      	lsls	r0, r3, #29
 23fdc70:	d51d      	bpl.n	23fdcae <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fdc72:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fdc74:	460b      	mov	r3, r1
 23fdc76:	461a      	mov	r2, r3
    for (; *s; ++s) {
 23fdc78:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fdc7c:	b160      	cbz	r0, 23fdc98 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 23fdc7e:	2820      	cmp	r0, #32
 23fdc80:	d108      	bne.n	23fdc94 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 23fdc82:	4619      	mov	r1, r3
 23fdc84:	e7f7      	b.n	23fdc76 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 23fdc86:	4835      	ldr	r0, [pc, #212]	; (23fdd5c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 23fdc88:	f001 f94d 	bl	23fef26 <_ZN5spark12NetworkClass9listeningEv>
 23fdc8c:	2800      	cmp	r0, #0
 23fdc8e:	d0ac      	beq.n	23fdbea <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 23fdc90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 23fdc94:	2828      	cmp	r0, #40	; 0x28
 23fdc96:	d1ee      	bne.n	23fdc76 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 23fdc98:	6823      	ldr	r3, [r4, #0]
 23fdc9a:	1a52      	subs	r2, r2, r1
 23fdc9c:	4620      	mov	r0, r4
 23fdc9e:	68db      	ldr	r3, [r3, #12]
 23fdca0:	4798      	blx	r3
        write("(): ", 4);
 23fdca2:	6823      	ldr	r3, [r4, #0]
 23fdca4:	2204      	movs	r2, #4
 23fdca6:	4620      	mov	r0, r4
 23fdca8:	68db      	ldr	r3, [r3, #12]
 23fdcaa:	492d      	ldr	r1, [pc, #180]	; (23fdd60 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 23fdcac:	4798      	blx	r3
    return log_level_name(level, nullptr);
 23fdcae:	2100      	movs	r1, #0
 23fdcb0:	4638      	mov	r0, r7
 23fdcb2:	f7fe fd95 	bl	23fc7e0 <log_level_name>
 23fdcb6:	4601      	mov	r1, r0
    write(s);
 23fdcb8:	4620      	mov	r0, r4
 23fdcba:	f7ff f9ee 	bl	23fd09a <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 23fdcbe:	6823      	ldr	r3, [r4, #0]
 23fdcc0:	2202      	movs	r2, #2
 23fdcc2:	4620      	mov	r0, r4
 23fdcc4:	68db      	ldr	r3, [r3, #12]
 23fdcc6:	4924      	ldr	r1, [pc, #144]	; (23fdd58 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fdcc8:	4798      	blx	r3
    if (msg) {
 23fdcca:	b11e      	cbz	r6, 23fdcd4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 23fdccc:	4631      	mov	r1, r6
 23fdcce:	4620      	mov	r0, r4
 23fdcd0:	f7ff f9e3 	bl	23fd09a <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 23fdcd4:	792b      	ldrb	r3, [r5, #4]
 23fdcd6:	f013 0f30 	tst.w	r3, #48	; 0x30
 23fdcda:	d02c      	beq.n	23fdd36 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 23fdcdc:	6823      	ldr	r3, [r4, #0]
 23fdcde:	4921      	ldr	r1, [pc, #132]	; (23fdd64 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 23fdce0:	68db      	ldr	r3, [r3, #12]
 23fdce2:	2202      	movs	r2, #2
 23fdce4:	4620      	mov	r0, r4
 23fdce6:	4798      	blx	r3
        if (attr.has_code) {
 23fdce8:	792b      	ldrb	r3, [r5, #4]
 23fdcea:	06d9      	lsls	r1, r3, #27
 23fdcec:	d50a      	bpl.n	23fdd04 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 23fdcee:	6823      	ldr	r3, [r4, #0]
 23fdcf0:	2207      	movs	r2, #7
 23fdcf2:	4620      	mov	r0, r4
 23fdcf4:	491c      	ldr	r1, [pc, #112]	; (23fdd68 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 23fdcf6:	68db      	ldr	r3, [r3, #12]
 23fdcf8:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 23fdcfa:	4620      	mov	r0, r4
 23fdcfc:	69aa      	ldr	r2, [r5, #24]
 23fdcfe:	491b      	ldr	r1, [pc, #108]	; (23fdd6c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 23fdd00:	f7ff fa4b 	bl	23fd19a <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 23fdd04:	792b      	ldrb	r3, [r5, #4]
 23fdd06:	069a      	lsls	r2, r3, #26
 23fdd08:	d511      	bpl.n	23fdd2e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 23fdd0a:	06db      	lsls	r3, r3, #27
 23fdd0c:	d505      	bpl.n	23fdd1a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 23fdd0e:	6823      	ldr	r3, [r4, #0]
 23fdd10:	2202      	movs	r2, #2
 23fdd12:	4620      	mov	r0, r4
 23fdd14:	68db      	ldr	r3, [r3, #12]
 23fdd16:	490f      	ldr	r1, [pc, #60]	; (23fdd54 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 23fdd18:	4798      	blx	r3
            write("details = ", 10);
 23fdd1a:	6823      	ldr	r3, [r4, #0]
 23fdd1c:	4620      	mov	r0, r4
 23fdd1e:	4914      	ldr	r1, [pc, #80]	; (23fdd70 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 23fdd20:	220a      	movs	r2, #10
 23fdd22:	68db      	ldr	r3, [r3, #12]
 23fdd24:	4798      	blx	r3
            write(attr.details);
 23fdd26:	4620      	mov	r0, r4
 23fdd28:	69e9      	ldr	r1, [r5, #28]
 23fdd2a:	f7ff f9b6 	bl	23fd09a <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 23fdd2e:	215d      	movs	r1, #93	; 0x5d
 23fdd30:	4620      	mov	r0, r4
 23fdd32:	f7ff f9c1 	bl	23fd0b8 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 23fdd36:	6823      	ldr	r3, [r4, #0]
 23fdd38:	4620      	mov	r0, r4
}
 23fdd3a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 23fdd3e:	2202      	movs	r2, #2
 23fdd40:	68db      	ldr	r3, [r3, #12]
 23fdd42:	490c      	ldr	r1, [pc, #48]	; (23fdd74 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 23fdd44:	4718      	bx	r3
 23fdd46:	bf00      	nop
 23fdd48:	023ffab1 	.word	0x023ffab1
 23fdd4c:	023ffab8 	.word	0x023ffab8
 23fdd50:	023ffc3c 	.word	0x023ffc3c
 23fdd54:	023ffabb 	.word	0x023ffabb
 23fdd58:	023ffac0 	.word	0x023ffac0
 23fdd5c:	1007af84 	.word	0x1007af84
 23fdd60:	023ffabe 	.word	0x023ffabe
 23fdd64:	023ffac3 	.word	0x023ffac3
 23fdd68:	023ffac6 	.word	0x023ffac6
 23fdd6c:	023fface 	.word	0x023fface
 23fdd70:	023ffad1 	.word	0x023ffad1
 23fdd74:	023ffadc 	.word	0x023ffadc

023fdd78 <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fdd78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fdd7c:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
 23fdd7e:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fdd80:	460d      	mov	r5, r1
 23fdd82:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
 23fdd84:	f000 fa98 	bl	23fe2b8 <_Z16_fetch_usbserialv>
 23fdd88:	4287      	cmp	r7, r0
 23fdd8a:	d007      	beq.n	23fdd9c <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
 23fdd8c:	6a20      	ldr	r0, [r4, #32]
 23fdd8e:	4632      	mov	r2, r6
 23fdd90:	6803      	ldr	r3, [r0, #0]
 23fdd92:	4629      	mov	r1, r5
}
 23fdd94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
 23fdd98:	68db      	ldr	r3, [r3, #12]
 23fdd9a:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
 23fdd9c:	4803      	ldr	r0, [pc, #12]	; (23fddac <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
 23fdd9e:	f001 f8c2 	bl	23fef26 <_ZN5spark12NetworkClass9listeningEv>
 23fdda2:	2800      	cmp	r0, #0
 23fdda4:	d0f2      	beq.n	23fdd8c <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
 23fdda6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fddaa:	bf00      	nop
 23fddac:	1007af84 	.word	0x1007af84

023fddb0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fddb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fddb4:	b085      	sub	sp, #20
    return stream_;
 23fddb6:	f8d0 9020 	ldr.w	r9, [r0, #32]
 23fddba:	4605      	mov	r5, r0
 23fddbc:	460f      	mov	r7, r1
 23fddbe:	4690      	mov	r8, r2
 23fddc0:	461e      	mov	r6, r3
 23fddc2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 23fddc4:	f000 fa78 	bl	23fe2b8 <_Z16_fetch_usbserialv>
 23fddc8:	4581      	cmp	r9, r0
 23fddca:	d105      	bne.n	23fddd8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 23fddcc:	4849      	ldr	r0, [pc, #292]	; (23fdef4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 23fddce:	f001 f8aa 	bl	23fef26 <_ZN5spark12NetworkClass9listeningEv>
 23fddd2:	2800      	cmp	r0, #0
 23fddd4:	f040 808a 	bne.w	23fdeec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 23fddd8:	f04f 0900 	mov.w	r9, #0
 23fdddc:	6a2b      	ldr	r3, [r5, #32]
        bytesWritten_(0) {
 23fddde:	4a46      	ldr	r2, [pc, #280]	; (23fdef8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 23fdde0:	4668      	mov	r0, sp
 23fdde2:	e9cd 3902 	strd	r3, r9, [sp, #8]
 23fdde6:	9200      	str	r2, [sp, #0]
        state_(BEGIN) {
 23fdde8:	f88d 9004 	strb.w	r9, [sp, #4]
 23fddec:	f000 fbb1 	bl	23fe552 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
 23fddf0:	4649      	mov	r1, r9
 23fddf2:	4640      	mov	r0, r8
 23fddf4:	f7fe fcf4 	bl	23fc7e0 <log_level_name>
 23fddf8:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 23fddfa:	4940      	ldr	r1, [pc, #256]	; (23fdefc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 23fddfc:	2201      	movs	r2, #1
 23fddfe:	4668      	mov	r0, sp
 23fde00:	f000 fc36 	bl	23fe670 <_ZN5spark10JSONWriter4nameEPKcj>
 23fde04:	4641      	mov	r1, r8
 23fde06:	f7ff f93a 	bl	23fd07e <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 23fde0a:	b13f      	cbz	r7, 23fde1c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6c>
        json.name("m", 1).value(msg);
 23fde0c:	493c      	ldr	r1, [pc, #240]	; (23fdf00 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 23fde0e:	2201      	movs	r2, #1
 23fde10:	4668      	mov	r0, sp
 23fde12:	f000 fc2d 	bl	23fe670 <_ZN5spark10JSONWriter4nameEPKcj>
 23fde16:	4639      	mov	r1, r7
 23fde18:	f7ff f931 	bl	23fd07e <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 23fde1c:	b13e      	cbz	r6, 23fde2e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7e>
        json.name("c", 1).value(category);
 23fde1e:	4939      	ldr	r1, [pc, #228]	; (23fdf04 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 23fde20:	2201      	movs	r2, #1
 23fde22:	4668      	mov	r0, sp
 23fde24:	f000 fc24 	bl	23fe670 <_ZN5spark10JSONWriter4nameEPKcj>
 23fde28:	4631      	mov	r1, r6
 23fde2a:	f7ff f928 	bl	23fd07e <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 23fde2e:	7923      	ldrb	r3, [r4, #4]
 23fde30:	07df      	lsls	r7, r3, #31
 23fde32:	d50e      	bpl.n	23fde52 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa2>
        s = extractFileName(attr.file); // Strip directory path
 23fde34:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 23fde36:	212f      	movs	r1, #47	; 0x2f
 23fde38:	4630      	mov	r0, r6
 23fde3a:	f001 fc3c 	bl	23ff6b6 <strrchr>
    if (s1) {
 23fde3e:	b100      	cbz	r0, 23fde42 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x92>
        return s1 + 1;
 23fde40:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 23fde42:	4931      	ldr	r1, [pc, #196]	; (23fdf08 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 23fde44:	2201      	movs	r2, #1
 23fde46:	4668      	mov	r0, sp
 23fde48:	f000 fc12 	bl	23fe670 <_ZN5spark10JSONWriter4nameEPKcj>
 23fde4c:	4631      	mov	r1, r6
 23fde4e:	f7ff f916 	bl	23fd07e <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 23fde52:	7923      	ldrb	r3, [r4, #4]
 23fde54:	079e      	lsls	r6, r3, #30
 23fde56:	d507      	bpl.n	23fde68 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb8>
        json.name("ln", 2).value(attr.line);
 23fde58:	492c      	ldr	r1, [pc, #176]	; (23fdf0c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 23fde5a:	2202      	movs	r2, #2
 23fde5c:	4668      	mov	r0, sp
 23fde5e:	f000 fc07 	bl	23fe670 <_ZN5spark10JSONWriter4nameEPKcj>
 23fde62:	68e1      	ldr	r1, [r4, #12]
 23fde64:	f000 fb82 	bl	23fe56c <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 23fde68:	7923      	ldrb	r3, [r4, #4]
 23fde6a:	0758      	lsls	r0, r3, #29
 23fde6c:	d514      	bpl.n	23fde98 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe8>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fde6e:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fde70:	4633      	mov	r3, r6
 23fde72:	461f      	mov	r7, r3
    for (; *s; ++s) {
 23fde74:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fde78:	b12a      	cbz	r2, 23fde86 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd6>
        if (*s == ' ') {
 23fde7a:	2a20      	cmp	r2, #32
 23fde7c:	d101      	bne.n	23fde82 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd2>
            s1 = s + 1; // Skip return type
 23fde7e:	461e      	mov	r6, r3
 23fde80:	e7f7      	b.n	23fde72 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
        } else if (*s == '(') {
 23fde82:	2a28      	cmp	r2, #40	; 0x28
 23fde84:	d1f5      	bne.n	23fde72 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
        json.name("fn", 2).value(s, n);
 23fde86:	2202      	movs	r2, #2
 23fde88:	4921      	ldr	r1, [pc, #132]	; (23fdf10 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 23fde8a:	4668      	mov	r0, sp
 23fde8c:	f000 fbf0 	bl	23fe670 <_ZN5spark10JSONWriter4nameEPKcj>
 23fde90:	4631      	mov	r1, r6
 23fde92:	1bba      	subs	r2, r7, r6
 23fde94:	f000 fbfc 	bl	23fe690 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 23fde98:	7923      	ldrb	r3, [r4, #4]
 23fde9a:	0719      	lsls	r1, r3, #28
 23fde9c:	d507      	bpl.n	23fdeae <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfe>
        json.name("t", 1).value((unsigned)attr.time);
 23fde9e:	491d      	ldr	r1, [pc, #116]	; (23fdf14 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 23fdea0:	2201      	movs	r2, #1
 23fdea2:	4668      	mov	r0, sp
 23fdea4:	f000 fbe4 	bl	23fe670 <_ZN5spark10JSONWriter4nameEPKcj>
 23fdea8:	6961      	ldr	r1, [r4, #20]
 23fdeaa:	f000 fb71 	bl	23fe590 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 23fdeae:	7923      	ldrb	r3, [r4, #4]
 23fdeb0:	06da      	lsls	r2, r3, #27
 23fdeb2:	d507      	bpl.n	23fdec4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 23fdeb4:	4918      	ldr	r1, [pc, #96]	; (23fdf18 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 23fdeb6:	2204      	movs	r2, #4
 23fdeb8:	4668      	mov	r0, sp
 23fdeba:	f000 fbd9 	bl	23fe670 <_ZN5spark10JSONWriter4nameEPKcj>
 23fdebe:	69a1      	ldr	r1, [r4, #24]
 23fdec0:	f000 fb54 	bl	23fe56c <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 23fdec4:	7923      	ldrb	r3, [r4, #4]
 23fdec6:	069b      	lsls	r3, r3, #26
 23fdec8:	d507      	bpl.n	23fdeda <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 23fdeca:	4914      	ldr	r1, [pc, #80]	; (23fdf1c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 23fdecc:	2206      	movs	r2, #6
 23fdece:	4668      	mov	r0, sp
 23fded0:	f000 fbce 	bl	23fe670 <_ZN5spark10JSONWriter4nameEPKcj>
 23fded4:	69e1      	ldr	r1, [r4, #28]
 23fded6:	f7ff f8d2 	bl	23fd07e <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 23fdeda:	4668      	mov	r0, sp
 23fdedc:	f000 fb23 	bl	23fe526 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
 23fdee0:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 23fdee2:	2202      	movs	r2, #2
 23fdee4:	6803      	ldr	r3, [r0, #0]
 23fdee6:	490e      	ldr	r1, [pc, #56]	; (23fdf20 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 23fdee8:	68db      	ldr	r3, [r3, #12]
 23fdeea:	4798      	blx	r3
}
 23fdeec:	b005      	add	sp, #20
 23fdeee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23fdef2:	bf00      	nop
 23fdef4:	1007af84 	.word	0x1007af84
 23fdef8:	023ffa74 	.word	0x023ffa74
 23fdefc:	023ffa8e 	.word	0x023ffa8e
 23fdf00:	023ffadf 	.word	0x023ffadf
 23fdf04:	023ffec7 	.word	0x023ffec7
 23fdf08:	023ffae1 	.word	0x023ffae1
 23fdf0c:	023ffae3 	.word	0x023ffae3
 23fdf10:	023ffae6 	.word	0x023ffae6
 23fdf14:	023ffae9 	.word	0x023ffae9
 23fdf18:	023ffaeb 	.word	0x023ffaeb
 23fdf1c:	023ffaf0 	.word	0x023ffaf0
 23fdf20:	023ffadc 	.word	0x023ffadc

023fdf24 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23fdf24:	4b02      	ldr	r3, [pc, #8]	; (23fdf30 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23fdf26:	681a      	ldr	r2, [r3, #0]
 23fdf28:	4b02      	ldr	r3, [pc, #8]	; (23fdf34 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23fdf2a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23fdf2c:	4770      	bx	lr
 23fdf2e:	bf00      	nop
 23fdf30:	1007aab0 	.word	0x1007aab0
 23fdf34:	1007af34 	.word	0x1007af34

023fdf38 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 23fdf38:	b510      	push	{r4, lr}
 23fdf3a:	4b04      	ldr	r3, [pc, #16]	; (23fdf4c <_ZN9TCPClientD1Ev+0x14>)
 23fdf3c:	4604      	mov	r4, r0
 23fdf3e:	6003      	str	r3, [r0, #0]
	if (_M_pi != nullptr)
 23fdf40:	6980      	ldr	r0, [r0, #24]
 23fdf42:	b108      	cbz	r0, 23fdf48 <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
 23fdf44:	f7fe ff96 	bl	23fce74 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
 23fdf48:	4620      	mov	r0, r4
 23fdf4a:	bd10      	pop	{r4, pc}
 23fdf4c:	023ffc64 	.word	0x023ffc64

023fdf50 <_ZN9TCPClientD0Ev>:
 23fdf50:	b510      	push	{r4, lr}
 23fdf52:	4604      	mov	r4, r0
 23fdf54:	f7ff fff0 	bl	23fdf38 <_ZN9TCPClientD1Ev>
 23fdf58:	4620      	mov	r0, r4
 23fdf5a:	211c      	movs	r1, #28
 23fdf5c:	f7fd fb6f 	bl	23fb63e <_ZdlPvj>
 23fdf60:	4620      	mov	r0, r4
 23fdf62:	bd10      	pop	{r4, pc}

023fdf64 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 23fdf64:	2200      	movs	r2, #0
 23fdf66:	4b01      	ldr	r3, [pc, #4]	; (23fdf6c <_GLOBAL__sub_I_RGB+0x8>)
 23fdf68:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23fdf6a:	4770      	bx	lr
 23fdf6c:	1007af38 	.word	0x1007af38

023fdf70 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23fdf70:	4b01      	ldr	r3, [pc, #4]	; (23fdf78 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23fdf72:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23fdf74:	4770      	bx	lr
 23fdf76:	bf00      	nop
 23fdf78:	1007aab4 	.word	0x1007aab4

023fdf7c <serialEventRun>:
{
 23fdf7c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23fdf7e:	4b0f      	ldr	r3, [pc, #60]	; (23fdfbc <serialEventRun+0x40>)
 23fdf80:	b143      	cbz	r3, 23fdf94 <serialEventRun+0x18>
 23fdf82:	f000 f999 	bl	23fe2b8 <_Z16_fetch_usbserialv>
 23fdf86:	6803      	ldr	r3, [r0, #0]
 23fdf88:	691b      	ldr	r3, [r3, #16]
 23fdf8a:	4798      	blx	r3
 23fdf8c:	2800      	cmp	r0, #0
 23fdf8e:	dd01      	ble.n	23fdf94 <serialEventRun+0x18>
        serialEvent();
 23fdf90:	e000      	b.n	23fdf94 <serialEventRun+0x18>
 23fdf92:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23fdf94:	4b0a      	ldr	r3, [pc, #40]	; (23fdfc0 <serialEventRun+0x44>)
 23fdf96:	b143      	cbz	r3, 23fdfaa <serialEventRun+0x2e>
 23fdf98:	f001 f904 	bl	23ff1a4 <_Z22__fetch_global_Serial1v>
 23fdf9c:	6803      	ldr	r3, [r0, #0]
 23fdf9e:	691b      	ldr	r3, [r3, #16]
 23fdfa0:	4798      	blx	r3
 23fdfa2:	2800      	cmp	r0, #0
 23fdfa4:	dd01      	ble.n	23fdfaa <serialEventRun+0x2e>
        serialEvent1();
 23fdfa6:	e000      	b.n	23fdfaa <serialEventRun+0x2e>
 23fdfa8:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23fdfaa:	4b06      	ldr	r3, [pc, #24]	; (23fdfc4 <serialEventRun+0x48>)
 23fdfac:	b10b      	cbz	r3, 23fdfb2 <serialEventRun+0x36>
 23fdfae:	f001 f93f 	bl	23ff230 <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23fdfb2:	4b05      	ldr	r3, [pc, #20]	; (23fdfc8 <serialEventRun+0x4c>)
 23fdfb4:	b10b      	cbz	r3, 23fdfba <serialEventRun+0x3e>
 23fdfb6:	f001 f971 	bl	23ff29c <_Z15serialEventRun3v>
}
 23fdfba:	bd08      	pop	{r3, pc}
	...

023fdfcc <_post_loop>:
{
 23fdfcc:	b508      	push	{r3, lr}
	serialEventRun();
 23fdfce:	f7ff ffd5 	bl	23fdf7c <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23fdfd2:	f7fe f911 	bl	23fc1f8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23fdfd6:	4b01      	ldr	r3, [pc, #4]	; (23fdfdc <_post_loop+0x10>)
 23fdfd8:	6018      	str	r0, [r3, #0]
}
 23fdfda:	bd08      	pop	{r3, pc}
 23fdfdc:	1007afe0 	.word	0x1007afe0

023fdfe0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fdfe0:	4805      	ldr	r0, [pc, #20]	; (23fdff8 <_Z33system_initialize_user_backup_ramv+0x18>)
 23fdfe2:	4a06      	ldr	r2, [pc, #24]	; (23fdffc <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23fdfe4:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fdfe6:	1a12      	subs	r2, r2, r0
 23fdfe8:	4905      	ldr	r1, [pc, #20]	; (23fe000 <_Z33system_initialize_user_backup_ramv+0x20>)
 23fdfea:	f001 fad3 	bl	23ff594 <memcpy>
    __backup_sram_signature = signature;
 23fdfee:	4b05      	ldr	r3, [pc, #20]	; (23fe004 <_Z33system_initialize_user_backup_ramv+0x24>)
 23fdff0:	4a05      	ldr	r2, [pc, #20]	; (23fe008 <_Z33system_initialize_user_backup_ramv+0x28>)
 23fdff2:	601a      	str	r2, [r3, #0]
}
 23fdff4:	bd08      	pop	{r3, pc}
 23fdff6:	bf00      	nop
 23fdff8:	1007b400 	.word	0x1007b400
 23fdffc:	1007b404 	.word	0x1007b404
 23fe000:	085ffec8 	.word	0x085ffec8
 23fe004:	1007b400 	.word	0x1007b400
 23fe008:	9a271c1e 	.word	0x9a271c1e

023fe00c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fe00c:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23fe00e:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fe010:	461a      	mov	r2, r3
 23fe012:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fe016:	9300      	str	r3, [sp, #0]
 23fe018:	f7fe fc44 	bl	23fc8a4 <system_ctrl_set_result>
}
 23fe01c:	b003      	add	sp, #12
 23fe01e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fe024 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23fe024:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23fe026:	8843      	ldrh	r3, [r0, #2]
 23fe028:	2b0a      	cmp	r3, #10
 23fe02a:	d008      	beq.n	23fe03e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23fe02c:	2b50      	cmp	r3, #80	; 0x50
 23fe02e:	d10b      	bne.n	23fe048 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23fe030:	4b09      	ldr	r3, [pc, #36]	; (23fe058 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23fe032:	681b      	ldr	r3, [r3, #0]
 23fe034:	b14b      	cbz	r3, 23fe04a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23fe036:	b003      	add	sp, #12
 23fe038:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23fe03c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23fe03e:	f7ff ffe5 	bl	23fe00c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23fe042:	b003      	add	sp, #12
 23fe044:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fe048:	2300      	movs	r3, #0
 23fe04a:	461a      	mov	r2, r3
 23fe04c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fe050:	9300      	str	r3, [sp, #0]
 23fe052:	f7fe fc27 	bl	23fc8a4 <system_ctrl_set_result>
}
 23fe056:	e7f4      	b.n	23fe042 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23fe058:	1007af4c 	.word	0x1007af4c

023fe05c <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fe05c:	2100      	movs	r1, #0
{
 23fe05e:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fe060:	4811      	ldr	r0, [pc, #68]	; (23fe0a8 <module_user_init_hook+0x4c>)
 23fe062:	f7fe fd7d 	bl	23fcb60 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23fe066:	4b11      	ldr	r3, [pc, #68]	; (23fe0ac <module_user_init_hook+0x50>)
 23fe068:	681a      	ldr	r2, [r3, #0]
 23fe06a:	4b11      	ldr	r3, [pc, #68]	; (23fe0b0 <module_user_init_hook+0x54>)
 23fe06c:	429a      	cmp	r2, r3
 23fe06e:	bf0c      	ite	eq
 23fe070:	2201      	moveq	r2, #1
 23fe072:	2200      	movne	r2, #0
 23fe074:	4b0f      	ldr	r3, [pc, #60]	; (23fe0b4 <module_user_init_hook+0x58>)
 23fe076:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23fe078:	d001      	beq.n	23fe07e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23fe07a:	f7ff ffb1 	bl	23fdfe0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23fe07e:	f7fe f89f 	bl	23fc1c0 <HAL_RNG_GetRandomNumber>
 23fe082:	4604      	mov	r4, r0
    srand(seed);
 23fe084:	f001 fab6 	bl	23ff5f4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23fe088:	4b0b      	ldr	r3, [pc, #44]	; (23fe0b8 <module_user_init_hook+0x5c>)
 23fe08a:	b113      	cbz	r3, 23fe092 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23fe08c:	4620      	mov	r0, r4
 23fe08e:	e000      	b.n	23fe092 <module_user_init_hook+0x36>
 23fe090:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23fe092:	2100      	movs	r1, #0
 23fe094:	4808      	ldr	r0, [pc, #32]	; (23fe0b8 <module_user_init_hook+0x5c>)
 23fe096:	f7fe fcf3 	bl	23fca80 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23fe09a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23fe09e:	2100      	movs	r1, #0
 23fe0a0:	4806      	ldr	r0, [pc, #24]	; (23fe0bc <module_user_init_hook+0x60>)
 23fe0a2:	f7fe bbf1 	b.w	23fc888 <system_ctrl_set_app_request_handler>
 23fe0a6:	bf00      	nop
 23fe0a8:	023fdf71 	.word	0x023fdf71
 23fe0ac:	1007b400 	.word	0x1007b400
 23fe0b0:	9a271c1e 	.word	0x9a271c1e
 23fe0b4:	1007af48 	.word	0x1007af48
 23fe0b8:	00000000 	.word	0x00000000
 23fe0bc:	023fe025 	.word	0x023fe025

023fe0c0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23fe0c0:	4770      	bx	lr

023fe0c2 <_ZN9IPAddressD0Ev>:
 23fe0c2:	b510      	push	{r4, lr}
 23fe0c4:	4604      	mov	r4, r0
 23fe0c6:	2118      	movs	r1, #24
 23fe0c8:	f7fd fab9 	bl	23fb63e <_ZdlPvj>
 23fe0cc:	4620      	mov	r0, r4
 23fe0ce:	bd10      	pop	{r4, pc}

023fe0d0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23fe0d0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23fe0d2:	7d03      	ldrb	r3, [r0, #20]
{
 23fe0d4:	460e      	mov	r6, r1
	if (address.v==6) {
 23fe0d6:	2b06      	cmp	r3, #6
 23fe0d8:	f04f 0400 	mov.w	r4, #0
{
 23fe0dc:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fe0de:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23fe0e2:	d012      	beq.n	23fe10a <_ZNK9IPAddress7printToER5Print+0x3a>
 23fe0e4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fe0e8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23fe0ec:	220a      	movs	r2, #10
 23fe0ee:	4630      	mov	r0, r6
 23fe0f0:	f7fe ff2b 	bl	23fcf4a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23fe0f4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23fe0f6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23fe0f8:	d019      	beq.n	23fe12e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23fe0fa:	2c00      	cmp	r4, #0
 23fe0fc:	d0f4      	beq.n	23fe0e8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23fe0fe:	212e      	movs	r1, #46	; 0x2e
 23fe100:	4630      	mov	r0, r6
 23fe102:	f7fe ff1f 	bl	23fcf44 <_ZN5Print5printEc>
 23fe106:	4404      	add	r4, r0
 23fe108:	e7ee      	b.n	23fe0e8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fe10a:	232f      	movs	r3, #47	; 0x2f
 23fe10c:	466a      	mov	r2, sp
 23fe10e:	4639      	mov	r1, r7
 23fe110:	200a      	movs	r0, #10
		buf[0] = 0;
 23fe112:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fe116:	f7fe f917 	bl	23fc348 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23fe11a:	4668      	mov	r0, sp
 23fe11c:	f7fd fa66 	bl	23fb5ec <strlen>
 23fe120:	6833      	ldr	r3, [r6, #0]
 23fe122:	4602      	mov	r2, r0
 23fe124:	4669      	mov	r1, sp
 23fe126:	4630      	mov	r0, r6
 23fe128:	68db      	ldr	r3, [r3, #12]
 23fe12a:	4798      	blx	r3
 23fe12c:	4604      	mov	r4, r0
    }
    return n;
}
 23fe12e:	4620      	mov	r0, r4
 23fe130:	b00d      	add	sp, #52	; 0x34
 23fe132:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fe134 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23fe134:	b510      	push	{r4, lr}
 23fe136:	4604      	mov	r4, r0
 23fe138:	4b04      	ldr	r3, [pc, #16]	; (23fe14c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23fe13a:	2211      	movs	r2, #17
 23fe13c:	2100      	movs	r1, #0
 23fe13e:	f840 3b04 	str.w	r3, [r0], #4
 23fe142:	f001 fa4e 	bl	23ff5e2 <memset>
}
 23fe146:	4620      	mov	r0, r4
 23fe148:	bd10      	pop	{r4, pc}
 23fe14a:	bf00      	nop
 23fe14c:	023ffb7c 	.word	0x023ffb7c

023fe150 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23fe150:	4603      	mov	r3, r0
 23fe152:	4a07      	ldr	r2, [pc, #28]	; (23fe170 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23fe154:	b510      	push	{r4, lr}
 23fe156:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23fe15a:	f101 0210 	add.w	r2, r1, #16
 23fe15e:	f851 4b04 	ldr.w	r4, [r1], #4
 23fe162:	4291      	cmp	r1, r2
 23fe164:	f843 4b04 	str.w	r4, [r3], #4
 23fe168:	d1f9      	bne.n	23fe15e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23fe16a:	780a      	ldrb	r2, [r1, #0]
 23fe16c:	701a      	strb	r2, [r3, #0]
}
 23fe16e:	bd10      	pop	{r4, pc}
 23fe170:	023ffb7c 	.word	0x023ffb7c

023fe174 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
 23fe174:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
 23fe176:	2b04      	cmp	r3, #4
 23fe178:	d104      	bne.n	23fe184 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
 23fe17a:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
 23fe17c:	3800      	subs	r0, #0
 23fe17e:	bf18      	it	ne
 23fe180:	2001      	movne	r0, #1
 23fe182:	4770      	bx	lr
    } else if (version() == 6) {
 23fe184:	2b06      	cmp	r3, #6
 23fe186:	d107      	bne.n	23fe198 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
 23fe188:	6843      	ldr	r3, [r0, #4]
 23fe18a:	b93b      	cbnz	r3, 23fe19c <_ZNK9IPAddresscvbEv+0x28>
 23fe18c:	6883      	ldr	r3, [r0, #8]
 23fe18e:	b92b      	cbnz	r3, 23fe19c <_ZNK9IPAddresscvbEv+0x28>
 23fe190:	68c3      	ldr	r3, [r0, #12]
 23fe192:	b91b      	cbnz	r3, 23fe19c <_ZNK9IPAddresscvbEv+0x28>
 23fe194:	6900      	ldr	r0, [r0, #16]
 23fe196:	e7f1      	b.n	23fe17c <_ZNK9IPAddresscvbEv+0x8>
        return false;
 23fe198:	2000      	movs	r0, #0
 23fe19a:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
 23fe19c:	2001      	movs	r0, #1
}
 23fe19e:	4770      	bx	lr

023fe1a0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23fe1a0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23fe1a2:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23fe1a6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23fe1aa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23fe1ae:	2304      	movs	r3, #4
 23fe1b0:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23fe1b4:	6041      	str	r1, [r0, #4]
 23fe1b6:	7503      	strb	r3, [r0, #20]
}
 23fe1b8:	bd10      	pop	{r4, pc}
	...

023fe1bc <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 23fe1bc:	b513      	push	{r0, r1, r4, lr}
 23fe1be:	4c04      	ldr	r4, [pc, #16]	; (23fe1d0 <_ZN9IPAddressC1Ehhhh+0x14>)
 23fe1c0:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 23fe1c2:	f89d 4010 	ldrb.w	r4, [sp, #16]
 23fe1c6:	9400      	str	r4, [sp, #0]
 23fe1c8:	f7ff ffea 	bl	23fe1a0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23fe1cc:	b002      	add	sp, #8
 23fe1ce:	bd10      	pop	{r4, pc}
 23fe1d0:	023ffb7c 	.word	0x023ffb7c

023fe1d4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23fe1d4:	b507      	push	{r0, r1, r2, lr}
 23fe1d6:	4b06      	ldr	r3, [pc, #24]	; (23fe1f0 <_ZN9IPAddressC1EPKh+0x1c>)
 23fe1d8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23fe1da:	78cb      	ldrb	r3, [r1, #3]
 23fe1dc:	9300      	str	r3, [sp, #0]
 23fe1de:	788b      	ldrb	r3, [r1, #2]
 23fe1e0:	784a      	ldrb	r2, [r1, #1]
 23fe1e2:	7809      	ldrb	r1, [r1, #0]
 23fe1e4:	f7ff ffdc 	bl	23fe1a0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23fe1e8:	b003      	add	sp, #12
 23fe1ea:	f85d fb04 	ldr.w	pc, [sp], #4
 23fe1ee:	bf00      	nop
 23fe1f0:	023ffb7c 	.word	0x023ffb7c

023fe1f4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fe1f4:	7441      	strb	r1, [r0, #17]
}
 23fe1f6:	4770      	bx	lr

023fe1f8 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fe1f8:	4770      	bx	lr

023fe1fa <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23fe1fa:	4770      	bx	lr

023fe1fc <_ZN9USBSerial4readEv>:
{
 23fe1fc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23fe1fe:	2100      	movs	r1, #0
 23fe200:	7c00      	ldrb	r0, [r0, #16]
 23fe202:	f7fe faa7 	bl	23fc754 <HAL_USB_USART_Receive_Data>
}
 23fe206:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fe20a:	bd08      	pop	{r3, pc}

023fe20c <_ZN9USBSerial4peekEv>:
{
 23fe20c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23fe20e:	2101      	movs	r1, #1
 23fe210:	7c00      	ldrb	r0, [r0, #16]
 23fe212:	f7fe fa9f 	bl	23fc754 <HAL_USB_USART_Receive_Data>
}
 23fe216:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fe21a:	bd08      	pop	{r3, pc}

023fe21c <_ZN9USBSerial17availableForWriteEv>:
{
 23fe21c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23fe21e:	7c00      	ldrb	r0, [r0, #16]
 23fe220:	f7fe fa8a 	bl	23fc738 <HAL_USB_USART_Available_Data_For_Write>
}
 23fe224:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fe228:	bd08      	pop	{r3, pc}

023fe22a <_ZN9USBSerial9availableEv>:
{
 23fe22a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23fe22c:	7c00      	ldrb	r0, [r0, #16]
 23fe22e:	f7fe fa75 	bl	23fc71c <HAL_USB_USART_Available_Data>
}
 23fe232:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fe236:	bd08      	pop	{r3, pc}

023fe238 <_ZN9USBSerial5writeEh>:
{
 23fe238:	b513      	push	{r0, r1, r4, lr}
 23fe23a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fe23c:	7c00      	ldrb	r0, [r0, #16]
{
 23fe23e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fe240:	f7fe fa7a 	bl	23fc738 <HAL_USB_USART_Available_Data_For_Write>
 23fe244:	2800      	cmp	r0, #0
 23fe246:	9901      	ldr	r1, [sp, #4]
 23fe248:	dc01      	bgt.n	23fe24e <_ZN9USBSerial5writeEh+0x16>
 23fe24a:	7c60      	ldrb	r0, [r4, #17]
 23fe24c:	b120      	cbz	r0, 23fe258 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23fe24e:	7c20      	ldrb	r0, [r4, #16]
 23fe250:	f7fe fa8e 	bl	23fc770 <HAL_USB_USART_Send_Data>
 23fe254:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23fe258:	b002      	add	sp, #8
 23fe25a:	bd10      	pop	{r4, pc}

023fe25c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23fe25c:	7c00      	ldrb	r0, [r0, #16]
 23fe25e:	f7fe ba95 	b.w	23fc78c <HAL_USB_USART_Flush_Data>

023fe262 <_ZN9USBSerialD0Ev>:
 23fe262:	b510      	push	{r4, lr}
 23fe264:	4604      	mov	r4, r0
 23fe266:	2114      	movs	r1, #20
 23fe268:	f7fd f9e9 	bl	23fb63e <_ZdlPvj>
 23fe26c:	4620      	mov	r0, r4
 23fe26e:	bd10      	pop	{r4, pc}

023fe270 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fe270:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fe272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fe276:	4604      	mov	r4, r0
 23fe278:	4608      	mov	r0, r1
 23fe27a:	2100      	movs	r1, #0
 23fe27c:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23fe280:	4b04      	ldr	r3, [pc, #16]	; (23fe294 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23fe282:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fe284:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fe286:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23fe288:	4611      	mov	r1, r2
  _blocking = true;
 23fe28a:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23fe28c:	f7fe fa1c 	bl	23fc6c8 <HAL_USB_USART_Init>
}
 23fe290:	4620      	mov	r0, r4
 23fe292:	bd10      	pop	{r4, pc}
 23fe294:	023ffb90 	.word	0x023ffb90

023fe298 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23fe298:	2200      	movs	r2, #0
 23fe29a:	7c00      	ldrb	r0, [r0, #16]
 23fe29c:	f7fe ba22 	b.w	23fc6e4 <HAL_USB_USART_Begin>

023fe2a0 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 23fe2a0:	7c00      	ldrb	r0, [r0, #16]
 23fe2a2:	f7fe ba2d 	b.w	23fc700 <HAL_USB_USART_End>

023fe2a6 <_Z19acquireSerialBufferv>:
{
 23fe2a6:	b510      	push	{r4, lr}
 23fe2a8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23fe2aa:	2214      	movs	r2, #20
 23fe2ac:	2100      	movs	r1, #0
 23fe2ae:	f001 f998 	bl	23ff5e2 <memset>
}
 23fe2b2:	4620      	mov	r0, r4
 23fe2b4:	bd10      	pop	{r4, pc}
	...

023fe2b8 <_Z16_fetch_usbserialv>:
{
 23fe2b8:	b510      	push	{r4, lr}
 23fe2ba:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23fe2bc:	a803      	add	r0, sp, #12
 23fe2be:	f7ff fff2 	bl	23fe2a6 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fe2c2:	4c0c      	ldr	r4, [pc, #48]	; (23fe2f4 <_Z16_fetch_usbserialv+0x3c>)
 23fe2c4:	e8d4 1f8f 	ldab	r1, [r4]
 23fe2c8:	f011 0101 	ands.w	r1, r1, #1
 23fe2cc:	d10f      	bne.n	23fe2ee <_Z16_fetch_usbserialv+0x36>
 23fe2ce:	4620      	mov	r0, r4
 23fe2d0:	9101      	str	r1, [sp, #4]
 23fe2d2:	f7fe fc53 	bl	23fcb7c <__cxa_guard_acquire>
 23fe2d6:	9901      	ldr	r1, [sp, #4]
 23fe2d8:	b148      	cbz	r0, 23fe2ee <_Z16_fetch_usbserialv+0x36>
 23fe2da:	aa03      	add	r2, sp, #12
 23fe2dc:	4806      	ldr	r0, [pc, #24]	; (23fe2f8 <_Z16_fetch_usbserialv+0x40>)
 23fe2de:	f7ff ffc7 	bl	23fe270 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23fe2e2:	4620      	mov	r0, r4
 23fe2e4:	f7fe fc58 	bl	23fcb98 <__cxa_guard_release>
 23fe2e8:	4804      	ldr	r0, [pc, #16]	; (23fe2fc <_Z16_fetch_usbserialv+0x44>)
 23fe2ea:	f001 f945 	bl	23ff578 <atexit>
	return _usbserial;
}
 23fe2ee:	4802      	ldr	r0, [pc, #8]	; (23fe2f8 <_Z16_fetch_usbserialv+0x40>)
 23fe2f0:	b008      	add	sp, #32
 23fe2f2:	bd10      	pop	{r4, pc}
 23fe2f4:	1007af50 	.word	0x1007af50
 23fe2f8:	1007af54 	.word	0x1007af54
 23fe2fc:	023fe1f9 	.word	0x023fe1f9

023fe300 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 23fe300:	2201      	movs	r2, #1
 23fe302:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 23fe306:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 23fe30a:	4618      	mov	r0, r3
 23fe30c:	2901      	cmp	r1, #1
 23fe30e:	d108      	bne.n	23fe322 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 23fe310:	f853 1c04 	ldr.w	r1, [r3, #-4]
 23fe314:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 23fe318:	3a01      	subs	r2, #1
 23fe31a:	f103 0310 	add.w	r3, r3, #16
 23fe31e:	d1f2      	bne.n	23fe306 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 23fe320:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 23fe322:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 23fe324:	bf04      	itt	eq
 23fe326:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 23fe32a:	1852      	addeq	r2, r2, r1
 23fe32c:	e7f4      	b.n	23fe318 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

023fe32e <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 23fe32e:	b40e      	push	{r1, r2, r3}
 23fe330:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fe332:	b088      	sub	sp, #32
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fe334:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
 23fe336:	af00      	add	r7, sp, #0
 23fe338:	f107 0534 	add.w	r5, r7, #52	; 0x34
 23fe33c:	f855 2b04 	ldr.w	r2, [r5], #4
 23fe340:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fe342:	462b      	mov	r3, r5
 23fe344:	1878      	adds	r0, r7, r1
 23fe346:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fe348:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fe34a:	f7fe fbd1 	bl	23fcaf0 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 23fe34e:	280f      	cmp	r0, #15
 23fe350:	687a      	ldr	r2, [r7, #4]
 23fe352:	d91a      	bls.n	23fe38a <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
 23fe354:	f100 0308 	add.w	r3, r0, #8
 23fe358:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 23fe35c:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 23fe35e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fe362:	1c41      	adds	r1, r0, #1
 23fe364:	462b      	mov	r3, r5
 23fe366:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fe368:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fe36a:	f7fe fbc1 	bl	23fcaf0 <vsnprintf>
        if (n > 0) {
 23fe36e:	1e02      	subs	r2, r0, #0
 23fe370:	dd04      	ble.n	23fe37c <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
 23fe372:	6823      	ldr	r3, [r4, #0]
 23fe374:	4669      	mov	r1, sp
 23fe376:	4620      	mov	r0, r4
 23fe378:	689b      	ldr	r3, [r3, #8]
 23fe37a:	4798      	blx	r3
 23fe37c:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 23fe37e:	3720      	adds	r7, #32
 23fe380:	46bd      	mov	sp, r7
 23fe382:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fe386:	b003      	add	sp, #12
 23fe388:	4770      	bx	lr
    } else if (n > 0) {
 23fe38a:	2800      	cmp	r0, #0
 23fe38c:	d0f7      	beq.n	23fe37e <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
 23fe38e:	6823      	ldr	r3, [r4, #0]
 23fe390:	4602      	mov	r2, r0
 23fe392:	689b      	ldr	r3, [r3, #8]
 23fe394:	4620      	mov	r0, r4
 23fe396:	f107 0110 	add.w	r1, r7, #16
 23fe39a:	4798      	blx	r3
}
 23fe39c:	e7ef      	b.n	23fe37e <_ZN5spark10JSONWriter6printfEPKcz+0x50>

023fe39e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fe39e:	b538      	push	{r3, r4, r5, lr}
 23fe3a0:	680b      	ldr	r3, [r1, #0]
 23fe3a2:	4604      	mov	r4, r0
 23fe3a4:	6003      	str	r3, [r0, #0]
 23fe3a6:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 23fe3a8:	6843      	ldr	r3, [r0, #4]
 23fe3aa:	429d      	cmp	r5, r3
 23fe3ac:	d008      	beq.n	23fe3c0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
 23fe3ae:	b115      	cbz	r5, 23fe3b6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
 23fe3b0:	686b      	ldr	r3, [r5, #4]
 23fe3b2:	3301      	adds	r3, #1
 23fe3b4:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 23fe3b6:	6860      	ldr	r0, [r4, #4]
 23fe3b8:	b108      	cbz	r0, 23fe3be <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
 23fe3ba:	f7fe fd5b 	bl	23fce74 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23fe3be:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fe3c0:	bd38      	pop	{r3, r4, r5, pc}

023fe3c2 <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
 23fe3c2:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fe3c4:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 23fe3c6:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fe3ca:	2201      	movs	r2, #1
 23fe3cc:	689b      	ldr	r3, [r3, #8]
 23fe3ce:	f10d 0107 	add.w	r1, sp, #7
 23fe3d2:	4798      	blx	r3
}
 23fe3d4:	b003      	add	sp, #12
 23fe3d6:	f85d fb04 	ldr.w	pc, [sp], #4

023fe3da <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fe3da:	460b      	mov	r3, r1
 23fe3dc:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 23fe3de:	2200      	movs	r2, #0
 23fe3e0:	b510      	push	{r4, lr}
 23fe3e2:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fe3e4:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 23fe3e8:	6083      	str	r3, [r0, #8]
    if (t) {
 23fe3ea:	b90b      	cbnz	r3, 23fe3f0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 23fe3ec:	4620      	mov	r0, r4
 23fe3ee:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
 23fe3f0:	f7ff ffd5 	bl	23fe39e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
 23fe3f4:	e7fa      	b.n	23fe3ec <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

023fe3f6 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
 23fe3f6:	6883      	ldr	r3, [r0, #8]
 23fe3f8:	b1eb      	cbz	r3, 23fe436 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
 23fe3fa:	781a      	ldrb	r2, [r3, #0]
 23fe3fc:	2a03      	cmp	r2, #3
 23fe3fe:	d81a      	bhi.n	23fe436 <_ZNK5spark9JSONValue4typeEv+0x40>
 23fe400:	e8df f002 	tbb	[pc, r2]
 23fe404:	1b021704 	.word	0x1b021704
 23fe408:	2005      	movs	r0, #5
 23fe40a:	4770      	bx	lr
        const char c = d_->json[t_->start];
 23fe40c:	6802      	ldr	r2, [r0, #0]
 23fe40e:	685b      	ldr	r3, [r3, #4]
 23fe410:	6852      	ldr	r2, [r2, #4]
 23fe412:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 23fe414:	282d      	cmp	r0, #45	; 0x2d
 23fe416:	d012      	beq.n	23fe43e <_ZNK5spark9JSONValue4typeEv+0x48>
 23fe418:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23fe41c:	2b09      	cmp	r3, #9
 23fe41e:	d90e      	bls.n	23fe43e <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 23fe420:	2874      	cmp	r0, #116	; 0x74
 23fe422:	d00e      	beq.n	23fe442 <_ZNK5spark9JSONValue4typeEv+0x4c>
 23fe424:	2866      	cmp	r0, #102	; 0x66
 23fe426:	d00c      	beq.n	23fe442 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
 23fe428:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 23fe42c:	4258      	negs	r0, r3
 23fe42e:	4158      	adcs	r0, r3
 23fe430:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 23fe432:	2006      	movs	r0, #6
 23fe434:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 23fe436:	2000      	movs	r0, #0
 23fe438:	4770      	bx	lr
        return JSON_TYPE_STRING;
 23fe43a:	2004      	movs	r0, #4
 23fe43c:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 23fe43e:	2003      	movs	r0, #3
 23fe440:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 23fe442:	2002      	movs	r0, #2
}
 23fe444:	4770      	bx	lr

023fe446 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 23fe446:	b510      	push	{r4, lr}
 23fe448:	4604      	mov	r4, r0
    switch (type()) {
 23fe44a:	f7ff ffd4 	bl	23fe3f6 <_ZNK5spark9JSONValue4typeEv>
 23fe44e:	2802      	cmp	r0, #2
 23fe450:	d00e      	beq.n	23fe470 <_ZNK5spark9JSONValue5toIntEv+0x2a>
 23fe452:	1ec3      	subs	r3, r0, #3
 23fe454:	b2db      	uxtb	r3, r3
 23fe456:	2b01      	cmp	r3, #1
 23fe458:	d814      	bhi.n	23fe484 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 23fe45a:	6822      	ldr	r2, [r4, #0]
 23fe45c:	68a3      	ldr	r3, [r4, #8]
 23fe45e:	6850      	ldr	r0, [r2, #4]
 23fe460:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 23fe462:	220a      	movs	r2, #10
}
 23fe464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 23fe468:	2100      	movs	r1, #0
 23fe46a:	4418      	add	r0, r3
 23fe46c:	f001 b9ba 	b.w	23ff7e4 <strtol>
        const char* const s = d_->json + t_->start;
 23fe470:	6822      	ldr	r2, [r4, #0]
 23fe472:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 23fe474:	6852      	ldr	r2, [r2, #4]
 23fe476:	685b      	ldr	r3, [r3, #4]
 23fe478:	5cd0      	ldrb	r0, [r2, r3]
 23fe47a:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 23fe47e:	4258      	negs	r0, r3
 23fe480:	4158      	adcs	r0, r3
}
 23fe482:	bd10      	pop	{r4, pc}
    switch (type()) {
 23fe484:	2000      	movs	r0, #0
 23fe486:	e7fc      	b.n	23fe482 <_ZNK5spark9JSONValue5toIntEv+0x3c>

023fe488 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fe488:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fe48a:	2300      	movs	r3, #0
 23fe48c:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fe48e:	e9c0 3300 	strd	r3, r3, [r0]
        n_(0) {
 23fe492:	480e      	ldr	r0, [pc, #56]	; (23fe4cc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 23fe494:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 23fe498:	b1a9      	cbz	r1, 23fe4c6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
 23fe49a:	780b      	ldrb	r3, [r1, #0]
 23fe49c:	2b03      	cmp	r3, #3
 23fe49e:	d006      	beq.n	23fe4ae <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
 23fe4a0:	b98b      	cbnz	r3, 23fe4c6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 23fe4a2:	6813      	ldr	r3, [r2, #0]
 23fe4a4:	6858      	ldr	r0, [r3, #4]
 23fe4a6:	684b      	ldr	r3, [r1, #4]
 23fe4a8:	5cc3      	ldrb	r3, [r0, r3]
 23fe4aa:	2b6e      	cmp	r3, #110	; 0x6e
 23fe4ac:	d007      	beq.n	23fe4be <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
 23fe4ae:	6813      	ldr	r3, [r2, #0]
 23fe4b0:	684d      	ldr	r5, [r1, #4]
 23fe4b2:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
 23fe4b4:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
 23fe4b6:	4428      	add	r0, r5
            n_ = t->end - t->start;
 23fe4b8:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
 23fe4ba:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
 23fe4bc:	60e3      	str	r3, [r4, #12]
 23fe4be:	4611      	mov	r1, r2
 23fe4c0:	4620      	mov	r0, r4
 23fe4c2:	f7ff ff6c 	bl	23fe39e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fe4c6:	4620      	mov	r0, r4
 23fe4c8:	bd38      	pop	{r3, r4, r5, pc}
 23fe4ca:	bf00      	nop
 23fe4cc:	023ffade 	.word	0x023ffade

023fe4d0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fe4d0:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fe4d2:	2500      	movs	r5, #0
 23fe4d4:	460b      	mov	r3, r1
 23fe4d6:	4604      	mov	r4, r0
 23fe4d8:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 23fe4da:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 23fe4de:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23fe4e2:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 23fe4e6:	b14b      	cbz	r3, 23fe4fc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 23fe4e8:	781a      	ldrb	r2, [r3, #0]
 23fe4ea:	2a01      	cmp	r2, #1
 23fe4ec:	d106      	bne.n	23fe4fc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 23fe4ee:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 23fe4f2:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 23fe4f4:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 23fe4f6:	6143      	str	r3, [r0, #20]
 23fe4f8:	f7ff ff51 	bl	23fe39e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fe4fc:	4620      	mov	r0, r4
 23fe4fe:	bd38      	pop	{r3, r4, r5, pc}

023fe500 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 23fe500:	b510      	push	{r4, lr}
    if (!n_) {
 23fe502:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 23fe504:	4604      	mov	r4, r0
    if (!n_) {
 23fe506:	b163      	cbz	r3, 23fe522 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 23fe508:	6880      	ldr	r0, [r0, #8]
    --n_;
 23fe50a:	3b01      	subs	r3, #1
    k_ = t_; // Name
 23fe50c:	60e0      	str	r0, [r4, #12]
    ++t_;
 23fe50e:	3010      	adds	r0, #16
 23fe510:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 23fe512:	6120      	str	r0, [r4, #16]
    --n_;
 23fe514:	6163      	str	r3, [r4, #20]
    if (n_) {
 23fe516:	b113      	cbz	r3, 23fe51e <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 23fe518:	f7ff fef2 	bl	23fe300 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 23fe51c:	60a0      	str	r0, [r4, #8]
    return true;
 23fe51e:	2001      	movs	r0, #1
 23fe520:	e000      	b.n	23fe524 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 23fe522:	4618      	mov	r0, r3
}
 23fe524:	bd10      	pop	{r4, pc}

023fe526 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fe526:	b510      	push	{r4, lr}
    write('}');
 23fe528:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fe52a:	4604      	mov	r4, r0
    write('}');
 23fe52c:	f7ff ff49 	bl	23fe3c2 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 23fe530:	2301      	movs	r3, #1
}
 23fe532:	4620      	mov	r0, r4
    state_ = NEXT;
 23fe534:	7123      	strb	r3, [r4, #4]
}
 23fe536:	bd10      	pop	{r4, pc}

023fe538 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 23fe538:	b508      	push	{r3, lr}
    switch (state_) {
 23fe53a:	7903      	ldrb	r3, [r0, #4]
 23fe53c:	2b01      	cmp	r3, #1
 23fe53e:	d002      	beq.n	23fe546 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 23fe540:	2b02      	cmp	r3, #2
 23fe542:	d004      	beq.n	23fe54e <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 23fe544:	bd08      	pop	{r3, pc}
        write(',');
 23fe546:	212c      	movs	r1, #44	; 0x2c
        write(':');
 23fe548:	f7ff ff3b 	bl	23fe3c2 <_ZN5spark10JSONWriter5writeEc>
}
 23fe54c:	e7fa      	b.n	23fe544 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 23fe54e:	213a      	movs	r1, #58	; 0x3a
 23fe550:	e7fa      	b.n	23fe548 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

023fe552 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 23fe552:	b510      	push	{r4, lr}
 23fe554:	4604      	mov	r4, r0
    writeSeparator();
 23fe556:	f7ff ffef 	bl	23fe538 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 23fe55a:	4620      	mov	r0, r4
 23fe55c:	217b      	movs	r1, #123	; 0x7b
 23fe55e:	f7ff ff30 	bl	23fe3c2 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 23fe562:	2300      	movs	r3, #0
}
 23fe564:	4620      	mov	r0, r4
    state_ = BEGIN;
 23fe566:	7123      	strb	r3, [r4, #4]
}
 23fe568:	bd10      	pop	{r4, pc}
	...

023fe56c <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 23fe56c:	b513      	push	{r0, r1, r4, lr}
 23fe56e:	4604      	mov	r4, r0
 23fe570:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fe572:	f7ff ffe1 	bl	23fe538 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 23fe576:	6823      	ldr	r3, [r4, #0]
 23fe578:	4620      	mov	r0, r4
 23fe57a:	68db      	ldr	r3, [r3, #12]
 23fe57c:	9a01      	ldr	r2, [sp, #4]
 23fe57e:	4903      	ldr	r1, [pc, #12]	; (23fe58c <_ZN5spark10JSONWriter5valueEi+0x20>)
 23fe580:	4798      	blx	r3
    state_ = NEXT;
 23fe582:	2301      	movs	r3, #1
}
 23fe584:	4620      	mov	r0, r4
    state_ = NEXT;
 23fe586:	7123      	strb	r3, [r4, #4]
}
 23fe588:	b002      	add	sp, #8
 23fe58a:	bd10      	pop	{r4, pc}
 23fe58c:	023ffc3c 	.word	0x023ffc3c

023fe590 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 23fe590:	b513      	push	{r0, r1, r4, lr}
 23fe592:	4604      	mov	r4, r0
 23fe594:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fe596:	f7ff ffcf 	bl	23fe538 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 23fe59a:	6823      	ldr	r3, [r4, #0]
 23fe59c:	4620      	mov	r0, r4
 23fe59e:	68db      	ldr	r3, [r3, #12]
 23fe5a0:	9a01      	ldr	r2, [sp, #4]
 23fe5a2:	4903      	ldr	r1, [pc, #12]	; (23fe5b0 <_ZN5spark10JSONWriter5valueEj+0x20>)
 23fe5a4:	4798      	blx	r3
    state_ = NEXT;
 23fe5a6:	2301      	movs	r3, #1
}
 23fe5a8:	4620      	mov	r0, r4
    state_ = NEXT;
 23fe5aa:	7123      	strb	r3, [r4, #4]
}
 23fe5ac:	b002      	add	sp, #8
 23fe5ae:	bd10      	pop	{r4, pc}
 23fe5b0:	023ffbbc 	.word	0x023ffbbc

023fe5b4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fe5b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fe5b8:	460d      	mov	r5, r1
 23fe5ba:	4690      	mov	r8, r2
    write('"');
 23fe5bc:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fe5be:	4604      	mov	r4, r0
 23fe5c0:	462f      	mov	r7, r5
    write('"');
 23fe5c2:	f7ff fefe 	bl	23fe3c2 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 23fe5c6:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 23fe66c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
 23fe5ca:	44a8      	add	r8, r5
    while (s != end) {
 23fe5cc:	4547      	cmp	r7, r8
 23fe5ce:	46ba      	mov	sl, r7
 23fe5d0:	d03d      	beq.n	23fe64e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
 23fe5d2:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
 23fe5d6:	2e22      	cmp	r6, #34	; 0x22
 23fe5d8:	d006      	beq.n	23fe5e8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fe5da:	2e5c      	cmp	r6, #92	; 0x5c
 23fe5dc:	d004      	beq.n	23fe5e8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fe5de:	4630      	mov	r0, r6
 23fe5e0:	f000 ffd0 	bl	23ff584 <isprint>
 23fe5e4:	2800      	cmp	r0, #0
 23fe5e6:	d1f1      	bne.n	23fe5cc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 23fe5e8:	6823      	ldr	r3, [r4, #0]
 23fe5ea:	4629      	mov	r1, r5
 23fe5ec:	4620      	mov	r0, r4
 23fe5ee:	689b      	ldr	r3, [r3, #8]
 23fe5f0:	ebaa 0205 	sub.w	r2, sl, r5
 23fe5f4:	4798      	blx	r3
            write('\\');
 23fe5f6:	215c      	movs	r1, #92	; 0x5c
 23fe5f8:	4620      	mov	r0, r4
 23fe5fa:	f7ff fee2 	bl	23fe3c2 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 23fe5fe:	2e0d      	cmp	r6, #13
 23fe600:	d80a      	bhi.n	23fe618 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
 23fe602:	2e07      	cmp	r6, #7
 23fe604:	d91c      	bls.n	23fe640 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fe606:	f1a6 0308 	sub.w	r3, r6, #8
 23fe60a:	2b05      	cmp	r3, #5
 23fe60c:	d818      	bhi.n	23fe640 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fe60e:	e8df f003 	tbb	[pc, r3]
 23fe612:	0f0d      	.short	0x0f0d
 23fe614:	15131711 	.word	0x15131711
 23fe618:	2e22      	cmp	r6, #34	; 0x22
 23fe61a:	d001      	beq.n	23fe620 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
 23fe61c:	2e5c      	cmp	r6, #92	; 0x5c
 23fe61e:	d10f      	bne.n	23fe640 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
 23fe620:	4631      	mov	r1, r6
                write('b');
 23fe622:	4620      	mov	r0, r4
 23fe624:	f7ff fecd 	bl	23fe3c2 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 23fe628:	463d      	mov	r5, r7
    while (s != end) {
 23fe62a:	e7cf      	b.n	23fe5cc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 23fe62c:	2162      	movs	r1, #98	; 0x62
 23fe62e:	e7f8      	b.n	23fe622 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
 23fe630:	2174      	movs	r1, #116	; 0x74
 23fe632:	e7f6      	b.n	23fe622 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
 23fe634:	216e      	movs	r1, #110	; 0x6e
 23fe636:	e7f4      	b.n	23fe622 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
 23fe638:	2166      	movs	r1, #102	; 0x66
 23fe63a:	e7f2      	b.n	23fe622 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
 23fe63c:	2172      	movs	r1, #114	; 0x72
 23fe63e:	e7f0      	b.n	23fe622 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
 23fe640:	6823      	ldr	r3, [r4, #0]
 23fe642:	4632      	mov	r2, r6
 23fe644:	4649      	mov	r1, r9
 23fe646:	4620      	mov	r0, r4
 23fe648:	68db      	ldr	r3, [r3, #12]
 23fe64a:	4798      	blx	r3
                break;
 23fe64c:	e7ec      	b.n	23fe628 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
 23fe64e:	42bd      	cmp	r5, r7
 23fe650:	d005      	beq.n	23fe65e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
 23fe652:	6823      	ldr	r3, [r4, #0]
 23fe654:	4629      	mov	r1, r5
 23fe656:	4620      	mov	r0, r4
 23fe658:	689b      	ldr	r3, [r3, #8]
 23fe65a:	1b7a      	subs	r2, r7, r5
 23fe65c:	4798      	blx	r3
    }
    write('"');
 23fe65e:	2122      	movs	r1, #34	; 0x22
 23fe660:	4620      	mov	r0, r4
 23fe662:	f7ff feae 	bl	23fe3c2 <_ZN5spark10JSONWriter5writeEc>
}
 23fe666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fe66a:	bf00      	nop
 23fe66c:	023ffbbf 	.word	0x023ffbbf

023fe670 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 23fe670:	b513      	push	{r0, r1, r4, lr}
 23fe672:	4604      	mov	r4, r0
 23fe674:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fe678:	f7ff ff5e 	bl	23fe538 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 23fe67c:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fe680:	4620      	mov	r0, r4
 23fe682:	f7ff ff97 	bl	23fe5b4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 23fe686:	2302      	movs	r3, #2
}
 23fe688:	4620      	mov	r0, r4
    state_ = VALUE;
 23fe68a:	7123      	strb	r3, [r4, #4]
}
 23fe68c:	b002      	add	sp, #8
 23fe68e:	bd10      	pop	{r4, pc}

023fe690 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 23fe690:	b513      	push	{r0, r1, r4, lr}
 23fe692:	4604      	mov	r4, r0
 23fe694:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fe698:	f7ff ff4e 	bl	23fe538 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 23fe69c:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fe6a0:	4620      	mov	r0, r4
 23fe6a2:	f7ff ff87 	bl	23fe5b4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 23fe6a6:	2301      	movs	r3, #1
}
 23fe6a8:	4620      	mov	r0, r4
    state_ = NEXT;
 23fe6aa:	7123      	strb	r3, [r4, #4]
}
 23fe6ac:	b002      	add	sp, #8
 23fe6ae:	bd10      	pop	{r4, pc}

023fe6b0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23fe6b0:	4770      	bx	lr

023fe6b2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fe6b2:	7441      	strb	r1, [r0, #17]
}
 23fe6b4:	4770      	bx	lr

023fe6b6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23fe6b6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23fe6b8:	7c00      	ldrb	r0, [r0, #16]
 23fe6ba:	f7fd fed1 	bl	23fc460 <hal_usart_available_data_for_write>
}
 23fe6be:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fe6c2:	bd08      	pop	{r3, pc}

023fe6c4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23fe6c4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23fe6c6:	7c00      	ldrb	r0, [r0, #16]
 23fe6c8:	f7fd fe84 	bl	23fc3d4 <hal_usart_available>
}
 23fe6cc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fe6d0:	bd08      	pop	{r3, pc}

023fe6d2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23fe6d2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23fe6d4:	7c00      	ldrb	r0, [r0, #16]
 23fe6d6:	f7fd fe99 	bl	23fc40c <hal_usart_peek>
}
 23fe6da:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fe6de:	bd08      	pop	{r3, pc}

023fe6e0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23fe6e0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23fe6e2:	7c00      	ldrb	r0, [r0, #16]
 23fe6e4:	f7fd fe84 	bl	23fc3f0 <hal_usart_read>
}
 23fe6e8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fe6ec:	bd08      	pop	{r3, pc}

023fe6ee <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23fe6ee:	7c00      	ldrb	r0, [r0, #16]
 23fe6f0:	f7fd be9a 	b.w	23fc428 <hal_usart_flush>

023fe6f4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23fe6f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fe6f6:	7c45      	ldrb	r5, [r0, #17]
{
 23fe6f8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fe6fa:	b12d      	cbz	r5, 23fe708 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23fe6fc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23fe6fe:	b003      	add	sp, #12
 23fe700:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23fe704:	f7fd be58 	b.w	23fc3b8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fe708:	7c00      	ldrb	r0, [r0, #16]
 23fe70a:	9101      	str	r1, [sp, #4]
 23fe70c:	f7fd fea8 	bl	23fc460 <hal_usart_available_data_for_write>
 23fe710:	2800      	cmp	r0, #0
 23fe712:	9901      	ldr	r1, [sp, #4]
 23fe714:	dcf2      	bgt.n	23fe6fc <_ZN11USARTSerial5writeEh+0x8>
}
 23fe716:	4628      	mov	r0, r5
 23fe718:	b003      	add	sp, #12
 23fe71a:	bd30      	pop	{r4, r5, pc}

023fe71c <_ZN11USARTSerialD0Ev>:
 23fe71c:	b510      	push	{r4, lr}
 23fe71e:	4604      	mov	r4, r0
 23fe720:	2114      	movs	r1, #20
 23fe722:	f7fc ff8c 	bl	23fb63e <_ZdlPvj>
 23fe726:	4620      	mov	r0, r4
 23fe728:	bd10      	pop	{r4, pc}
	...

023fe72c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fe72c:	b510      	push	{r4, lr}
 23fe72e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fe732:	4604      	mov	r4, r0
 23fe734:	4608      	mov	r0, r1
 23fe736:	4611      	mov	r1, r2
 23fe738:	2200      	movs	r2, #0
 23fe73a:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fe73e:	4b04      	ldr	r3, [pc, #16]	; (23fe750 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23fe740:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fe742:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fe744:	2301      	movs	r3, #1
 23fe746:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23fe748:	f7fd fea6 	bl	23fc498 <hal_usart_init_ex>
}
 23fe74c:	4620      	mov	r0, r4
 23fe74e:	bd10      	pop	{r4, pc}
 23fe750:	023ffbd0 	.word	0x023ffbd0

023fe754 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 23fe754:	2300      	movs	r3, #0
 23fe756:	7c00      	ldrb	r0, [r0, #16]
 23fe758:	f7fd be90 	b.w	23fc47c <hal_usart_begin_config>

023fe75c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 23fe75c:	2200      	movs	r2, #0
 23fe75e:	f7ff bff9 	b.w	23fe754 <_ZN11USARTSerial5beginEmm>

023fe762 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 23fe762:	7c00      	ldrb	r0, [r0, #16]
 23fe764:	f7fd be1a 	b.w	23fc39c <hal_usart_end>

023fe768 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23fe768:	7c00      	ldrb	r0, [r0, #16]
 23fe76a:	f7fd be6b 	b.w	23fc444 <hal_usart_is_enabled>

023fe76e <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23fe76e:	4770      	bx	lr

023fe770 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23fe770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe772:	4606      	mov	r6, r0
 23fe774:	4615      	mov	r5, r2
 23fe776:	460c      	mov	r4, r1
 23fe778:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23fe77a:	42bc      	cmp	r4, r7
 23fe77c:	d006      	beq.n	23fe78c <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23fe77e:	6833      	ldr	r3, [r6, #0]
 23fe780:	4630      	mov	r0, r6
 23fe782:	689b      	ldr	r3, [r3, #8]
 23fe784:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fe788:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23fe78a:	e7f6      	b.n	23fe77a <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23fe78c:	4628      	mov	r0, r5
 23fe78e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fe790 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23fe790:	2200      	movs	r2, #0
 23fe792:	7c00      	ldrb	r0, [r0, #16]
 23fe794:	f7fd beb8 	b.w	23fc508 <hal_i2c_write>

023fe798 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23fe798:	2100      	movs	r1, #0
 23fe79a:	7c00      	ldrb	r0, [r0, #16]
 23fe79c:	f7fd bec2 	b.w	23fc524 <hal_i2c_available>

023fe7a0 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23fe7a0:	2100      	movs	r1, #0
 23fe7a2:	7c00      	ldrb	r0, [r0, #16]
 23fe7a4:	f7fd becc 	b.w	23fc540 <hal_i2c_read>

023fe7a8 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23fe7a8:	2100      	movs	r1, #0
 23fe7aa:	7c00      	ldrb	r0, [r0, #16]
 23fe7ac:	f7fd bed6 	b.w	23fc55c <hal_i2c_peek>

023fe7b0 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23fe7b0:	2100      	movs	r1, #0
 23fe7b2:	7c00      	ldrb	r0, [r0, #16]
 23fe7b4:	f7fd bee0 	b.w	23fc578 <hal_i2c_flush>

023fe7b8 <_ZN7TwoWireD0Ev>:
 23fe7b8:	b510      	push	{r4, lr}
 23fe7ba:	4604      	mov	r4, r0
 23fe7bc:	2114      	movs	r1, #20
 23fe7be:	f7fc ff3e 	bl	23fb63e <_ZdlPvj>
 23fe7c2:	4620      	mov	r0, r4
 23fe7c4:	bd10      	pop	{r4, pc}

023fe7c6 <_ZNK16WireTransmission9halConfigEv>:
    hal_i2c_transmission_config_t conf = {
 23fe7c6:	2200      	movs	r2, #0
 23fe7c8:	e9c0 2200 	strd	r2, r2, [r0]
 23fe7cc:	2218      	movs	r2, #24
 23fe7ce:	8002      	strh	r2, [r0, #0]
    };
 23fe7d0:	780a      	ldrb	r2, [r1, #0]
 23fe7d2:	7102      	strb	r2, [r0, #4]
 23fe7d4:	684a      	ldr	r2, [r1, #4]
 23fe7d6:	6082      	str	r2, [r0, #8]
 23fe7d8:	68ca      	ldr	r2, [r1, #12]
 23fe7da:	60c2      	str	r2, [r0, #12]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0),
 23fe7dc:	7a0a      	ldrb	r2, [r1, #8]
 23fe7de:	6102      	str	r2, [r0, #16]
    };
 23fe7e0:	690a      	ldr	r2, [r1, #16]
 23fe7e2:	6142      	str	r2, [r0, #20]
  }
 23fe7e4:	4770      	bx	lr
	...

023fe7e8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fe7e8:	b538      	push	{r3, r4, r5, lr}
 23fe7ea:	4604      	mov	r4, r0
 23fe7ec:	4615      	mov	r5, r2
 23fe7ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fe7f2:	2200      	movs	r2, #0
 23fe7f4:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fe7f8:	4b09      	ldr	r3, [pc, #36]	; (23fe820 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23fe7fa:	4608      	mov	r0, r1
  _i2c = i2c;
 23fe7fc:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fe7fe:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23fe800:	4629      	mov	r1, r5
 23fe802:	f7fd fed5 	bl	23fc5b0 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fe806:	30bf      	adds	r0, #191	; 0xbf
 23fe808:	d108      	bne.n	23fe81c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23fe80a:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fe80c:	07db      	lsls	r3, r3, #31
 23fe80e:	d505      	bpl.n	23fe81c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23fe810:	6868      	ldr	r0, [r5, #4]
 23fe812:	f7fe f951 	bl	23fcab8 <free>
    free(conf.tx_buffer);
 23fe816:	68e8      	ldr	r0, [r5, #12]
 23fe818:	f7fe f94e 	bl	23fcab8 <free>
}
 23fe81c:	4620      	mov	r0, r4
 23fe81e:	bd38      	pop	{r3, r4, r5, pc}
 23fe820:	023ffc04 	.word	0x023ffc04

023fe824 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 23fe824:	2300      	movs	r3, #0
 23fe826:	7c00      	ldrb	r0, [r0, #16]
 23fe828:	461a      	mov	r2, r3
 23fe82a:	4619      	mov	r1, r3
 23fe82c:	f7fd be42 	b.w	23fc4b4 <hal_i2c_begin>

023fe830 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 23fe830:	b510      	push	{r4, lr}
 23fe832:	4604      	mov	r4, r0
 23fe834:	b086      	sub	sp, #24
  auto conf = transfer.halConfig();
 23fe836:	4668      	mov	r0, sp
 23fe838:	f7ff ffc5 	bl	23fe7c6 <_ZNK16WireTransmission9halConfigEv>
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 23fe83c:	2200      	movs	r2, #0
 23fe83e:	4669      	mov	r1, sp
 23fe840:	7c20      	ldrb	r0, [r4, #16]
 23fe842:	f7fd fec3 	bl	23fc5cc <hal_i2c_request_ex>
}
 23fe846:	b006      	add	sp, #24
 23fe848:	bd10      	pop	{r4, pc}

023fe84a <_ZN7TwoWire11requestFromEhjh>:
{
 23fe84a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        buffer_(nullptr) {
 23fe84c:	f88d 1004 	strb.w	r1, [sp, #4]
 23fe850:	2100      	movs	r1, #0
 23fe852:	f04f 0c64 	mov.w	ip, #100	; 0x64
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 23fe856:	1a5b      	subs	r3, r3, r1
 23fe858:	bf18      	it	ne
 23fe85a:	2301      	movne	r3, #1
 23fe85c:	e9cd c104 	strd	ip, r1, [sp, #16]
 23fe860:	a901      	add	r1, sp, #4
    size_ = size;
 23fe862:	9202      	str	r2, [sp, #8]
 23fe864:	f88d 300c 	strb.w	r3, [sp, #12]
 23fe868:	f7ff ffe2 	bl	23fe830 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 23fe86c:	b007      	add	sp, #28
 23fe86e:	f85d fb04 	ldr.w	pc, [sp], #4

023fe872 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 23fe872:	2301      	movs	r3, #1
 23fe874:	f7ff bfe9 	b.w	23fe84a <_ZN7TwoWire11requestFromEhjh>

023fe878 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 23fe878:	2200      	movs	r2, #0
 23fe87a:	7c00      	ldrb	r0, [r0, #16]
 23fe87c:	f7fd be28 	b.w	23fc4d0 <hal_i2c_begin_transmission>

023fe880 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 23fe880:	2200      	movs	r2, #0
 23fe882:	7c00      	ldrb	r0, [r0, #16]
 23fe884:	f7fd be32 	b.w	23fc4ec <hal_i2c_end_transmission>

023fe888 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 23fe888:	2101      	movs	r1, #1
 23fe88a:	f7ff bff9 	b.w	23fe880 <_ZN7TwoWire15endTransmissionEh>
	...

023fe890 <_GLOBAL__sub_I__ZN7TwoWireC2E19hal_i2c_interface_tRK16hal_i2c_config_t>:
        buffer_(nullptr) {
 23fe890:	21ff      	movs	r1, #255	; 0xff
 23fe892:	2200      	movs	r2, #0
      : address_{address},
 23fe894:	4b04      	ldr	r3, [pc, #16]	; (23fe8a8 <_GLOBAL__sub_I__ZN7TwoWireC2E19hal_i2c_interface_tRK16hal_i2c_config_t+0x18>)
        buffer_(nullptr) {
 23fe896:	2001      	movs	r0, #1
 23fe898:	e9c3 1200 	strd	r1, r2, [r3]
 23fe89c:	2164      	movs	r1, #100	; 0x64
 23fe89e:	611a      	str	r2, [r3, #16]
 23fe8a0:	e9c3 0102 	strd	r0, r1, [r3, #8]

namespace particle {
namespace detail {
const WireTransmission WIRE_INVALID_TRANSMISSION(0xff);
} // detail
} // particle
 23fe8a4:	4770      	bx	lr
 23fe8a6:	bf00      	nop
 23fe8a8:	1007af68 	.word	0x1007af68

023fe8ac <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
 23fe8ac:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
 23fe8ae:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
 23fe8b0:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
 23fe8b4:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 23fe8b6:	2201      	movs	r2, #1
 23fe8b8:	f04f 33ff 	mov.w	r3, #4294967295
 23fe8bc:	f10d 0107 	add.w	r1, sp, #7
 23fe8c0:	47a0      	blx	r4
}
 23fe8c2:	b002      	add	sp, #8
 23fe8c4:	bd10      	pop	{r4, pc}

023fe8c6 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
 23fe8c6:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
 23fe8c8:	6803      	ldr	r3, [r0, #0]
 23fe8ca:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 23fe8cc:	f04f 33ff 	mov.w	r3, #4294967295
 23fe8d0:	46a4      	mov	ip, r4
}
 23fe8d2:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
 23fe8d6:	4760      	bx	ip

023fe8d8 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
 23fe8d8:	b513      	push	{r0, r1, r4, lr}
 23fe8da:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
 23fe8dc:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
 23fe8de:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
 23fe8e2:	6c14      	ldr	r4, [r2, #64]	; 0x40
 23fe8e4:	f10d 0107 	add.w	r1, sp, #7
 23fe8e8:	2201      	movs	r2, #1
 23fe8ea:	47a0      	blx	r4
}
 23fe8ec:	b002      	add	sp, #8
 23fe8ee:	bd10      	pop	{r4, pc}

023fe8f0 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
 23fe8f0:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
 23fe8f2:	6943      	ldr	r3, [r0, #20]
 23fe8f4:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 23fe8f6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 23fe8fa:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 23fe8fe:	429a      	cmp	r2, r3
 23fe900:	d008      	beq.n	23fe914 <_ZN9TCPClient4readEv+0x24>
 23fe902:	6963      	ldr	r3, [r4, #20]
 23fe904:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 23fe908:	1c51      	adds	r1, r2, #1
 23fe90a:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
 23fe90e:	4413      	add	r3, r2
 23fe910:	7918      	ldrb	r0, [r3, #4]
}
 23fe912:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 23fe914:	6803      	ldr	r3, [r0, #0]
 23fe916:	691b      	ldr	r3, [r3, #16]
 23fe918:	4798      	blx	r3
 23fe91a:	2800      	cmp	r0, #0
 23fe91c:	d1f1      	bne.n	23fe902 <_ZN9TCPClient4readEv+0x12>
 23fe91e:	f04f 30ff 	mov.w	r0, #4294967295
 23fe922:	e7f6      	b.n	23fe912 <_ZN9TCPClient4readEv+0x22>

023fe924 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
 23fe924:	4770      	bx	lr

023fe926 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
 23fe926:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
 23fe928:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
 23fe92a:	43c0      	mvns	r0, r0
 23fe92c:	0fc0      	lsrs	r0, r0, #31
 23fe92e:	4770      	bx	lr

023fe930 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 23fe930:	4770      	bx	lr
	...

023fe934 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
 23fe934:	4b06      	ldr	r3, [pc, #24]	; (23fe950 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 23fe936:	b510      	push	{r4, lr}
	    ||
 23fe938:	4299      	cmp	r1, r3
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
 23fe93a:	f100 040c 	add.w	r4, r0, #12
 23fe93e:	d005      	beq.n	23fe94c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
 23fe940:	4608      	mov	r0, r1
 23fe942:	f000 fd07 	bl	23ff354 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
 23fe946:	2800      	cmp	r0, #0
 23fe948:	bf08      	it	eq
 23fe94a:	2400      	moveq	r4, #0
      }
 23fe94c:	4620      	mov	r0, r4
 23fe94e:	bd10      	pop	{r4, pc}
 23fe950:	023ffa64 	.word	0x023ffa64

023fe954 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 23fe954:	b510      	push	{r4, lr}
 23fe956:	4604      	mov	r4, r0
 23fe958:	21ac      	movs	r1, #172	; 0xac
 23fe95a:	f7fc fe70 	bl	23fb63e <_ZdlPvj>
 23fe95e:	4620      	mov	r0, r4
 23fe960:	bd10      	pop	{r4, pc}

023fe962 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 23fe962:	21ac      	movs	r1, #172	; 0xac
 23fe964:	f7fc be6b 	b.w	23fb63e <_ZdlPvj>

023fe968 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
 23fe968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
 23fe96c:	f04f 0800 	mov.w	r8, #0
 23fe970:	461c      	mov	r4, r3
 23fe972:	b086      	sub	sp, #24
 23fe974:	f8c0 8004 	str.w	r8, [r0, #4]
 23fe978:	4605      	mov	r5, r0
 23fe97a:	460e      	mov	r6, r1
 23fe97c:	4617      	mov	r7, r2
    struct timeval tv = {};
 23fe97e:	4641      	mov	r1, r8
 23fe980:	2210      	movs	r2, #16
 23fe982:	a802      	add	r0, sp, #8
 23fe984:	f000 fe2d 	bl	23ff5e2 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
 23fe988:	1c63      	adds	r3, r4, #1
 23fe98a:	d009      	beq.n	23fe9a0 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
 23fe98c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fe990:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
 23fe994:	fb03 4412 	mls	r4, r3, r2, r4
 23fe998:	435c      	muls	r4, r3
        tv.tv_sec = timeout / 1000;
 23fe99a:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
 23fe99e:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
 23fe9a0:	2310      	movs	r3, #16
 23fe9a2:	6968      	ldr	r0, [r5, #20]
 23fe9a4:	9300      	str	r3, [sp, #0]
 23fe9a6:	f241 0205 	movw	r2, #4101	; 0x1005
 23fe9aa:	f640 71ff 	movw	r1, #4095	; 0xfff
 23fe9ae:	6800      	ldr	r0, [r0, #0]
 23fe9b0:	ab02      	add	r3, sp, #8
 23fe9b2:	f7fd fe19 	bl	23fc5e8 <sock_setsockopt>
    if (ret < 0) {
 23fe9b6:	2800      	cmp	r0, #0
 23fe9b8:	da07      	bge.n	23fe9ca <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
 23fe9ba:	f7fe f8b5 	bl	23fcb28 <__errno>
 23fe9be:	6803      	ldr	r3, [r0, #0]
        return 0;
 23fe9c0:	2000      	movs	r0, #0
 23fe9c2:	606b      	str	r3, [r5, #4]
}
 23fe9c4:	b006      	add	sp, #24
 23fe9c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
 23fe9ca:	6968      	ldr	r0, [r5, #20]
 23fe9cc:	2300      	movs	r3, #0
 23fe9ce:	463a      	mov	r2, r7
 23fe9d0:	4631      	mov	r1, r6
 23fe9d2:	6800      	ldr	r0, [r0, #0]
 23fe9d4:	f7fd fe40 	bl	23fc658 <sock_send>
    if (ret < 0) {
 23fe9d8:	1e03      	subs	r3, r0, #0
 23fe9da:	dbee      	blt.n	23fe9ba <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
 23fe9dc:	4618      	mov	r0, r3
 23fe9de:	e7f1      	b.n	23fe9c4 <_ZN9TCPClient5writeEPKhjm+0x5c>

023fe9e0 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
 23fe9e0:	b530      	push	{r4, r5, lr}
 23fe9e2:	4604      	mov	r4, r0
 23fe9e4:	b087      	sub	sp, #28
        return *this = IPAddress(address);
 23fe9e6:	4668      	mov	r0, sp
 23fe9e8:	f7ff fbf4 	bl	23fe1d4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23fe9ec:	ad01      	add	r5, sp, #4
 23fe9ee:	3404      	adds	r4, #4
 23fe9f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fe9f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fe9f4:	682b      	ldr	r3, [r5, #0]
 23fe9f6:	7023      	strb	r3, [r4, #0]
    }
 23fe9f8:	b007      	add	sp, #28
 23fe9fa:	bd30      	pop	{r4, r5, pc}

023fe9fc <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
 23fe9fc:	b570      	push	{r4, r5, r6, lr}
class IPAddress : public Printable {
 23fe9fe:	4604      	mov	r4, r0
 23fea00:	4606      	mov	r6, r0
      { return _M_ptr; }
 23fea02:	694d      	ldr	r5, [r1, #20]
 23fea04:	4b04      	ldr	r3, [pc, #16]	; (23fea18 <_ZN9TCPClient8remoteIPEv+0x1c>)
 23fea06:	358c      	adds	r5, #140	; 0x8c
 23fea08:	f844 3b04 	str.w	r3, [r4], #4
 23fea0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fea0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fea10:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 23fea12:	4630      	mov	r0, r6
 23fea14:	7023      	strb	r3, [r4, #0]
 23fea16:	bd70      	pop	{r4, r5, r6, pc}
 23fea18:	023ffb7c 	.word	0x023ffb7c

023fea1c <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
 23fea1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fea20:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
 23fea22:	2400      	movs	r4, #0
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
 23fea24:	4698      	mov	r8, r3
    stop();
 23fea26:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
 23fea28:	b093      	sub	sp, #76	; 0x4c
    stop();
 23fea2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
 23fea2c:	4606      	mov	r6, r0
 23fea2e:	4617      	mov	r7, r2
    stop();
 23fea30:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
 23fea32:	4628      	mov	r0, r5
 23fea34:	466b      	mov	r3, sp
 23fea36:	4622      	mov	r2, r4
 23fea38:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
 23fea3a:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
 23fea3c:	f7fd fb5e 	bl	23fc0fc <netdb_getaddrinfo>
 23fea40:	4605      	mov	r5, r0
 23fea42:	2800      	cmp	r0, #0
 23fea44:	d163      	bne.n	23feb0e <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
 23fea46:	9b00      	ldr	r3, [sp, #0]
 23fea48:	2b00      	cmp	r3, #0
 23fea4a:	d04b      	beq.n	23feae4 <_ZN9TCPClient7connectEPKctm+0xc8>
 23fea4c:	695b      	ldr	r3, [r3, #20]
 23fea4e:	2b00      	cmp	r3, #0
 23fea50:	d048      	beq.n	23feae4 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
 23fea52:	a806      	add	r0, sp, #24
 23fea54:	f7ff fb6e 	bl	23fe134 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
 23fea58:	9b00      	ldr	r3, [sp, #0]
 23fea5a:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
 23fea5c:	7863      	ldrb	r3, [r4, #1]
 23fea5e:	2b02      	cmp	r3, #2
 23fea60:	d104      	bne.n	23fea6c <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
 23fea62:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
 23fea64:	a806      	add	r0, sp, #24
 23fea66:	f7ff ffbb 	bl	23fe9e0 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
 23fea6a:	e026      	b.n	23feaba <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
 23fea6c:	2b0a      	cmp	r3, #10
 23fea6e:	d124      	bne.n	23feaba <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
 23fea70:	2211      	movs	r2, #17
 23fea72:	4629      	mov	r1, r5
 23fea74:	a801      	add	r0, sp, #4
 23fea76:	f000 fdb4 	bl	23ff5e2 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
 23fea7a:	68a3      	ldr	r3, [r4, #8]
 23fea7c:	2b00      	cmp	r3, #0
 23fea7e:	d038      	beq.n	23feaf2 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fea80:	f104 0308 	add.w	r3, r4, #8
 23fea84:	f10d 0c04 	add.w	ip, sp, #4
 23fea88:	3418      	adds	r4, #24
 23fea8a:	4662      	mov	r2, ip
 23fea8c:	6818      	ldr	r0, [r3, #0]
 23fea8e:	6859      	ldr	r1, [r3, #4]
 23fea90:	3308      	adds	r3, #8
 23fea92:	c203      	stmia	r2!, {r0, r1}
 23fea94:	42a3      	cmp	r3, r4
 23fea96:	4694      	mov	ip, r2
 23fea98:	d1f7      	bne.n	23fea8a <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
 23fea9a:	2306      	movs	r3, #6
            addr = IPAddress(a);
 23fea9c:	a901      	add	r1, sp, #4
 23fea9e:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
 23feaa0:	f88d 3014 	strb.w	r3, [sp, #20]
 23feaa4:	ac07      	add	r4, sp, #28
            addr = IPAddress(a);
 23feaa6:	f7ff fb53 	bl	23fe150 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23feaaa:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
 23feaae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 23feab2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23feab4:	f8dc 3000 	ldr.w	r3, [ip]
 23feab8:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
 23feaba:	a806      	add	r0, sp, #24
 23feabc:	f7ff fb5a 	bl	23fe174 <_ZNK9IPAddresscvbEv>
        if (addr) {
 23feac0:	b180      	cbz	r0, 23feae4 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
 23feac2:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
 23feac4:	ac0d      	add	r4, sp, #52	; 0x34
 23feac6:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
 23feaca:	4b12      	ldr	r3, [pc, #72]	; (23feb14 <_ZN9TCPClient7connectEPKctm+0xf8>)
 23feacc:	ad07      	add	r5, sp, #28
 23feace:	930c      	str	r3, [sp, #48]	; 0x30
 23fead0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fead2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fead4:	682b      	ldr	r3, [r5, #0]
 23fead6:	463a      	mov	r2, r7
 23fead8:	7023      	strb	r3, [r4, #0]
 23feada:	4630      	mov	r0, r6
 23feadc:	4643      	mov	r3, r8
 23feade:	a90c      	add	r1, sp, #48	; 0x30
 23feae0:	47c8      	blx	r9
 23feae2:	4605      	mov	r5, r0
    SCOPE_GUARD({
 23feae4:	9800      	ldr	r0, [sp, #0]
 23feae6:	f7fd fafb 	bl	23fc0e0 <netdb_freeaddrinfo>
}
 23feaea:	4628      	mov	r0, r5
 23feaec:	b013      	add	sp, #76	; 0x4c
 23feaee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
 23feaf2:	68e3      	ldr	r3, [r4, #12]
 23feaf4:	2b00      	cmp	r3, #0
 23feaf6:	d1c3      	bne.n	23fea80 <_ZN9TCPClient7connectEPKctm+0x64>
 23feaf8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 23feafc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 23feb00:	f7fd fc30 	bl	23fc364 <inet_htonl>
 23feb04:	4581      	cmp	r9, r0
 23feb06:	d1bb      	bne.n	23fea80 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
 23feb08:	f104 0114 	add.w	r1, r4, #20
 23feb0c:	e7aa      	b.n	23fea64 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
 23feb0e:	4625      	mov	r5, r4
 23feb10:	e7e8      	b.n	23feae4 <_ZN9TCPClient7connectEPKctm+0xc8>
 23feb12:	bf00      	nop
 23feb14:	023ffb7c 	.word	0x023ffb7c

023feb18 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
 23feb18:	b538      	push	{r3, r4, r5, lr}
 23feb1a:	6943      	ldr	r3, [r0, #20]
 23feb1c:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
 23feb1e:	681a      	ldr	r2, [r3, #0]
 23feb20:	2a00      	cmp	r2, #0
 23feb22:	da10      	bge.n	23feb46 <_ZN9TCPClient9connectedEv+0x2e>
 23feb24:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 23feb28:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 23feb2c:	429a      	cmp	r2, r3
 23feb2e:	d10a      	bne.n	23feb46 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
 23feb30:	6803      	ldr	r3, [r0, #0]
 23feb32:	691b      	ldr	r3, [r3, #16]
 23feb34:	4798      	blx	r3
        if (!rv) {
 23feb36:	4604      	mov	r4, r0
 23feb38:	b928      	cbnz	r0, 23feb46 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
 23feb3a:	682b      	ldr	r3, [r5, #0]
 23feb3c:	4628      	mov	r0, r5
 23feb3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23feb40:	4798      	blx	r3
        rv = available();
 23feb42:	4620      	mov	r0, r4
}
 23feb44:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
 23feb46:	2001      	movs	r0, #1
 23feb48:	e7fc      	b.n	23feb44 <_ZN9TCPClient9connectedEv+0x2c>

023feb4a <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
 23feb4a:	b510      	push	{r4, lr}
 23feb4c:	6943      	ldr	r3, [r0, #20]
 23feb4e:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 23feb50:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 23feb54:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 23feb58:	429a      	cmp	r2, r3
 23feb5a:	d005      	beq.n	23feb68 <_ZN9TCPClient4peekEv+0x1e>
 23feb5c:	6963      	ldr	r3, [r4, #20]
 23feb5e:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 23feb62:	4413      	add	r3, r2
 23feb64:	7918      	ldrb	r0, [r3, #4]
}
 23feb66:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 23feb68:	6803      	ldr	r3, [r0, #0]
 23feb6a:	691b      	ldr	r3, [r3, #16]
 23feb6c:	4798      	blx	r3
 23feb6e:	2800      	cmp	r0, #0
 23feb70:	d1f4      	bne.n	23feb5c <_ZN9TCPClient4peekEv+0x12>
 23feb72:	f04f 30ff 	mov.w	r0, #4294967295
 23feb76:	e7f6      	b.n	23feb66 <_ZN9TCPClient4peekEv+0x1c>

023feb78 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
 23feb78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23feb7a:	6943      	ldr	r3, [r0, #20]
 23feb7c:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
 23feb7e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 23feb82:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
int TCPClient::read(uint8_t *buffer, size_t size) {
 23feb86:	4605      	mov	r5, r0
    if (bufferCount() || available()) {
 23feb88:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
 23feb8a:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
 23feb8c:	d016      	beq.n	23febbc <_ZN9TCPClient4readEPhj+0x44>
 23feb8e:	6969      	ldr	r1, [r5, #20]
        memcpy(buffer, &d_->buffer[d_->offset], read);
 23feb90:	4630      	mov	r0, r6
    return d_->total - d_->offset;
 23feb92:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 23feb96:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
 23feb9a:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 23feb9c:	42bc      	cmp	r4, r7
 23feb9e:	bf28      	it	cs
 23feba0:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
 23feba2:	3304      	adds	r3, #4
 23feba4:	4622      	mov	r2, r4
 23feba6:	4419      	add	r1, r3
 23feba8:	f000 fcf4 	bl	23ff594 <memcpy>
 23febac:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
 23febae:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 23febb2:	4423      	add	r3, r4
 23febb4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
 23febb8:	4620      	mov	r0, r4
 23febba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
 23febbc:	6803      	ldr	r3, [r0, #0]
 23febbe:	691b      	ldr	r3, [r3, #16]
 23febc0:	4798      	blx	r3
 23febc2:	2800      	cmp	r0, #0
 23febc4:	d1e3      	bne.n	23feb8e <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
 23febc6:	f04f 34ff 	mov.w	r4, #4294967295
 23febca:	e7f5      	b.n	23febb8 <_ZN9TCPClient4readEPhj+0x40>

023febcc <_ZN9TCPClient12flush_bufferEv>:
    d_->offset = 0;
 23febcc:	2300      	movs	r3, #0
 23febce:	6942      	ldr	r2, [r0, #20]
 23febd0:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 23febd4:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
 23febd6:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
 23febda:	4770      	bx	lr

023febdc <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
 23febdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 23febde:	460c      	mov	r4, r1
 23febe0:	461f      	mov	r7, r3
    stop();
 23febe2:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
 23febe4:	b08b      	sub	sp, #44	; 0x2c
    stop();
 23febe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
 23febe8:	4605      	mov	r5, r0
 23febea:	4616      	mov	r6, r2
    stop();
 23febec:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
 23febee:	7d23      	ldrb	r3, [r4, #20]
 23febf0:	2206      	movs	r2, #6
 23febf2:	2b04      	cmp	r3, #4
 23febf4:	bf0c      	ite	eq
 23febf6:	2002      	moveq	r0, #2
 23febf8:	200a      	movne	r0, #10
 23febfa:	2101      	movs	r1, #1
 23febfc:	f7fd fd3a 	bl	23fc674 <sock_socket>
 23fec00:	696b      	ldr	r3, [r5, #20]
 23fec02:	6018      	str	r0, [r3, #0]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
 23fec04:	696b      	ldr	r3, [r5, #20]
 23fec06:	681b      	ldr	r3, [r3, #0]
 23fec08:	2b00      	cmp	r3, #0
 23fec0a:	da07      	bge.n	23fec1c <_ZN9TCPClient7connectE9IPAddresstm+0x40>
    NAMED_SCOPE_GUARD(done, {
 23fec0c:	682b      	ldr	r3, [r5, #0]
 23fec0e:	4628      	mov	r0, r5
 23fec10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
 23fec12:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
 23fec14:	4798      	blx	r3
}
 23fec16:	4620      	mov	r0, r4
 23fec18:	b00b      	add	sp, #44	; 0x2c
 23fec1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    flush_buffer();
 23fec1c:	4628      	mov	r0, r5
 23fec1e:	f7ff ffd5 	bl	23febcc <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
 23fec22:	b1b7      	cbz	r7, 23fec52 <_ZN9TCPClient7connectE9IPAddresstm+0x76>
        struct ifreq ifr = {};
 23fec24:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
 23fec26:	a903      	add	r1, sp, #12
 23fec28:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
 23fec2a:	9303      	str	r3, [sp, #12]
 23fec2c:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
 23fec30:	f7fd faaa 	bl	23fc188 <if_index_to_name>
 23fec34:	2800      	cmp	r0, #0
 23fec36:	d1e9      	bne.n	23fec0c <_ZN9TCPClient7connectE9IPAddresstm+0x30>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
 23fec38:	2306      	movs	r3, #6
 23fec3a:	6968      	ldr	r0, [r5, #20]
 23fec3c:	9300      	str	r3, [sp, #0]
 23fec3e:	f241 020b 	movw	r2, #4107	; 0x100b
 23fec42:	f640 71ff 	movw	r1, #4095	; 0xfff
 23fec46:	6800      	ldr	r0, [r0, #0]
 23fec48:	ab03      	add	r3, sp, #12
 23fec4a:	f7fd fccd 	bl	23fc5e8 <sock_setsockopt>
 23fec4e:	2800      	cmp	r0, #0
 23fec50:	d1dc      	bne.n	23fec0c <_ZN9TCPClient7connectE9IPAddresstm+0x30>
    sockaddr_storage saddr = {};
 23fec52:	221c      	movs	r2, #28
 23fec54:	2100      	movs	r1, #0
 23fec56:	a803      	add	r0, sp, #12
 23fec58:	f000 fcc3 	bl	23ff5e2 <memset>
    if (ip.version() == 4) {
 23fec5c:	7d23      	ldrb	r3, [r4, #20]
 23fec5e:	2b04      	cmp	r3, #4
 23fec60:	d11d      	bne.n	23fec9e <_ZN9TCPClient7connectE9IPAddresstm+0xc2>
        s->sin_len = sizeof(saddr);
 23fec62:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
 23fec66:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
 23fec68:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
 23fec6c:	f7fd fb88 	bl	23fc380 <inet_htons>
 23fec70:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
 23fec74:	6860      	ldr	r0, [r4, #4]
 23fec76:	f7fd fb75 	bl	23fc364 <inet_htonl>
 23fec7a:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
 23fec7c:	696b      	ldr	r3, [r5, #20]
 23fec7e:	221c      	movs	r2, #28
 23fec80:	6818      	ldr	r0, [r3, #0]
 23fec82:	a903      	add	r1, sp, #12
 23fec84:	f7fd fccc 	bl	23fc620 <sock_connect>
 23fec88:	2800      	cmp	r0, #0
 23fec8a:	d1bf      	bne.n	23fec0c <_ZN9TCPClient7connectE9IPAddresstm+0x30>
 23fec8c:	696d      	ldr	r5, [r5, #20]
 23fec8e:	3404      	adds	r4, #4
 23fec90:	358c      	adds	r5, #140	; 0x8c
 23fec92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23fec94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23fec96:	6823      	ldr	r3, [r4, #0]
    return 1; // success
 23fec98:	2401      	movs	r4, #1
 23fec9a:	702b      	strb	r3, [r5, #0]
 23fec9c:	e7bb      	b.n	23fec16 <_ZN9TCPClient7connectE9IPAddresstm+0x3a>
        s->sin6_len = sizeof(saddr);
 23fec9e:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
 23feca2:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
 23feca4:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
 23feca8:	f7fd fb6a 	bl	23fc380 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
 23fecac:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
 23fecae:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
 23fecb2:	1d23      	adds	r3, r4, #4
 23fecb4:	f104 0714 	add.w	r7, r4, #20
 23fecb8:	4632      	mov	r2, r6
 23fecba:	6818      	ldr	r0, [r3, #0]
 23fecbc:	6859      	ldr	r1, [r3, #4]
 23fecbe:	3308      	adds	r3, #8
 23fecc0:	c203      	stmia	r2!, {r0, r1}
 23fecc2:	42bb      	cmp	r3, r7
 23fecc4:	4616      	mov	r6, r2
 23fecc6:	d1f7      	bne.n	23fecb8 <_ZN9TCPClient7connectE9IPAddresstm+0xdc>
 23fecc8:	e7d8      	b.n	23fec7c <_ZN9TCPClient7connectE9IPAddresstm+0xa0>
	...

023feccc <_ZN9TCPClient9availableEv>:
{
 23feccc:	b530      	push	{r4, r5, lr}
 23fecce:	6942      	ldr	r2, [r0, #20]
 23fecd0:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
 23fecd2:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
 23fecd6:	b08b      	sub	sp, #44	; 0x2c
    if (d_->total && (d_->offset == d_->total)) {
 23fecd8:	b12b      	cbz	r3, 23fece6 <_ZN9TCPClient9availableEv+0x1a>
 23fecda:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 23fecde:	429a      	cmp	r2, r3
 23fece0:	d101      	bne.n	23fece6 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
 23fece2:	f7ff ff73 	bl	23febcc <_ZN9TCPClient12flush_bufferEv>
 23fece6:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
 23fece8:	6808      	ldr	r0, [r1, #0]
 23fecea:	2800      	cmp	r0, #0
 23fecec:	db18      	blt.n	23fed20 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
 23fecee:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
 23fecf2:	2d7f      	cmp	r5, #127	; 0x7f
 23fecf4:	d814      	bhi.n	23fed20 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
 23fecf6:	3104      	adds	r1, #4
 23fecf8:	2308      	movs	r3, #8
 23fecfa:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
 23fecfe:	4429      	add	r1, r5
 23fed00:	f7fd fc9c 	bl	23fc63c <sock_recv>
            if (ret > 0) {
 23fed04:	2800      	cmp	r0, #0
 23fed06:	dd13      	ble.n	23fed30 <_ZN9TCPClient9availableEv+0x64>
 23fed08:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
 23fed0a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 23fed0e:	b90a      	cbnz	r2, 23fed14 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
 23fed10:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 23fed14:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
 23fed16:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 23fed1a:	4410      	add	r0, r2
 23fed1c:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
 23fed20:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
 23fed22:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
 23fed26:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
 23fed2a:	1ac0      	subs	r0, r0, r3
 23fed2c:	b00b      	add	sp, #44	; 0x2c
 23fed2e:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
 23fed30:	f7fd fefa 	bl	23fcb28 <__errno>
 23fed34:	6803      	ldr	r3, [r0, #0]
 23fed36:	2b0b      	cmp	r3, #11
 23fed38:	d0f2      	beq.n	23fed20 <_ZN9TCPClient9availableEv+0x54>
 23fed3a:	f7fd fef5 	bl	23fcb28 <__errno>
 23fed3e:	6803      	ldr	r3, [r0, #0]
 23fed40:	2b0b      	cmp	r3, #11
 23fed42:	d0ed      	beq.n	23fed20 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
 23fed44:	2320      	movs	r3, #32
 23fed46:	2500      	movs	r5, #0
 23fed48:	e9cd 3502 	strd	r3, r5, [sp, #8]
 23fed4c:	f7fd feec 	bl	23fcb28 <__errno>
 23fed50:	6803      	ldr	r3, [r0, #0]
 23fed52:	aa02      	add	r2, sp, #8
 23fed54:	9301      	str	r3, [sp, #4]
 23fed56:	4b08      	ldr	r3, [pc, #32]	; (23fed78 <_ZN9TCPClient9availableEv+0xac>)
 23fed58:	2032      	movs	r0, #50	; 0x32
 23fed5a:	4908      	ldr	r1, [pc, #32]	; (23fed7c <_ZN9TCPClient9availableEv+0xb0>)
 23fed5c:	9300      	str	r3, [sp, #0]
 23fed5e:	462b      	mov	r3, r5
 23fed60:	f7fd fd22 	bl	23fc7a8 <log_message>
                    sock_close(d_->sock);
 23fed64:	6963      	ldr	r3, [r4, #20]
 23fed66:	6818      	ldr	r0, [r3, #0]
 23fed68:	f7fd fc4c 	bl	23fc604 <sock_close>
                    d_->sock = -1;
 23fed6c:	f04f 32ff 	mov.w	r2, #4294967295
 23fed70:	6963      	ldr	r3, [r4, #20]
 23fed72:	601a      	str	r2, [r3, #0]
 23fed74:	e7d4      	b.n	23fed20 <_ZN9TCPClient9availableEv+0x54>
 23fed76:	bf00      	nop
 23fed78:	023ffc2f 	.word	0x023ffc2f
 23fed7c:	023ffc28 	.word	0x023ffc28

023fed80 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
 23fed80:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
 23fed82:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
 23fed84:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
 23fed86:	6818      	ldr	r0, [r3, #0]
 23fed88:	2800      	cmp	r0, #0
 23fed8a:	db01      	blt.n	23fed90 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
 23fed8c:	f7fd fc3a 	bl	23fc604 <sock_close>
    d_->sock = -1;
 23fed90:	f04f 32ff 	mov.w	r2, #4294967295
 23fed94:	6963      	ldr	r3, [r4, #20]
    void clear() { memset(&address, 0, sizeof (address)); }
 23fed96:	2100      	movs	r1, #0
 23fed98:	601a      	str	r2, [r3, #0]
 23fed9a:	6960      	ldr	r0, [r4, #20]
 23fed9c:	2211      	movs	r2, #17
 23fed9e:	308c      	adds	r0, #140	; 0x8c
 23feda0:	f000 fc1f 	bl	23ff5e2 <memset>
    flush_buffer();
 23feda4:	4620      	mov	r0, r4
}
 23feda6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
 23fedaa:	f7ff bf0f 	b.w	23febcc <_ZN9TCPClient12flush_bufferEv>

023fedae <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
        : sock(sock),
          offset(0),
          total(0) {
 23fedae:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
 23fedb0:	b510      	push	{r4, lr}
 23fedb2:	4604      	mov	r4, r0
          total(0) {
 23fedb4:	6001      	str	r1, [r0, #0]
 23fedb6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 23fedba:	3088      	adds	r0, #136	; 0x88
 23fedbc:	f7ff f9ba 	bl	23fe134 <_ZN9IPAddressC1Ev>
}
 23fedc0:	4620      	mov	r0, r4
 23fedc2:	bd10      	pop	{r4, pc}

023fedc4 <_ZN9TCPClientC1Ei>:
 23fedc4:	2300      	movs	r3, #0
 23fedc6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
TCPClient::TCPClient(sock_handle_t sock)
 23fedca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fedcc:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
 23fedd0:	4a0e      	ldr	r2, [pc, #56]	; (23fee0c <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
 23fedd2:	6103      	str	r3, [r0, #16]
 23fedd4:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 23fedd6:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
 23fedd8:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 23fedda:	20ac      	movs	r0, #172	; 0xac
 23feddc:	9101      	str	r1, [sp, #4]
 23fedde:	f7fc fc2a 	bl	23fb636 <_Znwj>
	  auto __pi = ::new (__mem)
 23fede2:	1e05      	subs	r5, r0, #0
 23fede4:	f105 060c 	add.w	r6, r5, #12
 23fede8:	d008      	beq.n	23fedfc <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
 23fedea:	2301      	movs	r3, #1
 23fedec:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
 23fedf0:	4b07      	ldr	r3, [pc, #28]	; (23fee10 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 23fedf2:	4630      	mov	r0, r6
 23fedf4:	9901      	ldr	r1, [sp, #4]
 23fedf6:	602b      	str	r3, [r5, #0]
 23fedf8:	f7ff ffd9 	bl	23fedae <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
 23fedfc:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
 23fedfe:	e9c4 6505 	strd	r6, r5, [r4, #20]
 23fee02:	f7ff fee3 	bl	23febcc <_ZN9TCPClient12flush_bufferEv>
}
 23fee06:	b002      	add	sp, #8
 23fee08:	bd70      	pop	{r4, r5, r6, pc}
 23fee0a:	bf00      	nop
 23fee0c:	023ffc64 	.word	0x023ffc64
 23fee10:	023ffc48 	.word	0x023ffc48

023fee14 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
 23fee14:	b510      	push	{r4, lr}
 23fee16:	4604      	mov	r4, r0
        : TCPClient(-1) {
 23fee18:	f04f 31ff 	mov.w	r1, #4294967295
 23fee1c:	f7ff ffd2 	bl	23fedc4 <_ZN9TCPClientC1Ei>
}
 23fee20:	4620      	mov	r0, r4
 23fee22:	bd10      	pop	{r4, pc}

023fee24 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
 23fee24:	b510      	push	{r4, lr}
 23fee26:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 23fee28:	6800      	ldr	r0, [r0, #0]
 23fee2a:	2800      	cmp	r0, #0
 23fee2c:	db01      	blt.n	23fee32 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
 23fee2e:	f7fd fbe9 	bl	23fc604 <sock_close>
    }
}
 23fee32:	4620      	mov	r0, r4
 23fee34:	bd10      	pop	{r4, pc}

023fee36 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 23fee36:	300c      	adds	r0, #12
 23fee38:	f7ff bff4 	b.w	23fee24 <_ZN9TCPClient4DataD1Ev>

023fee3c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23fee3c:	2200      	movs	r2, #0
 23fee3e:	6840      	ldr	r0, [r0, #4]
 23fee40:	4611      	mov	r1, r2
 23fee42:	f7fd bd75 	b.w	23fc930 <network_ready>

023fee46 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fee46:	2200      	movs	r2, #0
 23fee48:	6840      	ldr	r0, [r0, #4]
 23fee4a:	4611      	mov	r1, r2
 23fee4c:	f7fd bda8 	b.w	23fc9a0 <network_listening>

023fee50 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fee50:	2200      	movs	r2, #0
 23fee52:	6840      	ldr	r0, [r0, #4]
 23fee54:	4611      	mov	r1, r2
 23fee56:	f7fd bdbf 	b.w	23fc9d8 <network_get_listen_timeout>

023fee5a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fee5a:	2200      	movs	r2, #0
 23fee5c:	6840      	ldr	r0, [r0, #4]
 23fee5e:	f7fd bdad 	b.w	23fc9bc <network_set_listen_timeout>

023fee62 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fee62:	2200      	movs	r2, #0
 23fee64:	6840      	ldr	r0, [r0, #4]
 23fee66:	f081 0101 	eor.w	r1, r1, #1
 23fee6a:	f7fd bd8b 	b.w	23fc984 <network_listen>

023fee6e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fee6e:	2300      	movs	r3, #0
 23fee70:	6840      	ldr	r0, [r0, #4]
 23fee72:	461a      	mov	r2, r3
 23fee74:	4619      	mov	r1, r3
 23fee76:	f7fd bd77 	b.w	23fc968 <network_off>

023fee7a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fee7a:	2300      	movs	r3, #0
 23fee7c:	6840      	ldr	r0, [r0, #4]
 23fee7e:	461a      	mov	r2, r3
 23fee80:	4619      	mov	r1, r3
 23fee82:	f7fd bd63 	b.w	23fc94c <network_on>

023fee86 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fee86:	2200      	movs	r2, #0
 23fee88:	6840      	ldr	r0, [r0, #4]
 23fee8a:	4611      	mov	r1, r2
 23fee8c:	f7fd bd34 	b.w	23fc8f8 <network_connecting>

023fee90 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fee90:	2200      	movs	r2, #0
 23fee92:	2102      	movs	r1, #2
 23fee94:	6840      	ldr	r0, [r0, #4]
 23fee96:	f7fd bd3d 	b.w	23fc914 <network_disconnect>

023fee9a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fee9a:	2300      	movs	r3, #0
 23fee9c:	6840      	ldr	r0, [r0, #4]
 23fee9e:	461a      	mov	r2, r3
 23feea0:	f7fd bd1c 	b.w	23fc8dc <network_connect>

023feea4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23feea4:	2204      	movs	r2, #4
 23feea6:	4b02      	ldr	r3, [pc, #8]	; (23feeb0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23feea8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23feeaa:	4a02      	ldr	r2, [pc, #8]	; (23feeb4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23feeac:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23feeae:	4770      	bx	lr
 23feeb0:	1007af7c 	.word	0x1007af7c
 23feeb4:	023ffcb4 	.word	0x023ffcb4

023feeb8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23feeb8:	2300      	movs	r3, #0
 23feeba:	6840      	ldr	r0, [r0, #4]
 23feebc:	461a      	mov	r2, r3
 23feebe:	f7fd bd0d 	b.w	23fc8dc <network_connect>

023feec2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23feec2:	2200      	movs	r2, #0
 23feec4:	2102      	movs	r1, #2
 23feec6:	6840      	ldr	r0, [r0, #4]
 23feec8:	f7fd bd24 	b.w	23fc914 <network_disconnect>

023feecc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23feecc:	2200      	movs	r2, #0
 23feece:	6840      	ldr	r0, [r0, #4]
 23feed0:	4611      	mov	r1, r2
 23feed2:	f7fd bd11 	b.w	23fc8f8 <network_connecting>

023feed6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23feed6:	2200      	movs	r2, #0
 23feed8:	6840      	ldr	r0, [r0, #4]
 23feeda:	4611      	mov	r1, r2
 23feedc:	f7fd bd28 	b.w	23fc930 <network_ready>

023feee0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23feee0:	2300      	movs	r3, #0
 23feee2:	6840      	ldr	r0, [r0, #4]
 23feee4:	461a      	mov	r2, r3
 23feee6:	4619      	mov	r1, r3
 23feee8:	f7fd bd30 	b.w	23fc94c <network_on>

023feeec <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23feeec:	2300      	movs	r3, #0
 23feeee:	6840      	ldr	r0, [r0, #4]
 23feef0:	461a      	mov	r2, r3
 23feef2:	4619      	mov	r1, r3
 23feef4:	f7fd bd38 	b.w	23fc968 <network_off>

023feef8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23feef8:	2100      	movs	r1, #0
 23feefa:	6840      	ldr	r0, [r0, #4]
 23feefc:	f7fd bd7a 	b.w	23fc9f4 <network_is_on>

023fef00 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23fef00:	2100      	movs	r1, #0
 23fef02:	6840      	ldr	r0, [r0, #4]
 23fef04:	f7fd bd84 	b.w	23fca10 <network_is_off>

023fef08 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23fef08:	2200      	movs	r2, #0
 23fef0a:	6840      	ldr	r0, [r0, #4]
 23fef0c:	f081 0101 	eor.w	r1, r1, #1
 23fef10:	f7fd bd38 	b.w	23fc984 <network_listen>

023fef14 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23fef14:	2200      	movs	r2, #0
 23fef16:	6840      	ldr	r0, [r0, #4]
 23fef18:	f7fd bd50 	b.w	23fc9bc <network_set_listen_timeout>

023fef1c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23fef1c:	2200      	movs	r2, #0
 23fef1e:	6840      	ldr	r0, [r0, #4]
 23fef20:	4611      	mov	r1, r2
 23fef22:	f7fd bd59 	b.w	23fc9d8 <network_get_listen_timeout>

023fef26 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23fef26:	2200      	movs	r2, #0
 23fef28:	6840      	ldr	r0, [r0, #4]
 23fef2a:	4611      	mov	r1, r2
 23fef2c:	f7fd bd38 	b.w	23fc9a0 <network_listening>

023fef30 <_ZN5spark12NetworkClass11isPreferredEv>:
    network_handle_t network = network_prefer(*this, prefer, nullptr);
    return Network.from(network);
}

bool NetworkClass::isPreferred() {
    return network_is_preferred(*this, nullptr);
 23fef30:	2100      	movs	r1, #0
 23fef32:	6840      	ldr	r0, [r0, #4]
 23fef34:	f7fd bd88 	b.w	23fca48 <network_is_preferred>

023fef38 <_ZN5spark12NetworkClass7resolveEPKcb>:
}

IPAddress NetworkClass::resolve(const char* name, bool flushCache) {
 23fef38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23fef3c:	2600      	movs	r6, #0
IPAddress NetworkClass::resolve(const char* name, bool flushCache) {
 23fef3e:	4698      	mov	r8, r3
 23fef40:	b099      	sub	sp, #100	; 0x64
 23fef42:	460d      	mov	r5, r1
 23fef44:	4614      	mov	r4, r2
 23fef46:	4607      	mov	r7, r0
    IPAddress addr;
 23fef48:	f7ff f8f4 	bl	23fe134 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
 23fef4c:	221c      	movs	r2, #28
 23fef4e:	4631      	mov	r1, r6
 23fef50:	a811      	add	r0, sp, #68	; 0x44
    struct addrinfo *ai = nullptr;
 23fef52:	9603      	str	r6, [sp, #12]
    struct addrinfo hints = {};
 23fef54:	f000 fb45 	bl	23ff5e2 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
    if (flushCache) {
 23fef58:	f1b8 0f00 	cmp.w	r8, #0
 23fef5c:	d12c      	bne.n	23fefb8 <_ZN5spark12NetworkClass7resolveEPKcb+0x80>
    hints.ai_flags = AI_ADDRCONFIG;
 23fef5e:	2340      	movs	r3, #64	; 0x40
        return iface_;
 23fef60:	6868      	ldr	r0, [r5, #4]
        hints.ai_flags |= AI_FLUSHCACHE;
 23fef62:	9310      	str	r3, [sp, #64]	; 0x40
    }
    hints.ai_family = AF_UNSPEC;
    if_t iface = nullptr;
 23fef64:	9604      	str	r6, [sp, #16]
    if ((network_interface_t)*this != NETWORK_INTERFACE_ALL) {
 23fef66:	b118      	cbz	r0, 23fef70 <_ZN5spark12NetworkClass7resolveEPKcb+0x38>
        if_get_by_index((network_interface_t)*this, &iface);
 23fef68:	a904      	add	r1, sp, #16
 23fef6a:	b2c0      	uxtb	r0, r0
 23fef6c:	f7fd f91a 	bl	23fc1a4 <if_get_by_index>
    }
    const int r = netdb_getaddrinfo_ex(name, nullptr, &hints, &ai, iface);
 23fef70:	9b04      	ldr	r3, [sp, #16]
 23fef72:	4620      	mov	r0, r4
 23fef74:	9300      	str	r3, [sp, #0]
 23fef76:	2100      	movs	r1, #0
 23fef78:	ab03      	add	r3, sp, #12
 23fef7a:	aa10      	add	r2, sp, #64	; 0x40
 23fef7c:	f7fd f8cc 	bl	23fc118 <netdb_getaddrinfo_ex>
    if (!r) {
 23fef80:	4604      	mov	r4, r0
 23fef82:	2800      	cmp	r0, #0
 23fef84:	d14d      	bne.n	23ff022 <_ZN5spark12NetworkClass7resolveEPKcb+0xea>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fef86:	4602      	mov	r2, r0
 23fef88:	2101      	movs	r1, #1
 23fef8a:	6868      	ldr	r0, [r5, #4]
 23fef8c:	f7fd fcd0 	bl	23fc930 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fef90:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fef92:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fef94:	4622      	mov	r2, r4
 23fef96:	6868      	ldr	r0, [r5, #4]
 23fef98:	f7fd fcca 	bl	23fc930 <network_ready>
        bool ok = false;
 23fef9c:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fef9e:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fefa0:	9e03      	ldr	r6, [sp, #12]
 23fefa2:	2e00      	cmp	r6, #0
 23fefa4:	d03d      	beq.n	23ff022 <_ZN5spark12NetworkClass7resolveEPKcb+0xea>
 23fefa6:	2900      	cmp	r1, #0
 23fefa8:	d13b      	bne.n	23ff022 <_ZN5spark12NetworkClass7resolveEPKcb+0xea>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23fefaa:	6873      	ldr	r3, [r6, #4]
 23fefac:	2b02      	cmp	r3, #2
 23fefae:	d005      	beq.n	23fefbc <_ZN5spark12NetworkClass7resolveEPKcb+0x84>
 23fefb0:	2b0a      	cmp	r3, #10
 23fefb2:	d013      	beq.n	23fefdc <_ZN5spark12NetworkClass7resolveEPKcb+0xa4>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fefb4:	69f6      	ldr	r6, [r6, #28]
 23fefb6:	e7f4      	b.n	23fefa2 <_ZN5spark12NetworkClass7resolveEPKcb+0x6a>
        hints.ai_flags |= AI_FLUSHCACHE;
 23fefb8:	4b1d      	ldr	r3, [pc, #116]	; (23ff030 <_ZN5spark12NetworkClass7resolveEPKcb+0xf8>)
 23fefba:	e7d1      	b.n	23fef60 <_ZN5spark12NetworkClass7resolveEPKcb+0x28>
                case AF_INET: {
                    if (!ipv4) {
 23fefbc:	f1b8 0f00 	cmp.w	r8, #0
 23fefc0:	d0f8      	beq.n	23fefb4 <_ZN5spark12NetworkClass7resolveEPKcb+0x7c>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23fefc2:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23fefc4:	a80a      	add	r0, sp, #40	; 0x28
 23fefc6:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23fefc8:	1d3c      	adds	r4, r7, #4
 23fefca:	ad0b      	add	r5, sp, #44	; 0x2c
        return *this = IPAddress(address);
 23fefcc:	f7ff f902 	bl	23fe1d4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23fefd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fefd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fefd4:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fefd6:	4641      	mov	r1, r8
 23fefd8:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23fefda:	e7eb      	b.n	23fefb4 <_ZN5spark12NetworkClass7resolveEPKcb+0x7c>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23fefdc:	f1b9 0f00 	cmp.w	r9, #0
 23fefe0:	d0e8      	beq.n	23fefb4 <_ZN5spark12NetworkClass7resolveEPKcb+0x7c>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23fefe2:	2210      	movs	r2, #16
 23fefe4:	a805      	add	r0, sp, #20
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23fefe6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23fefe8:	f000 fafb 	bl	23ff5e2 <memset>
                    a.v = 6;
 23fefec:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fefee:	ad05      	add	r5, sp, #20
                    a.v = 6;
 23feff0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23feff4:	f104 0308 	add.w	r3, r4, #8
 23feff8:	3418      	adds	r4, #24
 23feffa:	462a      	mov	r2, r5
 23feffc:	6818      	ldr	r0, [r3, #0]
 23feffe:	6859      	ldr	r1, [r3, #4]
 23ff000:	3308      	adds	r3, #8
 23ff002:	c203      	stmia	r2!, {r0, r1}
 23ff004:	42a3      	cmp	r3, r4
 23ff006:	4615      	mov	r5, r2
 23ff008:	d1f7      	bne.n	23feffa <_ZN5spark12NetworkClass7resolveEPKcb+0xc2>
                    addr = IPAddress(a);
 23ff00a:	a905      	add	r1, sp, #20
 23ff00c:	a80a      	add	r0, sp, #40	; 0x28
class IPAddress : public Printable {
 23ff00e:	1d3c      	adds	r4, r7, #4
 23ff010:	ad0b      	add	r5, sp, #44	; 0x2c
 23ff012:	f7ff f89d 	bl	23fe150 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23ff016:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23ff018:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23ff01a:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23ff01c:	4649      	mov	r1, r9
 23ff01e:	7023      	strb	r3, [r4, #0]
                    break;
 23ff020:	e7c8      	b.n	23fefb4 <_ZN5spark12NetworkClass7resolveEPKcb+0x7c>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23ff022:	9803      	ldr	r0, [sp, #12]
 23ff024:	f7fd f85c 	bl	23fc0e0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23ff028:	4638      	mov	r0, r7
 23ff02a:	b019      	add	sp, #100	; 0x64
 23ff02c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23ff030:	40000040 	.word	0x40000040

023ff034 <_ZN5spark12NetworkClass4fromEm>:
    switch (nif) {
 23ff034:	3803      	subs	r0, #3
 23ff036:	2802      	cmp	r0, #2
 23ff038:	bf9a      	itte	ls
 23ff03a:	4b02      	ldrls	r3, [pc, #8]	; (23ff044 <_ZN5spark12NetworkClass4fromEm+0x10>)
 23ff03c:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
NetworkClass& NetworkClass::from(network_interface_t nif) {
 23ff040:	4801      	ldrhi	r0, [pc, #4]	; (23ff048 <_ZN5spark12NetworkClass4fromEm+0x14>)
}
 23ff042:	4770      	bx	lr
 23ff044:	023ffcf0 	.word	0x023ffcf0
 23ff048:	1007af84 	.word	0x1007af84

023ff04c <_ZN5spark12NetworkClass6preferEb>:
NetworkClass& NetworkClass::prefer(bool prefer) {
 23ff04c:	b508      	push	{r3, lr}
    network_handle_t network = network_prefer(*this, prefer, nullptr);
 23ff04e:	2200      	movs	r2, #0
 23ff050:	6840      	ldr	r0, [r0, #4]
 23ff052:	f7fd fceb 	bl	23fca2c <network_prefer>
}
 23ff056:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return Network.from(network);
 23ff05a:	f7ff bfeb 	b.w	23ff034 <_ZN5spark12NetworkClass4fromEm>
	...

023ff060 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
            : iface_(iface) {
 23ff060:	4b02      	ldr	r3, [pc, #8]	; (23ff06c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23ff062:	4a03      	ldr	r2, [pc, #12]	; (23ff070 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23ff064:	601a      	str	r2, [r3, #0]
 23ff066:	2200      	movs	r2, #0
 23ff068:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23ff06a:	4770      	bx	lr
 23ff06c:	1007af84 	.word	0x1007af84
 23ff070:	023ffd04 	.word	0x023ffd04

023ff074 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23ff074:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23ff076:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23ff078:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23ff07a:	d902      	bls.n	23ff082 <pinAvailable+0xe>
    return false;
 23ff07c:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23ff07e:	b003      	add	sp, #12
 23ff080:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23ff082:	f1a0 030f 	sub.w	r3, r0, #15
 23ff086:	2b02      	cmp	r3, #2
 23ff088:	d90b      	bls.n	23ff0a2 <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23ff08a:	2801      	cmp	r0, #1
 23ff08c:	d821      	bhi.n	23ff0d2 <pinAvailable+0x5e>
 23ff08e:	f000 f935 	bl	23ff2fc <_Z19__fetch_global_Wirev>
 23ff092:	2100      	movs	r1, #0
 23ff094:	7c00      	ldrb	r0, [r0, #16]
 23ff096:	f7fd fa7d 	bl	23fc594 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ff09a:	f080 0001 	eor.w	r0, r0, #1
 23ff09e:	b2c0      	uxtb	r0, r0
 23ff0a0:	e7ed      	b.n	23ff07e <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23ff0a2:	4d11      	ldr	r5, [pc, #68]	; (23ff0e8 <pinAvailable+0x74>)
 23ff0a4:	e8d5 1f8f 	ldab	r1, [r5]
 23ff0a8:	f011 0101 	ands.w	r1, r1, #1
 23ff0ac:	d10b      	bne.n	23ff0c6 <pinAvailable+0x52>
 23ff0ae:	4628      	mov	r0, r5
 23ff0b0:	9101      	str	r1, [sp, #4]
 23ff0b2:	f7fd fd63 	bl	23fcb7c <__cxa_guard_acquire>
 23ff0b6:	9901      	ldr	r1, [sp, #4]
 23ff0b8:	b128      	cbz	r0, 23ff0c6 <pinAvailable+0x52>
 23ff0ba:	480c      	ldr	r0, [pc, #48]	; (23ff0ec <pinAvailable+0x78>)
 23ff0bc:	f7fd fde0 	bl	23fcc80 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23ff0c0:	4628      	mov	r0, r5
 23ff0c2:	f7fd fd69 	bl	23fcb98 <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23ff0c6:	4b09      	ldr	r3, [pc, #36]	; (23ff0ec <pinAvailable+0x78>)
 23ff0c8:	7818      	ldrb	r0, [r3, #0]
 23ff0ca:	f7fd faef 	bl	23fc6ac <hal_spi_is_enabled>
 23ff0ce:	2800      	cmp	r0, #0
 23ff0d0:	d1d4      	bne.n	23ff07c <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ff0d2:	3c08      	subs	r4, #8
 23ff0d4:	2c01      	cmp	r4, #1
 23ff0d6:	d805      	bhi.n	23ff0e4 <pinAvailable+0x70>
 23ff0d8:	f000 f864 	bl	23ff1a4 <_Z22__fetch_global_Serial1v>
 23ff0dc:	7c00      	ldrb	r0, [r0, #16]
 23ff0de:	f7fd f9b1 	bl	23fc444 <hal_usart_is_enabled>
 23ff0e2:	e7da      	b.n	23ff09a <pinAvailable+0x26>
  return true; // 'pin' is available
 23ff0e4:	2001      	movs	r0, #1
 23ff0e6:	e7ca      	b.n	23ff07e <pinAvailable+0xa>
 23ff0e8:	1007af8c 	.word	0x1007af8c
 23ff0ec:	1007af90 	.word	0x1007af90

023ff0f0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23ff0f0:	281b      	cmp	r0, #27
{
 23ff0f2:	b538      	push	{r3, r4, r5, lr}
 23ff0f4:	4604      	mov	r4, r0
 23ff0f6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23ff0f8:	d80a      	bhi.n	23ff110 <pinMode+0x20>
 23ff0fa:	29ff      	cmp	r1, #255	; 0xff
 23ff0fc:	d008      	beq.n	23ff110 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23ff0fe:	f7ff ffb9 	bl	23ff074 <pinAvailable>
 23ff102:	b128      	cbz	r0, 23ff110 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23ff104:	4629      	mov	r1, r5
 23ff106:	4620      	mov	r0, r4
}
 23ff108:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23ff10c:	f7fd b812 	b.w	23fc134 <hal_gpio_mode>
}
 23ff110:	bd38      	pop	{r3, r4, r5, pc}

023ff112 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
 23ff112:	b538      	push	{r3, r4, r5, lr}
 23ff114:	4604      	mov	r4, r0
 23ff116:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
 23ff118:	f7fd f81a 	bl	23fc150 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 23ff11c:	28ff      	cmp	r0, #255	; 0xff
 23ff11e:	d010      	beq.n	23ff142 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 23ff120:	2806      	cmp	r0, #6
 23ff122:	d804      	bhi.n	23ff12e <digitalWrite+0x1c>
 23ff124:	234d      	movs	r3, #77	; 0x4d
 23ff126:	fa23 f000 	lsr.w	r0, r3, r0
 23ff12a:	07c3      	lsls	r3, r0, #31
 23ff12c:	d409      	bmi.n	23ff142 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 23ff12e:	4620      	mov	r0, r4
 23ff130:	f7ff ffa0 	bl	23ff074 <pinAvailable>
 23ff134:	b128      	cbz	r0, 23ff142 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
 23ff136:	4629      	mov	r1, r5
 23ff138:	4620      	mov	r0, r4
}
 23ff13a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
 23ff13e:	f7fd b815 	b.w	23fc16c <hal_gpio_write>
}
 23ff142:	bd38      	pop	{r3, r4, r5, pc}

023ff144 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff144:	4770      	bx	lr
	...

023ff148 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23ff148:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23ff14a:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23ff14c:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23ff14e:	462a      	mov	r2, r5
 23ff150:	2100      	movs	r1, #0
 23ff152:	f000 fa46 	bl	23ff5e2 <memset>
 23ff156:	8025      	strh	r5, [r4, #0]
 23ff158:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff15a:	4907      	ldr	r1, [pc, #28]	; (23ff178 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23ff15c:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23ff15e:	8125      	strh	r5, [r4, #8]
 23ff160:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff162:	f000 f8f1 	bl	23ff348 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff166:	4904      	ldr	r1, [pc, #16]	; (23ff178 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23ff168:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff16a:	4628      	mov	r0, r5
 23ff16c:	f000 f8ec 	bl	23ff348 <_ZnajRKSt9nothrow_t>
    };
 23ff170:	60e0      	str	r0, [r4, #12]
}
 23ff172:	4620      	mov	r0, r4
 23ff174:	bd38      	pop	{r3, r4, r5, pc}
 23ff176:	bf00      	nop
 23ff178:	023ffd40 	.word	0x023ffd40

023ff17c <__tcf_2>:
 23ff17c:	4770      	bx	lr

023ff17e <__tcf_1>:
 23ff17e:	4770      	bx	lr

023ff180 <_Z20acquireSerial1Bufferv>:
{
 23ff180:	b510      	push	{r4, lr}
 23ff182:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23ff184:	f7ff ffe0 	bl	23ff148 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23ff188:	4620      	mov	r0, r4
 23ff18a:	bd10      	pop	{r4, pc}

023ff18c <_Z20acquireSerial2Bufferv>:
 23ff18c:	b510      	push	{r4, lr}
 23ff18e:	4604      	mov	r4, r0
 23ff190:	f7ff ffda 	bl	23ff148 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ff194:	4620      	mov	r0, r4
 23ff196:	bd10      	pop	{r4, pc}

023ff198 <_Z20acquireSerial3Bufferv>:
 23ff198:	b510      	push	{r4, lr}
 23ff19a:	4604      	mov	r4, r0
 23ff19c:	f7ff ffd4 	bl	23ff148 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ff1a0:	4620      	mov	r0, r4
 23ff1a2:	bd10      	pop	{r4, pc}

023ff1a4 <_Z22__fetch_global_Serial1v>:
{
 23ff1a4:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff1a6:	4d0e      	ldr	r5, [pc, #56]	; (23ff1e0 <_Z22__fetch_global_Serial1v+0x3c>)
{
 23ff1a8:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff1aa:	e8d5 1f8f 	ldab	r1, [r5]
 23ff1ae:	f011 0401 	ands.w	r4, r1, #1
 23ff1b2:	d111      	bne.n	23ff1d8 <_Z22__fetch_global_Serial1v+0x34>
 23ff1b4:	4628      	mov	r0, r5
 23ff1b6:	f7fd fce1 	bl	23fcb7c <__cxa_guard_acquire>
 23ff1ba:	b168      	cbz	r0, 23ff1d8 <_Z22__fetch_global_Serial1v+0x34>
 23ff1bc:	a801      	add	r0, sp, #4
 23ff1be:	f7ff ffdf 	bl	23ff180 <_Z20acquireSerial1Bufferv>
 23ff1c2:	4621      	mov	r1, r4
 23ff1c4:	aa01      	add	r2, sp, #4
 23ff1c6:	4807      	ldr	r0, [pc, #28]	; (23ff1e4 <_Z22__fetch_global_Serial1v+0x40>)
 23ff1c8:	f7ff fab0 	bl	23fe72c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff1cc:	4628      	mov	r0, r5
 23ff1ce:	f7fd fce3 	bl	23fcb98 <__cxa_guard_release>
 23ff1d2:	4805      	ldr	r0, [pc, #20]	; (23ff1e8 <_Z22__fetch_global_Serial1v+0x44>)
 23ff1d4:	f000 f9d0 	bl	23ff578 <atexit>
    return serial1;
}
 23ff1d8:	4802      	ldr	r0, [pc, #8]	; (23ff1e4 <_Z22__fetch_global_Serial1v+0x40>)
 23ff1da:	b007      	add	sp, #28
 23ff1dc:	bd30      	pop	{r4, r5, pc}
 23ff1de:	bf00      	nop
 23ff1e0:	1007af98 	.word	0x1007af98
 23ff1e4:	1007afa4 	.word	0x1007afa4
 23ff1e8:	023ff145 	.word	0x023ff145

023ff1ec <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23ff1ec:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ff1ee:	4c0d      	ldr	r4, [pc, #52]	; (23ff224 <_Z22__fetch_global_Serial2v+0x38>)
{
 23ff1f0:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ff1f2:	e8d4 3f8f 	ldab	r3, [r4]
 23ff1f6:	07db      	lsls	r3, r3, #31
 23ff1f8:	d411      	bmi.n	23ff21e <_Z22__fetch_global_Serial2v+0x32>
 23ff1fa:	4620      	mov	r0, r4
 23ff1fc:	f7fd fcbe 	bl	23fcb7c <__cxa_guard_acquire>
 23ff200:	b168      	cbz	r0, 23ff21e <_Z22__fetch_global_Serial2v+0x32>
 23ff202:	a801      	add	r0, sp, #4
 23ff204:	f7ff ffc2 	bl	23ff18c <_Z20acquireSerial2Bufferv>
 23ff208:	2101      	movs	r1, #1
 23ff20a:	aa01      	add	r2, sp, #4
 23ff20c:	4806      	ldr	r0, [pc, #24]	; (23ff228 <_Z22__fetch_global_Serial2v+0x3c>)
 23ff20e:	f7ff fa8d 	bl	23fe72c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff212:	4620      	mov	r0, r4
 23ff214:	f7fd fcc0 	bl	23fcb98 <__cxa_guard_release>
 23ff218:	4804      	ldr	r0, [pc, #16]	; (23ff22c <_Z22__fetch_global_Serial2v+0x40>)
 23ff21a:	f000 f9ad 	bl	23ff578 <atexit>
	return serial2;
}
 23ff21e:	4802      	ldr	r0, [pc, #8]	; (23ff228 <_Z22__fetch_global_Serial2v+0x3c>)
 23ff220:	b006      	add	sp, #24
 23ff222:	bd10      	pop	{r4, pc}
 23ff224:	1007af9c 	.word	0x1007af9c
 23ff228:	1007afb8 	.word	0x1007afb8
 23ff22c:	023ff17f 	.word	0x023ff17f

023ff230 <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23ff230:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23ff232:	f7ff ffdb 	bl	23ff1ec <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23ff236:	4b07      	ldr	r3, [pc, #28]	; (23ff254 <_Z15serialEventRun2v+0x24>)
 23ff238:	4604      	mov	r4, r0
 23ff23a:	b153      	cbz	r3, 23ff252 <_Z15serialEventRun2v+0x22>
 23ff23c:	f7ff fa94 	bl	23fe768 <_ZN11USARTSerial9isEnabledEv>
 23ff240:	b138      	cbz	r0, 23ff252 <_Z15serialEventRun2v+0x22>
 23ff242:	6823      	ldr	r3, [r4, #0]
 23ff244:	4620      	mov	r0, r4
 23ff246:	691b      	ldr	r3, [r3, #16]
 23ff248:	4798      	blx	r3
 23ff24a:	2800      	cmp	r0, #0
 23ff24c:	dd01      	ble.n	23ff252 <_Z15serialEventRun2v+0x22>
        handler();
 23ff24e:	e000      	b.n	23ff252 <_Z15serialEventRun2v+0x22>
 23ff250:	bf00      	nop
}
 23ff252:	bd10      	pop	{r4, pc}
 23ff254:	00000000 	.word	0x00000000

023ff258 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23ff258:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ff25a:	4c0d      	ldr	r4, [pc, #52]	; (23ff290 <_Z22__fetch_global_Serial3v+0x38>)
{
 23ff25c:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ff25e:	e8d4 3f8f 	ldab	r3, [r4]
 23ff262:	07db      	lsls	r3, r3, #31
 23ff264:	d411      	bmi.n	23ff28a <_Z22__fetch_global_Serial3v+0x32>
 23ff266:	4620      	mov	r0, r4
 23ff268:	f7fd fc88 	bl	23fcb7c <__cxa_guard_acquire>
 23ff26c:	b168      	cbz	r0, 23ff28a <_Z22__fetch_global_Serial3v+0x32>
 23ff26e:	a801      	add	r0, sp, #4
 23ff270:	f7ff ff92 	bl	23ff198 <_Z20acquireSerial3Bufferv>
 23ff274:	2102      	movs	r1, #2
 23ff276:	aa01      	add	r2, sp, #4
 23ff278:	4806      	ldr	r0, [pc, #24]	; (23ff294 <_Z22__fetch_global_Serial3v+0x3c>)
 23ff27a:	f7ff fa57 	bl	23fe72c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff27e:	4620      	mov	r0, r4
 23ff280:	f7fd fc8a 	bl	23fcb98 <__cxa_guard_release>
 23ff284:	4804      	ldr	r0, [pc, #16]	; (23ff298 <_Z22__fetch_global_Serial3v+0x40>)
 23ff286:	f000 f977 	bl	23ff578 <atexit>
	return serial3;
}
 23ff28a:	4802      	ldr	r0, [pc, #8]	; (23ff294 <_Z22__fetch_global_Serial3v+0x3c>)
 23ff28c:	b006      	add	sp, #24
 23ff28e:	bd10      	pop	{r4, pc}
 23ff290:	1007afa0 	.word	0x1007afa0
 23ff294:	1007afcc 	.word	0x1007afcc
 23ff298:	023ff17d 	.word	0x023ff17d

023ff29c <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23ff29c:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23ff29e:	f7ff ffdb 	bl	23ff258 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23ff2a2:	4b07      	ldr	r3, [pc, #28]	; (23ff2c0 <_Z15serialEventRun3v+0x24>)
 23ff2a4:	4604      	mov	r4, r0
 23ff2a6:	b153      	cbz	r3, 23ff2be <_Z15serialEventRun3v+0x22>
 23ff2a8:	f7ff fa5e 	bl	23fe768 <_ZN11USARTSerial9isEnabledEv>
 23ff2ac:	b138      	cbz	r0, 23ff2be <_Z15serialEventRun3v+0x22>
 23ff2ae:	6823      	ldr	r3, [r4, #0]
 23ff2b0:	4620      	mov	r0, r4
 23ff2b2:	691b      	ldr	r3, [r3, #16]
 23ff2b4:	4798      	blx	r3
 23ff2b6:	2800      	cmp	r0, #0
 23ff2b8:	dd01      	ble.n	23ff2be <_Z15serialEventRun3v+0x22>
        handler();
 23ff2ba:	e000      	b.n	23ff2be <_Z15serialEventRun3v+0x22>
 23ff2bc:	bf00      	nop
}
 23ff2be:	bd10      	pop	{r4, pc}
 23ff2c0:	00000000 	.word	0x00000000

023ff2c4 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff2c4:	4770      	bx	lr
	...

023ff2c8 <_Z17acquireWireBufferv>:
{
 23ff2c8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23ff2ca:	4b0a      	ldr	r3, [pc, #40]	; (23ff2f4 <_Z17acquireWireBufferv+0x2c>)
{
 23ff2cc:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23ff2ce:	6003      	str	r3, [r0, #0]
 23ff2d0:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff2d2:	4909      	ldr	r1, [pc, #36]	; (23ff2f8 <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23ff2d4:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff2d6:	2020      	movs	r0, #32
 23ff2d8:	f000 f836 	bl	23ff348 <_ZnajRKSt9nothrow_t>
	};
 23ff2dc:	2520      	movs	r5, #32
 23ff2de:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff2e0:	4905      	ldr	r1, [pc, #20]	; (23ff2f8 <_Z17acquireWireBufferv+0x30>)
 23ff2e2:	4628      	mov	r0, r5
	};
 23ff2e4:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff2e6:	f000 f82f 	bl	23ff348 <_ZnajRKSt9nothrow_t>
	};
 23ff2ea:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23ff2ee:	4620      	mov	r0, r4
 23ff2f0:	bd38      	pop	{r3, r4, r5, pc}
 23ff2f2:	bf00      	nop
 23ff2f4:	00010018 	.word	0x00010018
 23ff2f8:	023ffd40 	.word	0x023ffd40

023ff2fc <_Z19__fetch_global_Wirev>:
{
 23ff2fc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff2fe:	4d0e      	ldr	r5, [pc, #56]	; (23ff338 <_Z19__fetch_global_Wirev+0x3c>)
{
 23ff300:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff302:	e8d5 1f8f 	ldab	r1, [r5]
 23ff306:	f011 0401 	ands.w	r4, r1, #1
 23ff30a:	d111      	bne.n	23ff330 <_Z19__fetch_global_Wirev+0x34>
 23ff30c:	4628      	mov	r0, r5
 23ff30e:	f7fd fc35 	bl	23fcb7c <__cxa_guard_acquire>
 23ff312:	b168      	cbz	r0, 23ff330 <_Z19__fetch_global_Wirev+0x34>
 23ff314:	4668      	mov	r0, sp
 23ff316:	f7ff ffd7 	bl	23ff2c8 <_Z17acquireWireBufferv>
 23ff31a:	466a      	mov	r2, sp
 23ff31c:	4621      	mov	r1, r4
 23ff31e:	4807      	ldr	r0, [pc, #28]	; (23ff33c <_Z19__fetch_global_Wirev+0x40>)
 23ff320:	f7ff fa62 	bl	23fe7e8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23ff324:	4628      	mov	r0, r5
 23ff326:	f7fd fc37 	bl	23fcb98 <__cxa_guard_release>
 23ff32a:	4805      	ldr	r0, [pc, #20]	; (23ff340 <_Z19__fetch_global_Wirev+0x44>)
 23ff32c:	f000 f924 	bl	23ff578 <atexit>
	return wire;
}
 23ff330:	4802      	ldr	r0, [pc, #8]	; (23ff33c <_Z19__fetch_global_Wirev+0x40>)
 23ff332:	b007      	add	sp, #28
 23ff334:	bd30      	pop	{r4, r5, pc}
 23ff336:	bf00      	nop
 23ff338:	1007afe4 	.word	0x1007afe4
 23ff33c:	1007afe8 	.word	0x1007afe8
 23ff340:	023ff2c5 	.word	0x023ff2c5

023ff344 <_ZnwjRKSt9nothrow_t>:
 23ff344:	f7fc b977 	b.w	23fb636 <_Znwj>

023ff348 <_ZnajRKSt9nothrow_t>:
 23ff348:	f7fc b977 	b.w	23fb63a <_Znaj>

023ff34c <_ZSt25__throw_bad_function_callv>:
 23ff34c:	b508      	push	{r3, lr}
 23ff34e:	f7fd fbdd 	bl	23fcb0c <abort>
	...

023ff354 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 23ff354:	4901      	ldr	r1, [pc, #4]	; (23ff35c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 23ff356:	f000 b8f9 	b.w	23ff54c <_ZNKSt9type_infoeqERKS_>
 23ff35a:	bf00      	nop
 23ff35c:	023ffd5c 	.word	0x023ffd5c

023ff360 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 23ff360:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 23ff362:	2400      	movs	r4, #0
 23ff364:	2310      	movs	r3, #16
 23ff366:	4615      	mov	r5, r2
 23ff368:	6812      	ldr	r2, [r2, #0]
 23ff36a:	e9cd 3402 	strd	r3, r4, [sp, #8]
 23ff36e:	6803      	ldr	r3, [r0, #0]
 23ff370:	e9cd 4400 	strd	r4, r4, [sp]
 23ff374:	699e      	ldr	r6, [r3, #24]
 23ff376:	466b      	mov	r3, sp
 23ff378:	47b0      	blx	r6
 23ff37a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23ff37e:	f003 0306 	and.w	r3, r3, #6
 23ff382:	2b06      	cmp	r3, #6
 23ff384:	bf05      	ittet	eq
 23ff386:	9b00      	ldreq	r3, [sp, #0]
 23ff388:	2001      	moveq	r0, #1
 23ff38a:	4620      	movne	r0, r4
 23ff38c:	602b      	streq	r3, [r5, #0]
 23ff38e:	b004      	add	sp, #16
 23ff390:	bd70      	pop	{r4, r5, r6, pc}

023ff392 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 23ff392:	9800      	ldr	r0, [sp, #0]
 23ff394:	4290      	cmp	r0, r2
 23ff396:	bf14      	ite	ne
 23ff398:	2001      	movne	r0, #1
 23ff39a:	2006      	moveq	r0, #6
 23ff39c:	4770      	bx	lr
	...

023ff3a0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 23ff3a0:	4b03      	ldr	r3, [pc, #12]	; (23ff3b0 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 23ff3a2:	b510      	push	{r4, lr}
 23ff3a4:	4604      	mov	r4, r0
 23ff3a6:	6003      	str	r3, [r0, #0]
 23ff3a8:	f000 f8cd 	bl	23ff546 <_ZNSt9type_infoD1Ev>
 23ff3ac:	4620      	mov	r0, r4
 23ff3ae:	bd10      	pop	{r4, pc}
 23ff3b0:	023ffd9c 	.word	0x023ffd9c

023ff3b4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 23ff3b4:	b510      	push	{r4, lr}
 23ff3b6:	4604      	mov	r4, r0
 23ff3b8:	f7ff fff2 	bl	23ff3a0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 23ff3bc:	2108      	movs	r1, #8
 23ff3be:	4620      	mov	r0, r4
 23ff3c0:	f7fc f93d 	bl	23fb63e <_ZdlPvj>
 23ff3c4:	4620      	mov	r0, r4
 23ff3c6:	bd10      	pop	{r4, pc}

023ff3c8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 23ff3c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23ff3cc:	f8dd 8018 	ldr.w	r8, [sp, #24]
 23ff3d0:	461f      	mov	r7, r3
 23ff3d2:	4606      	mov	r6, r0
 23ff3d4:	4615      	mov	r5, r2
 23ff3d6:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 23ff3da:	4598      	cmp	r8, r3
 23ff3dc:	d107      	bne.n	23ff3ee <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 23ff3de:	9907      	ldr	r1, [sp, #28]
 23ff3e0:	f000 f8b4 	bl	23ff54c <_ZNKSt9type_infoeqERKS_>
 23ff3e4:	b118      	cbz	r0, 23ff3ee <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 23ff3e6:	7165      	strb	r5, [r4, #5]
 23ff3e8:	2000      	movs	r0, #0
 23ff3ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23ff3ee:	4639      	mov	r1, r7
 23ff3f0:	4630      	mov	r0, r6
 23ff3f2:	f000 f8ab 	bl	23ff54c <_ZNKSt9type_infoeqERKS_>
 23ff3f6:	2800      	cmp	r0, #0
 23ff3f8:	d0f6      	beq.n	23ff3e8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 23ff3fa:	2301      	movs	r3, #1
 23ff3fc:	f8c4 8000 	str.w	r8, [r4]
 23ff400:	7125      	strb	r5, [r4, #4]
 23ff402:	71a3      	strb	r3, [r4, #6]
 23ff404:	e7f0      	b.n	23ff3e8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

023ff406 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 23ff406:	b538      	push	{r3, r4, r5, lr}
 23ff408:	4615      	mov	r5, r2
 23ff40a:	461c      	mov	r4, r3
 23ff40c:	f000 f89e 	bl	23ff54c <_ZNKSt9type_infoeqERKS_>
 23ff410:	b120      	cbz	r0, 23ff41c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 23ff412:	2308      	movs	r3, #8
 23ff414:	6025      	str	r5, [r4, #0]
 23ff416:	60e3      	str	r3, [r4, #12]
 23ff418:	2306      	movs	r3, #6
 23ff41a:	7123      	strb	r3, [r4, #4]
 23ff41c:	bd38      	pop	{r3, r4, r5, pc}

023ff41e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 23ff41e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23ff420:	4605      	mov	r5, r0
 23ff422:	460c      	mov	r4, r1
 23ff424:	461e      	mov	r6, r3
 23ff426:	9201      	str	r2, [sp, #4]
 23ff428:	f000 f890 	bl	23ff54c <_ZNKSt9type_infoeqERKS_>
 23ff42c:	b950      	cbnz	r0, 23ff444 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 23ff42e:	2e03      	cmp	r6, #3
 23ff430:	d808      	bhi.n	23ff444 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 23ff432:	6823      	ldr	r3, [r4, #0]
 23ff434:	4629      	mov	r1, r5
 23ff436:	9a01      	ldr	r2, [sp, #4]
 23ff438:	4620      	mov	r0, r4
 23ff43a:	695b      	ldr	r3, [r3, #20]
 23ff43c:	b002      	add	sp, #8
 23ff43e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 23ff442:	4718      	bx	r3
 23ff444:	b002      	add	sp, #8
 23ff446:	bd70      	pop	{r4, r5, r6, pc}

023ff448 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 23ff448:	4b03      	ldr	r3, [pc, #12]	; (23ff458 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 23ff44a:	b510      	push	{r4, lr}
 23ff44c:	4604      	mov	r4, r0
 23ff44e:	6003      	str	r3, [r0, #0]
 23ff450:	f7ff ffa6 	bl	23ff3a0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 23ff454:	4620      	mov	r0, r4
 23ff456:	bd10      	pop	{r4, pc}
 23ff458:	023ffdfc 	.word	0x023ffdfc

023ff45c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 23ff45c:	b510      	push	{r4, lr}
 23ff45e:	4604      	mov	r4, r0
 23ff460:	f7ff fff2 	bl	23ff448 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 23ff464:	210c      	movs	r1, #12
 23ff466:	4620      	mov	r0, r4
 23ff468:	f7fc f8e9 	bl	23fb63e <_ZdlPvj>
 23ff46c:	4620      	mov	r0, r4
 23ff46e:	bd10      	pop	{r4, pc}

023ff470 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 23ff470:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23ff472:	9f08      	ldr	r7, [sp, #32]
 23ff474:	4605      	mov	r5, r0
 23ff476:	460e      	mov	r6, r1
 23ff478:	4614      	mov	r4, r2
 23ff47a:	4297      	cmp	r7, r2
 23ff47c:	d00a      	beq.n	23ff494 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 23ff47e:	68a8      	ldr	r0, [r5, #8]
 23ff480:	4631      	mov	r1, r6
 23ff482:	6802      	ldr	r2, [r0, #0]
 23ff484:	9708      	str	r7, [sp, #32]
 23ff486:	6a15      	ldr	r5, [r2, #32]
 23ff488:	4622      	mov	r2, r4
 23ff48a:	46ac      	mov	ip, r5
 23ff48c:	b003      	add	sp, #12
 23ff48e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23ff492:	4760      	bx	ip
 23ff494:	4619      	mov	r1, r3
 23ff496:	9301      	str	r3, [sp, #4]
 23ff498:	f000 f858 	bl	23ff54c <_ZNKSt9type_infoeqERKS_>
 23ff49c:	9b01      	ldr	r3, [sp, #4]
 23ff49e:	2800      	cmp	r0, #0
 23ff4a0:	d0ed      	beq.n	23ff47e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 23ff4a2:	2006      	movs	r0, #6
 23ff4a4:	b003      	add	sp, #12
 23ff4a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

023ff4a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 23ff4a8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ff4ac:	460d      	mov	r5, r1
 23ff4ae:	4619      	mov	r1, r3
 23ff4b0:	4681      	mov	r9, r0
 23ff4b2:	4617      	mov	r7, r2
 23ff4b4:	4698      	mov	r8, r3
 23ff4b6:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 23ff4ba:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 23ff4be:	f000 f845 	bl	23ff54c <_ZNKSt9type_infoeqERKS_>
 23ff4c2:	b190      	cbz	r0, 23ff4ea <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 23ff4c4:	2d00      	cmp	r5, #0
 23ff4c6:	6034      	str	r4, [r6, #0]
 23ff4c8:	7137      	strb	r7, [r6, #4]
 23ff4ca:	db09      	blt.n	23ff4e0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 23ff4cc:	1961      	adds	r1, r4, r5
 23ff4ce:	458a      	cmp	sl, r1
 23ff4d0:	bf0c      	ite	eq
 23ff4d2:	2106      	moveq	r1, #6
 23ff4d4:	2101      	movne	r1, #1
 23ff4d6:	71b1      	strb	r1, [r6, #6]
 23ff4d8:	2000      	movs	r0, #0
 23ff4da:	b001      	add	sp, #4
 23ff4dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23ff4e0:	3502      	adds	r5, #2
 23ff4e2:	d1f9      	bne.n	23ff4d8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23ff4e4:	2301      	movs	r3, #1
 23ff4e6:	71b3      	strb	r3, [r6, #6]
 23ff4e8:	e7f6      	b.n	23ff4d8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23ff4ea:	4554      	cmp	r4, sl
 23ff4ec:	d106      	bne.n	23ff4fc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 23ff4ee:	4659      	mov	r1, fp
 23ff4f0:	4648      	mov	r0, r9
 23ff4f2:	f000 f82b 	bl	23ff54c <_ZNKSt9type_infoeqERKS_>
 23ff4f6:	b108      	cbz	r0, 23ff4fc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 23ff4f8:	7177      	strb	r7, [r6, #5]
 23ff4fa:	e7ed      	b.n	23ff4d8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23ff4fc:	f8d9 0008 	ldr.w	r0, [r9, #8]
 23ff500:	463a      	mov	r2, r7
 23ff502:	4629      	mov	r1, r5
 23ff504:	6803      	ldr	r3, [r0, #0]
 23ff506:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 23ff50a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 23ff50e:	69dc      	ldr	r4, [r3, #28]
 23ff510:	4643      	mov	r3, r8
 23ff512:	46a4      	mov	ip, r4
 23ff514:	b001      	add	sp, #4
 23ff516:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ff51a:	4760      	bx	ip

023ff51c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 23ff51c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23ff520:	4607      	mov	r7, r0
 23ff522:	460c      	mov	r4, r1
 23ff524:	4615      	mov	r5, r2
 23ff526:	461e      	mov	r6, r3
 23ff528:	f7ff ff6d 	bl	23ff406 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 23ff52c:	b948      	cbnz	r0, 23ff542 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 23ff52e:	68b8      	ldr	r0, [r7, #8]
 23ff530:	462a      	mov	r2, r5
 23ff532:	4621      	mov	r1, r4
 23ff534:	6803      	ldr	r3, [r0, #0]
 23ff536:	699f      	ldr	r7, [r3, #24]
 23ff538:	4633      	mov	r3, r6
 23ff53a:	46bc      	mov	ip, r7
 23ff53c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 23ff540:	4760      	bx	ip
 23ff542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023ff546 <_ZNSt9type_infoD1Ev>:
 23ff546:	4770      	bx	lr

023ff548 <_ZNKSt9type_info14__is_pointer_pEv>:
 23ff548:	2000      	movs	r0, #0
 23ff54a:	4770      	bx	lr

023ff54c <_ZNKSt9type_infoeqERKS_>:
 23ff54c:	4281      	cmp	r1, r0
 23ff54e:	b508      	push	{r3, lr}
 23ff550:	d00e      	beq.n	23ff570 <_ZNKSt9type_infoeqERKS_+0x24>
 23ff552:	6840      	ldr	r0, [r0, #4]
 23ff554:	7803      	ldrb	r3, [r0, #0]
 23ff556:	2b2a      	cmp	r3, #42	; 0x2a
 23ff558:	d00c      	beq.n	23ff574 <_ZNKSt9type_infoeqERKS_+0x28>
 23ff55a:	6849      	ldr	r1, [r1, #4]
 23ff55c:	780b      	ldrb	r3, [r1, #0]
 23ff55e:	2b2a      	cmp	r3, #42	; 0x2a
 23ff560:	bf08      	it	eq
 23ff562:	3101      	addeq	r1, #1
 23ff564:	f7fc f838 	bl	23fb5d8 <strcmp>
 23ff568:	fab0 f080 	clz	r0, r0
 23ff56c:	0940      	lsrs	r0, r0, #5
 23ff56e:	bd08      	pop	{r3, pc}
 23ff570:	2001      	movs	r0, #1
 23ff572:	e7fc      	b.n	23ff56e <_ZNKSt9type_infoeqERKS_+0x22>
 23ff574:	2000      	movs	r0, #0
 23ff576:	e7fa      	b.n	23ff56e <_ZNKSt9type_infoeqERKS_+0x22>

023ff578 <atexit>:
 23ff578:	2300      	movs	r3, #0
 23ff57a:	4601      	mov	r1, r0
 23ff57c:	461a      	mov	r2, r3
 23ff57e:	4618      	mov	r0, r3
 23ff580:	f7fc b878 	b.w	23fb674 <__register_exitproc>

023ff584 <isprint>:
 23ff584:	4b02      	ldr	r3, [pc, #8]	; (23ff590 <isprint+0xc>)
 23ff586:	4418      	add	r0, r3
 23ff588:	7840      	ldrb	r0, [r0, #1]
 23ff58a:	f000 0097 	and.w	r0, r0, #151	; 0x97
 23ff58e:	4770      	bx	lr
 23ff590:	023ffec9 	.word	0x023ffec9

023ff594 <memcpy>:
 23ff594:	440a      	add	r2, r1
 23ff596:	1e43      	subs	r3, r0, #1
 23ff598:	4291      	cmp	r1, r2
 23ff59a:	d100      	bne.n	23ff59e <memcpy+0xa>
 23ff59c:	4770      	bx	lr
 23ff59e:	b510      	push	{r4, lr}
 23ff5a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 23ff5a4:	4291      	cmp	r1, r2
 23ff5a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 23ff5aa:	d1f9      	bne.n	23ff5a0 <memcpy+0xc>
 23ff5ac:	bd10      	pop	{r4, pc}

023ff5ae <memmove>:
 23ff5ae:	4288      	cmp	r0, r1
 23ff5b0:	b510      	push	{r4, lr}
 23ff5b2:	eb01 0402 	add.w	r4, r1, r2
 23ff5b6:	d902      	bls.n	23ff5be <memmove+0x10>
 23ff5b8:	4284      	cmp	r4, r0
 23ff5ba:	4623      	mov	r3, r4
 23ff5bc:	d807      	bhi.n	23ff5ce <memmove+0x20>
 23ff5be:	1e43      	subs	r3, r0, #1
 23ff5c0:	42a1      	cmp	r1, r4
 23ff5c2:	d008      	beq.n	23ff5d6 <memmove+0x28>
 23ff5c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff5c8:	f803 2f01 	strb.w	r2, [r3, #1]!
 23ff5cc:	e7f8      	b.n	23ff5c0 <memmove+0x12>
 23ff5ce:	4402      	add	r2, r0
 23ff5d0:	4601      	mov	r1, r0
 23ff5d2:	428a      	cmp	r2, r1
 23ff5d4:	d100      	bne.n	23ff5d8 <memmove+0x2a>
 23ff5d6:	bd10      	pop	{r4, pc}
 23ff5d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 23ff5dc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 23ff5e0:	e7f7      	b.n	23ff5d2 <memmove+0x24>

023ff5e2 <memset>:
 23ff5e2:	4402      	add	r2, r0
 23ff5e4:	4603      	mov	r3, r0
 23ff5e6:	4293      	cmp	r3, r2
 23ff5e8:	d100      	bne.n	23ff5ec <memset+0xa>
 23ff5ea:	4770      	bx	lr
 23ff5ec:	f803 1b01 	strb.w	r1, [r3], #1
 23ff5f0:	e7f9      	b.n	23ff5e6 <memset+0x4>
	...

023ff5f4 <srand>:
 23ff5f4:	b538      	push	{r3, r4, r5, lr}
 23ff5f6:	4b10      	ldr	r3, [pc, #64]	; (23ff638 <srand+0x44>)
 23ff5f8:	4604      	mov	r4, r0
 23ff5fa:	681d      	ldr	r5, [r3, #0]
 23ff5fc:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff5fe:	b9b3      	cbnz	r3, 23ff62e <srand+0x3a>
 23ff600:	2018      	movs	r0, #24
 23ff602:	f7fd fa4b 	bl	23fca9c <malloc>
 23ff606:	4602      	mov	r2, r0
 23ff608:	63a8      	str	r0, [r5, #56]	; 0x38
 23ff60a:	b920      	cbnz	r0, 23ff616 <srand+0x22>
 23ff60c:	4b0b      	ldr	r3, [pc, #44]	; (23ff63c <srand+0x48>)
 23ff60e:	2142      	movs	r1, #66	; 0x42
 23ff610:	480b      	ldr	r0, [pc, #44]	; (23ff640 <srand+0x4c>)
 23ff612:	f7fd fa97 	bl	23fcb44 <__assert_func>
 23ff616:	490b      	ldr	r1, [pc, #44]	; (23ff644 <srand+0x50>)
 23ff618:	4b0b      	ldr	r3, [pc, #44]	; (23ff648 <srand+0x54>)
 23ff61a:	e9c0 1300 	strd	r1, r3, [r0]
 23ff61e:	4b0b      	ldr	r3, [pc, #44]	; (23ff64c <srand+0x58>)
 23ff620:	2100      	movs	r1, #0
 23ff622:	6083      	str	r3, [r0, #8]
 23ff624:	230b      	movs	r3, #11
 23ff626:	8183      	strh	r3, [r0, #12]
 23ff628:	2001      	movs	r0, #1
 23ff62a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23ff62e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff630:	2200      	movs	r2, #0
 23ff632:	611c      	str	r4, [r3, #16]
 23ff634:	615a      	str	r2, [r3, #20]
 23ff636:	bd38      	pop	{r3, r4, r5, pc}
 23ff638:	1007aab4 	.word	0x1007aab4
 23ff63c:	023ffe35 	.word	0x023ffe35
 23ff640:	023ffe4c 	.word	0x023ffe4c
 23ff644:	abcd330e 	.word	0xabcd330e
 23ff648:	e66d1234 	.word	0xe66d1234
 23ff64c:	0005deec 	.word	0x0005deec

023ff650 <strchr>:
 23ff650:	b2c9      	uxtb	r1, r1
 23ff652:	4603      	mov	r3, r0
 23ff654:	f810 2b01 	ldrb.w	r2, [r0], #1
 23ff658:	b11a      	cbz	r2, 23ff662 <strchr+0x12>
 23ff65a:	428a      	cmp	r2, r1
 23ff65c:	d1f9      	bne.n	23ff652 <strchr+0x2>
 23ff65e:	4618      	mov	r0, r3
 23ff660:	4770      	bx	lr
 23ff662:	2900      	cmp	r1, #0
 23ff664:	bf18      	it	ne
 23ff666:	2300      	movne	r3, #0
 23ff668:	e7f9      	b.n	23ff65e <strchr+0xe>

023ff66a <strchrnul>:
 23ff66a:	b510      	push	{r4, lr}
 23ff66c:	4604      	mov	r4, r0
 23ff66e:	f7ff ffef 	bl	23ff650 <strchr>
 23ff672:	b918      	cbnz	r0, 23ff67c <strchrnul+0x12>
 23ff674:	4620      	mov	r0, r4
 23ff676:	f7fb ffb9 	bl	23fb5ec <strlen>
 23ff67a:	4420      	add	r0, r4
 23ff67c:	bd10      	pop	{r4, pc}

023ff67e <strcpy>:
 23ff67e:	4603      	mov	r3, r0
 23ff680:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff684:	f803 2b01 	strb.w	r2, [r3], #1
 23ff688:	2a00      	cmp	r2, #0
 23ff68a:	d1f9      	bne.n	23ff680 <strcpy+0x2>
 23ff68c:	4770      	bx	lr

023ff68e <strncmp>:
 23ff68e:	b510      	push	{r4, lr}
 23ff690:	b17a      	cbz	r2, 23ff6b2 <strncmp+0x24>
 23ff692:	4603      	mov	r3, r0
 23ff694:	3901      	subs	r1, #1
 23ff696:	1884      	adds	r4, r0, r2
 23ff698:	f813 0b01 	ldrb.w	r0, [r3], #1
 23ff69c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23ff6a0:	4290      	cmp	r0, r2
 23ff6a2:	d101      	bne.n	23ff6a8 <strncmp+0x1a>
 23ff6a4:	42a3      	cmp	r3, r4
 23ff6a6:	d101      	bne.n	23ff6ac <strncmp+0x1e>
 23ff6a8:	1a80      	subs	r0, r0, r2
 23ff6aa:	bd10      	pop	{r4, pc}
 23ff6ac:	2800      	cmp	r0, #0
 23ff6ae:	d1f3      	bne.n	23ff698 <strncmp+0xa>
 23ff6b0:	e7fa      	b.n	23ff6a8 <strncmp+0x1a>
 23ff6b2:	4610      	mov	r0, r2
 23ff6b4:	e7f9      	b.n	23ff6aa <strncmp+0x1c>

023ff6b6 <strrchr>:
 23ff6b6:	b538      	push	{r3, r4, r5, lr}
 23ff6b8:	4603      	mov	r3, r0
 23ff6ba:	460c      	mov	r4, r1
 23ff6bc:	b969      	cbnz	r1, 23ff6da <strrchr+0x24>
 23ff6be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23ff6c2:	f7ff bfc5 	b.w	23ff650 <strchr>
 23ff6c6:	1c43      	adds	r3, r0, #1
 23ff6c8:	4605      	mov	r5, r0
 23ff6ca:	4621      	mov	r1, r4
 23ff6cc:	4618      	mov	r0, r3
 23ff6ce:	f7ff ffbf 	bl	23ff650 <strchr>
 23ff6d2:	2800      	cmp	r0, #0
 23ff6d4:	d1f7      	bne.n	23ff6c6 <strrchr+0x10>
 23ff6d6:	4628      	mov	r0, r5
 23ff6d8:	bd38      	pop	{r3, r4, r5, pc}
 23ff6da:	2500      	movs	r5, #0
 23ff6dc:	e7f5      	b.n	23ff6ca <strrchr+0x14>
	...

023ff6e0 <_strtol_l.constprop.0>:
 23ff6e0:	2b01      	cmp	r3, #1
 23ff6e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23ff6e6:	d001      	beq.n	23ff6ec <_strtol_l.constprop.0+0xc>
 23ff6e8:	2b24      	cmp	r3, #36	; 0x24
 23ff6ea:	d906      	bls.n	23ff6fa <_strtol_l.constprop.0+0x1a>
 23ff6ec:	f7fd fa1c 	bl	23fcb28 <__errno>
 23ff6f0:	2316      	movs	r3, #22
 23ff6f2:	6003      	str	r3, [r0, #0]
 23ff6f4:	2000      	movs	r0, #0
 23ff6f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23ff6fa:	460d      	mov	r5, r1
 23ff6fc:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 23ff7e0 <_strtol_l.constprop.0+0x100>
 23ff700:	462e      	mov	r6, r5
 23ff702:	f815 4b01 	ldrb.w	r4, [r5], #1
 23ff706:	f814 700c 	ldrb.w	r7, [r4, ip]
 23ff70a:	f017 0708 	ands.w	r7, r7, #8
 23ff70e:	d1f7      	bne.n	23ff700 <_strtol_l.constprop.0+0x20>
 23ff710:	2c2d      	cmp	r4, #45	; 0x2d
 23ff712:	d132      	bne.n	23ff77a <_strtol_l.constprop.0+0x9a>
 23ff714:	782c      	ldrb	r4, [r5, #0]
 23ff716:	2701      	movs	r7, #1
 23ff718:	1cb5      	adds	r5, r6, #2
 23ff71a:	2b00      	cmp	r3, #0
 23ff71c:	d05b      	beq.n	23ff7d6 <_strtol_l.constprop.0+0xf6>
 23ff71e:	2b10      	cmp	r3, #16
 23ff720:	d109      	bne.n	23ff736 <_strtol_l.constprop.0+0x56>
 23ff722:	2c30      	cmp	r4, #48	; 0x30
 23ff724:	d107      	bne.n	23ff736 <_strtol_l.constprop.0+0x56>
 23ff726:	782c      	ldrb	r4, [r5, #0]
 23ff728:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 23ff72c:	2c58      	cmp	r4, #88	; 0x58
 23ff72e:	d14d      	bne.n	23ff7cc <_strtol_l.constprop.0+0xec>
 23ff730:	786c      	ldrb	r4, [r5, #1]
 23ff732:	2310      	movs	r3, #16
 23ff734:	3502      	adds	r5, #2
 23ff736:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 23ff73a:	f04f 0c00 	mov.w	ip, #0
 23ff73e:	f108 38ff 	add.w	r8, r8, #4294967295
 23ff742:	4666      	mov	r6, ip
 23ff744:	fbb8 f9f3 	udiv	r9, r8, r3
 23ff748:	fb03 8a19 	mls	sl, r3, r9, r8
 23ff74c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 23ff750:	f1be 0f09 	cmp.w	lr, #9
 23ff754:	d816      	bhi.n	23ff784 <_strtol_l.constprop.0+0xa4>
 23ff756:	4674      	mov	r4, lr
 23ff758:	42a3      	cmp	r3, r4
 23ff75a:	dd24      	ble.n	23ff7a6 <_strtol_l.constprop.0+0xc6>
 23ff75c:	f1bc 0f00 	cmp.w	ip, #0
 23ff760:	db1e      	blt.n	23ff7a0 <_strtol_l.constprop.0+0xc0>
 23ff762:	45b1      	cmp	r9, r6
 23ff764:	d31c      	bcc.n	23ff7a0 <_strtol_l.constprop.0+0xc0>
 23ff766:	d101      	bne.n	23ff76c <_strtol_l.constprop.0+0x8c>
 23ff768:	45a2      	cmp	sl, r4
 23ff76a:	db19      	blt.n	23ff7a0 <_strtol_l.constprop.0+0xc0>
 23ff76c:	fb06 4603 	mla	r6, r6, r3, r4
 23ff770:	f04f 0c01 	mov.w	ip, #1
 23ff774:	f815 4b01 	ldrb.w	r4, [r5], #1
 23ff778:	e7e8      	b.n	23ff74c <_strtol_l.constprop.0+0x6c>
 23ff77a:	2c2b      	cmp	r4, #43	; 0x2b
 23ff77c:	bf04      	itt	eq
 23ff77e:	782c      	ldrbeq	r4, [r5, #0]
 23ff780:	1cb5      	addeq	r5, r6, #2
 23ff782:	e7ca      	b.n	23ff71a <_strtol_l.constprop.0+0x3a>
 23ff784:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 23ff788:	f1be 0f19 	cmp.w	lr, #25
 23ff78c:	d801      	bhi.n	23ff792 <_strtol_l.constprop.0+0xb2>
 23ff78e:	3c37      	subs	r4, #55	; 0x37
 23ff790:	e7e2      	b.n	23ff758 <_strtol_l.constprop.0+0x78>
 23ff792:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 23ff796:	f1be 0f19 	cmp.w	lr, #25
 23ff79a:	d804      	bhi.n	23ff7a6 <_strtol_l.constprop.0+0xc6>
 23ff79c:	3c57      	subs	r4, #87	; 0x57
 23ff79e:	e7db      	b.n	23ff758 <_strtol_l.constprop.0+0x78>
 23ff7a0:	f04f 3cff 	mov.w	ip, #4294967295
 23ff7a4:	e7e6      	b.n	23ff774 <_strtol_l.constprop.0+0x94>
 23ff7a6:	f1bc 0f00 	cmp.w	ip, #0
 23ff7aa:	da05      	bge.n	23ff7b8 <_strtol_l.constprop.0+0xd8>
 23ff7ac:	2322      	movs	r3, #34	; 0x22
 23ff7ae:	4646      	mov	r6, r8
 23ff7b0:	6003      	str	r3, [r0, #0]
 23ff7b2:	b942      	cbnz	r2, 23ff7c6 <_strtol_l.constprop.0+0xe6>
 23ff7b4:	4630      	mov	r0, r6
 23ff7b6:	e79e      	b.n	23ff6f6 <_strtol_l.constprop.0+0x16>
 23ff7b8:	b107      	cbz	r7, 23ff7bc <_strtol_l.constprop.0+0xdc>
 23ff7ba:	4276      	negs	r6, r6
 23ff7bc:	2a00      	cmp	r2, #0
 23ff7be:	d0f9      	beq.n	23ff7b4 <_strtol_l.constprop.0+0xd4>
 23ff7c0:	f1bc 0f00 	cmp.w	ip, #0
 23ff7c4:	d000      	beq.n	23ff7c8 <_strtol_l.constprop.0+0xe8>
 23ff7c6:	1e69      	subs	r1, r5, #1
 23ff7c8:	6011      	str	r1, [r2, #0]
 23ff7ca:	e7f3      	b.n	23ff7b4 <_strtol_l.constprop.0+0xd4>
 23ff7cc:	2430      	movs	r4, #48	; 0x30
 23ff7ce:	2b00      	cmp	r3, #0
 23ff7d0:	d1b1      	bne.n	23ff736 <_strtol_l.constprop.0+0x56>
 23ff7d2:	2308      	movs	r3, #8
 23ff7d4:	e7af      	b.n	23ff736 <_strtol_l.constprop.0+0x56>
 23ff7d6:	2c30      	cmp	r4, #48	; 0x30
 23ff7d8:	d0a5      	beq.n	23ff726 <_strtol_l.constprop.0+0x46>
 23ff7da:	230a      	movs	r3, #10
 23ff7dc:	e7ab      	b.n	23ff736 <_strtol_l.constprop.0+0x56>
 23ff7de:	bf00      	nop
 23ff7e0:	023ffeca 	.word	0x023ffeca

023ff7e4 <strtol>:
 23ff7e4:	4613      	mov	r3, r2
 23ff7e6:	460a      	mov	r2, r1
 23ff7e8:	4601      	mov	r1, r0
 23ff7ea:	4802      	ldr	r0, [pc, #8]	; (23ff7f4 <strtol+0x10>)
 23ff7ec:	6800      	ldr	r0, [r0, #0]
 23ff7ee:	f7ff bf77 	b.w	23ff6e0 <_strtol_l.constprop.0>
 23ff7f2:	bf00      	nop
 23ff7f4:	1007aab4 	.word	0x1007aab4

023ff7f8 <dynalib_user>:
 23ff7f8:	023fb5fd 023fb625 023fb629 00000000     ..?.%.?.).?.....
 23ff808:	6c6c6143 206e6f20 65727570 72697620     Call on pure vir
 23ff818:	6c617574 736e4900 69666675 6e656963     tual.Insufficien
 23ff828:	61642074 61206174 6c696176 656c6261     t data available
 23ff838:	6f726620 4441206d 34334c58 41002e33      from ADXL343..A
 23ff848:	334c5844 6e203334 6620746f 646e756f     DXL343 not found
 23ff858:	6544202e 65636976 3a444920 25783020     . Device ID: 0x%
 23ff868:	00583230 4c584441 20333433 65746564     02X.ADXL343 dete
 23ff878:	64657463 6544202e 65636976 3a444920     cted. Device ID:
 23ff888:	25783020 00583230 4c584441 20333433      0x%02X.ADXL343 
 23ff898:	74696e69 696c6169 6974617a 63206e6f     initialization c
 23ff8a8:	6c706d6f 2e657465 2d695700 6e206946     omplete..Wi-Fi n
 23ff8b8:	7220746f 79646165 7254002e 6d736e61     ot ready..Transm
 23ff8c8:	63207469 656c6c61 69772064 65206874     it called with e
 23ff8d8:	7974706d 66756220 2e726566 696b5320     mpty buffer. Ski
 23ff8e8:	6e697070 72742067 6d736e61 69737369     pping transmissi
 23ff8f8:	002e6e6f 2c756c25 66322e25 322e252c     on..%lu,%.2f,%.2
 23ff908:	2e252c66 000a6632 6e6e6f43 65746365     f,%.2f..Connecte
 23ff918:	6f742064 72657320 2e726576 61745320     d to server. Sta
 23ff928:	6e697472 61642067 63206174 656c6c6f     rting data colle
 23ff938:	6f697463 2e2e2e6e 6d615300 20656c70     ction....Sample 
 23ff948:	65746172 6425203a 007a4820 6c696146     rate: %d Hz.Fail
 23ff958:	74206465 6f63206f 63656e6e 6f742074     ed to connect to
 23ff968:	72657320 2e726576 74614400 6f632061      server..Data co
 23ff978:	63656c6c 6e6f6974 6d6f6320 74656c70     llection complet
 23ff988:	46002e65 656c6961 6f742064 696e6920     e..Failed to ini
 23ff998:	6c616974 20657a69 4c584441 21333433     tialize ADXL343!
 23ff9a8:	58444100 3334334c 696e6920 6c616974     .ADXL343 initial
 23ff9b8:	64657a69 6157202e 6e697469 6f662067     ized. Waiting fo
 23ff9c8:	75622072 6e6f7474 65727020 2e2e7373     r button press..
 23ff9d8:	0000002e                                ....

023ff9dc <_ZTV5Timer>:
	...
 23ff9e4:	023fbaa5 023fbae9 023fb8d3              ..?...?...?.

023ff9f0 <_ZTVN5spark10LogHandlerE>:
	...
 23ffa00:	023fb645 023fb8d1                       E.?...?.

023ffa08 <_ZTVN5spark16SerialLogHandlerE>:
	...
 23ffa10:	023fba31 023fba65 023fdbd1 023fdd79     1.?.e.?...?.y.?.

023ffa20 <_ZTVN5spark13EthernetClassE>:
	...
 23ffa28:	023fcc13 023fcc09 023fcbff 023fcbf5     ..?...?...?...?.
 23ffa38:	023fcbe9 023fcbdd 023feef9 023fef01     ..?...?...?...?.
 23ffa48:	023fcbd1 023fcbc9 023fcbbf 023fcbb5     ..?...?...?...?.
 23ffa58:	023ff04d 023fef31 023fef39              M.?.1.?.9.?.

023ffa64 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

023ffa6c <_ZTVN5spark16JSONStreamWriterE>:
	...
 23ffa74:	023fcf11 023fcf13 023fced1 023fe32f     ..?...?...?./.?.
 23ffa84:	64756162 72655300 006c6169 69726553     baud.Serial.Seri
 23ffa94:	00316c61 4e4f534a 65727453 6f4c6d61     al1.JSONStreamLo
 23ffaa4:	6e614867 72656c64 70706100 31302500     gHandler.app.%01
 23ffab4:	00207530 2c00205d 29280020 2000203a     0u .] ., .(): . 
 23ffac4:	6f63005b 3d206564 69250020 74656400     [.code = .%i.det
 23ffad4:	736c6961 00203d20 6d000a0d 6c006600     ails = ....m.f.l
 23ffae4:	6e66006e 63007400 0065646f 61746564     n.fn.t.code.deta
 23ffaf4:	00006c69                                il..

023ffaf8 <_ZTVN5spark16StreamLogHandlerE>:
	...
 23ffb00:	023fd459 023fd471 023fdbd1 023fdd79     Y.?.q.?...?.y.?.

023ffb10 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 23ffb18:	023fd485 023fd499 023fddb1 023fcfdb     ..?...?...?...?.

023ffb28 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 23ffb30:	023fcfed 023fd013 023fdb35 023fcfdd     ..?...?.5.?...?.

023ffb40 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 23ffb48:	023fcfeb 023fd021 023fd3c1 023fd043     ..?.!.?...?.C.?.
 23ffb58:	252d5925 64252d6d 3a482554 253a4d25     %Y-%m-%dT%H:%M:%
 23ffb68:	007a2553 74637361 00656d69              S%z.asctime.

023ffb74 <_ZTV9IPAddress>:
	...
 23ffb7c:	023fe0d1 023fe0c1 023fe0c3              ..?...?...?.

023ffb88 <_ZTV9USBSerial>:
	...
 23ffb90:	023fe1fb 023fe263 023fe239 023fcee5     ..?.c.?.9.?...?.
 23ffba0:	023fe22b 023fe1fd 023fe20d 023fe25d     +.?...?...?.].?.
 23ffbb0:	023fcfb1 023fe21d 023fe1f5 75007525     ..?...?...?.%u.u
 23ffbc0:	78343025 00000000                       %04x....

023ffbc8 <_ZTV11USARTSerial>:
	...
 23ffbd0:	023fe6b1 023fe71d 023fe6f5 023fcee5     ..?...?...?...?.
 23ffbe0:	023fe6c5 023fe6e1 023fe6d3 023fe6ef     ..?...?...?...?.
 23ffbf0:	023fcfb1 023fe6b3 023fe6b7              ..?...?...?.

023ffbfc <_ZTV7TwoWire>:
	...
 23ffc04:	023fe76f 023fe7b9 023fe791 023fe771     o.?...?...?.q.?.
 23ffc14:	023fe799 023fe7a1 023fe7a9 023fe7b1     ..?...?...?...?.
 23ffc24:	023fcfb1 69726977 7200676e 20766365     ..?.wiring.recv 
 23ffc34:	6f727265 203d2072 00006425              error = %d..

023ffc40 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ffc48:	023fe931 023fe955 023fee37 023fe963     1.?.U.?.7.?.c.?.
 23ffc58:	023fe935                                5.?.

023ffc5c <_ZTV9TCPClient>:
	...
 23ffc64:	023fdf39 023fdf51 023fe8ad 023fe8c7     9.?.Q.?...?...?.
 23ffc74:	023feccd 023fe8f1 023feb4b 023fe925     ..?...?.K.?.%.?.
 23ffc84:	023fcfb1 023febdd 023fea1d 023feb79     ..?...?...?.y.?.
 23ffc94:	023fed81 023feb19 023fe927 023fe8d9     ..?...?.'.?...?.
 23ffca4:	023fe969 023fe9fd                       i.?...?.

023ffcac <_ZTVN5spark9WiFiClassE>:
	...
 23ffcb4:	023fee9b 023fee91 023fee87 023fee3d     ..?...?...?.=.?.
 23ffcc4:	023fee7b 023fee6f 023feef9 023fef01     {.?.o.?...?...?.
 23ffcd4:	023fee63 023fee5b 023fee51 023fee47     c.?.[.?.Q.?.G.?.
 23ffce4:	023ff04d 023fef31 023fef39              M.?.1.?.9.?.

023ffcf0 <CSWTCH.165>:
 23ffcf0:	1007aed4 1007af7c 1007af84              ....|.......

023ffcfc <_ZTVN5spark12NetworkClassE>:
	...
 23ffd04:	023feeb9 023feec3 023feecd 023feed7     ..?...?...?...?.
 23ffd14:	023feee1 023feeed 023feef9 023fef01     ..?...?...?...?.
 23ffd24:	023fef09 023fef15 023fef1d 023fef27     ..?...?...?.'.?.
 23ffd34:	023ff04d 023fef31 023fef39              M.?.1.?.9.?.

023ffd40 <_ZSt7nothrow>:
	...

023ffd41 <_ZTSSt19_Sp_make_shared_tag>:
 23ffd41:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
 23ffd51:	5f646572 00676174                        red_tag....

023ffd5c <_ZTISt19_Sp_make_shared_tag>:
 23ffd5c:	023ffd9c 023ffd41                       ..?.A.?.

023ffd64 <_ZTIN10__cxxabiv117__class_type_infoE>:
 23ffd64:	023ffdfc 023ffd70 023ffe20              ..?.p.?. .?.

023ffd70 <_ZTSN10__cxxabiv117__class_type_infoE>:
 23ffd70:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
 23ffd80:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
 23ffd90:	00000045                                E...

023ffd94 <_ZTVN10__cxxabiv117__class_type_infoE>:
 23ffd94:	00000000 023ffd64 023ff3a1 023ff3b5     ....d.?...?...?.
 23ffda4:	023ff549 023ff549 023ff41f 023ff361     I.?.I.?...?.a.?.
 23ffdb4:	023ff407 023ff3c9 023ff393              ..?...?...?.

023ffdc0 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 23ffdc0:	023ffdfc 023ffdcc 023ffd64              ..?...?.d.?.

023ffdcc <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 23ffdcc:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
 23ffddc:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
 23ffdec:	456f666e 00000000                       nfoE....

023ffdf4 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 23ffdf4:	00000000 023ffdc0 023ff449 023ff45d     ......?.I.?.].?.
 23ffe04:	023ff549 023ff549 023ff41f 023ff361     I.?.I.?...?.a.?.
 23ffe14:	023ff51d 023ff4a9 023ff471              ..?...?.q.?.

023ffe20 <_ZTISt9type_info>:
 23ffe20:	023ffd9c 023ffe28                       ..?.(.?.

023ffe28 <_ZTSSt9type_info>:
 23ffe28:	74397453 5f657079 6f666e69 45455200     St9type_info.REE
 23ffe38:	6d20544e 6f6c6c61 75732063 65656363     NT malloc succee
 23ffe48:	00646564 746e6d2f 726f772f 6170736b     ded./mnt/workspa
 23ffe58:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
 23ffe68:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
 23ffe78:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
 23ffe88:	656e696c 5f38342d 30323032 34323131     line-48_20201124
 23ffe98:	3036315f 30383136 2f313436 2f637273     _1606180641/src/
 23ffea8:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
 23ffeb8:	732f6362 696c6474 61722f62 632e646e     bc/stdlib/rand.c
	...

023ffec9 <_ctype_>:
 23ffec9:	20202000 20202020 28282020 20282828     .         ((((( 
 23ffed9:	20202020 20202020 20202020 20202020                     
 23ffee9:	10108820 10101010 10101010 10101010      ...............
 23ffef9:	04040410 04040404 10040404 10101010     ................
 23fff09:	41411010 41414141 01010101 01010101     ..AAAAAA........
 23fff19:	01010101 01010101 01010101 10101010     ................
 23fff29:	42421010 42424242 02020202 02020202     ..BBBBBB........
 23fff39:	02020202 02020202 02020202 10101010     ................
 23fff49:	00000020 00000000 00000000 00000000      ...............
	...

023fffca <link_const_data_end>:
	...

023fffcc <link_constructors_location>:
 23fffcc:	023fbfa5 	.word	0x023fbfa5
 23fffd0:	023fcc1d 	.word	0x023fcc1d
 23fffd4:	023fcc71 	.word	0x023fcc71
 23fffd8:	023fccbd 	.word	0x023fccbd
 23fffdc:	023fcec1 	.word	0x023fcec1
 23fffe0:	023fdbc1 	.word	0x023fdbc1
 23fffe4:	023fdf25 	.word	0x023fdf25
 23fffe8:	023fdf65 	.word	0x023fdf65
 23fffec:	023fe891 	.word	0x023fe891
 23ffff0:	023feea5 	.word	0x023feea5
 23ffff4:	023ff061 	.word	0x023ff061
